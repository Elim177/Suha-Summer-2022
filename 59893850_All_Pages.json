[{"items": [{"tags": ["python", "tensorflow", "tensorflow2.0"], "owner": {"account_id": 4060371, "reputation": 5446, "user_id": 3337089, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b096725512960a65abe37b76c383de67?s=256&d=identicon&r=PG&f=1", "display_name": "Nagabhushan S N", "link": "https://stackoverflow.com/users/3337089/nagabhushan-s-n"}, "is_answered": true, "view_count": 5353, "accepted_answer_id": 62683800, "answer_count": 2, "score": 6, "last_activity_date": 1593697712, "creation_date": 1579859072, "last_edit_date": 1579859253, "question_id": 59893850, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59893850/how-to-accumulate-gradients-in-tensorflow-2-0", "title": "How to accumulate gradients in tensorflow 2.0?", "body": "<p>I'm training a model with <code>tensorflow 2.0</code>. The images in my training set are of different resolutions. The Model I've built can handle variable resolutions (conv layers followed by global averaging). My training set is very small and I want to use full training set in a single batch. </p>\n\n<p>Since my images are of different resolutions, I can't use <code>model.fit()</code>. So, I'm planning to pass each sample through the network individually, accumulate the errors/gradients and then apply one optimizer step. I'm able to compute loss values, but I don't know how to accumulate the losses/gradients. How can I accumulate the losses/gradients and then apply a single optimizer step?</p>\n\n<p><strong>Code</strong>:</p>\n\n<pre><code>for i in range(num_epochs):\n    print(f'Epoch: {i + 1}')\n    total_loss = 0\n    for j in tqdm(range(num_samples)):\n        sample = samples[j]\n        with tf.GradientTape as tape:\n            prediction = self.model(sample)\n            loss_value = self.loss_function(y_true=labels[j], y_pred=prediction)\n        gradients = tape.gradient(loss_value, self.model.trainable_variables)\n        self.optimizer.apply_gradients(zip(gradients, self.model.trainable_variables))\n        total_loss += loss_value\n\n    epoch_loss = total_loss / num_samples\n    print(f'Epoch loss: {epoch_loss}')\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 49}]