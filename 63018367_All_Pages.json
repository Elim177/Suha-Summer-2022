[{"items": [{"tags": ["python", "tensorflow", "keras", "gradient-descent", "conv-neural-network"], "owner": {"account_id": 26373, "reputation": 43816, "user_id": 68571, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/Yw9Lg.png?s=256&g=1", "display_name": "VansFannel", "link": "https://stackoverflow.com/users/68571/vansfannel"}, "is_answered": false, "view_count": 77, "answer_count": 0, "score": 1, "last_activity_date": 1595658189, "creation_date": 1595347015, "question_id": 63018367, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/63018367/how-can-i-use-meta-sgd-with-u-net-a-network-with-a-lot-of-layers-and-weights", "title": "How can I use Meta-SGD with U-Net? A network with a lot of layers and weights", "body": "<p>I'm using this:</p>\n<pre><code>Python version: 3.7.7 (default, May  6 2020, 11:45:54) [MSC v.1916 64 bit (AMD64)]\nTensorFlow version: 2.1.0\nEager execution: True\n</code></pre>\n<p>With a U-Net model with this summary:</p>\n<pre><code>Model: &quot;model&quot;\n__________________________________________________________________________________________________\nLayer (type)                    Output Shape         Param #     Connected to\n==================================================================================================\ninput_1 (InputLayer)            [(None, 200, 200, 1) 0\n__________________________________________________________________________________________________\nconv1_1 (Conv2D)                (None, 200, 200, 64) 1664        input_1[0][0]\n__________________________________________________________________________________________________\nconv1_2 (Conv2D)                (None, 200, 200, 64) 102464      conv1_1[0][0]\n__________________________________________________________________________________________________\npool1 (MaxPooling2D)            (None, 100, 100, 64) 0           conv1_2[0][0]\n__________________________________________________________________________________________________\nconv2_1 (Conv2D)                (None, 100, 100, 96) 55392       pool1[0][0]\n__________________________________________________________________________________________________\nconv2_2 (Conv2D)                (None, 100, 100, 96) 83040       conv2_1[0][0]\n__________________________________________________________________________________________________\npool2 (MaxPooling2D)            (None, 50, 50, 96)   0           conv2_2[0][0]\n__________________________________________________________________________________________________\nconv3_1 (Conv2D)                (None, 50, 50, 128)  110720      pool2[0][0]\n__________________________________________________________________________________________________\nconv3_2 (Conv2D)                (None, 50, 50, 128)  147584      conv3_1[0][0]\n__________________________________________________________________________________________________\npool3 (MaxPooling2D)            (None, 25, 25, 128)  0           conv3_2[0][0]\n__________________________________________________________________________________________________\nconv4_1 (Conv2D)                (None, 25, 25, 256)  295168      pool3[0][0]\n__________________________________________________________________________________________________\nconv4_2 (Conv2D)                (None, 25, 25, 256)  1048832     conv4_1[0][0]\n__________________________________________________________________________________________________\npool4 (MaxPooling2D)            (None, 12, 12, 256)  0           conv4_2[0][0]\n__________________________________________________________________________________________________\nconv5_1 (Conv2D)                (None, 12, 12, 512)  1180160     pool4[0][0]\n__________________________________________________________________________________________________\nconv5_2 (Conv2D)                (None, 12, 12, 512)  2359808     conv5_1[0][0]\n__________________________________________________________________________________________________\nup_conv5 (UpSampling2D)         (None, 24, 24, 512)  0           conv5_2[0][0]\n__________________________________________________________________________________________________\ncrop_conv4 (Cropping2D)         (None, 24, 24, 256)  0           conv4_2[0][0]\n__________________________________________________________________________________________________\nconcatenate (Concatenate)       (None, 24, 24, 768)  0           up_conv5[0][0]\n                                                                 crop_conv4[0][0]\n__________________________________________________________________________________________________\nconv6_1 (Conv2D)                (None, 24, 24, 256)  1769728     concatenate[0][0]\n__________________________________________________________________________________________________\nconv6_2 (Conv2D)                (None, 24, 24, 256)  590080      conv6_1[0][0]\n__________________________________________________________________________________________________\nup_conv6 (UpSampling2D)         (None, 48, 48, 256)  0           conv6_2[0][0]\n__________________________________________________________________________________________________\ncrop_conv3 (Cropping2D)         (None, 48, 48, 128)  0           conv3_2[0][0]\n__________________________________________________________________________________________________\nconcatenate_1 (Concatenate)     (None, 48, 48, 384)  0           up_conv6[0][0]\n                                                                 crop_conv3[0][0]\n__________________________________________________________________________________________________\nconv7_1 (Conv2D)                (None, 48, 48, 128)  442496      concatenate_1[0][0]\n__________________________________________________________________________________________________\nconv7_2 (Conv2D)                (None, 48, 48, 128)  147584      conv7_1[0][0]\n__________________________________________________________________________________________________\nup_conv7 (UpSampling2D)         (None, 96, 96, 128)  0           conv7_2[0][0]\n__________________________________________________________________________________________________\ncrop_conv2 (Cropping2D)         (None, 96, 96, 96)   0           conv2_2[0][0]\n__________________________________________________________________________________________________\nconcatenate_2 (Concatenate)     (None, 96, 96, 224)  0           up_conv7[0][0]\n                                                                 crop_conv2[0][0]\n__________________________________________________________________________________________________\nconv8_1 (Conv2D)                (None, 96, 96, 96)   193632      concatenate_2[0][0]\n__________________________________________________________________________________________________\nconv8_2 (Conv2D)                (None, 96, 96, 96)   83040       conv8_1[0][0]\n__________________________________________________________________________________________________\nup_conv8 (UpSampling2D)         (None, 192, 192, 96) 0           conv8_2[0][0]\n__________________________________________________________________________________________________\ncrop_conv1 (Cropping2D)         (None, 192, 192, 64) 0           conv1_2[0][0]\n__________________________________________________________________________________________________\nconcatenate_3 (Concatenate)     (None, 192, 192, 160 0           up_conv8[0][0]\n                                                                 crop_conv1[0][0]\n__________________________________________________________________________________________________\nconv9_1 (Conv2D)                (None, 192, 192, 64) 92224       concatenate_3[0][0]\n__________________________________________________________________________________________________\nconv9_2 (Conv2D)                (None, 192, 192, 64) 36928       conv9_1[0][0]\n__________________________________________________________________________________________________\nconv9_3 (ZeroPadding2D)         (None, 200, 200, 64) 0           conv9_2[0][0]\n__________________________________________________________________________________________________\nconv10_1 (Conv2D)               (None, 200, 200, 1)  65          conv9_3[0][0]\n==================================================================================================\nTotal params: 8,740,609\nTrainable params: 8,740,609\nNon-trainable params: 0\n</code></pre>\n<p>And with this implementation:</p>\n<pre><code>inputs = Input(shape=img_shape)\n\n    conv1 = Conv2D(64, (5, 5), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv1_1')(inputs)\n    conv1 = Conv2D(64, (5, 5), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size=(2, 2), data_format=&quot;channels_last&quot;, name='pool1')(conv1)\n    conv2 = Conv2D(96, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv2_1')(pool1)\n    conv2 = Conv2D(96, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size=(2, 2), data_format=&quot;channels_last&quot;, name='pool2')(conv2)\n\n    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv3_1')(pool2)\n    conv3 = Conv2D(128, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv3_2')(conv3)\n    pool3 = MaxPooling2D(pool_size=(2, 2), data_format=&quot;channels_last&quot;, name='pool3')(conv3)\n\n    conv4 = Conv2D(256, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv4_1')(pool3)\n    conv4 = Conv2D(256, (4, 4), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv4_2')(conv4)\n    pool4 = MaxPooling2D(pool_size=(2, 2), data_format=&quot;channels_last&quot;, name='pool4')(conv4)\n\n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv5_1')(pool4)\n    conv5 = Conv2D(512, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv5_2')(conv5)\n\n    up_conv5 = UpSampling2D(size=(2, 2), data_format=&quot;channels_last&quot;, name='up_conv5')(conv5)\n    ch, cw = get_crop_shape(conv4, up_conv5)\n    crop_conv4 = Cropping2D(cropping=(ch, cw), data_format=&quot;channels_last&quot;, name='crop_conv4')(conv4)\n    up6 = concatenate([up_conv5, crop_conv4])\n    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv6_1')(up6)\n    conv6 = Conv2D(256, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv6_2')(conv6)\n\n    up_conv6 = UpSampling2D(size=(2, 2), data_format=&quot;channels_last&quot;, name='up_conv6')(conv6)\n    ch, cw = get_crop_shape(conv3, up_conv6)\n    crop_conv3 = Cropping2D(cropping=(ch, cw), data_format=&quot;channels_last&quot;, name='crop_conv3')(conv3)\n    up7 = concatenate([up_conv6, crop_conv3])\n    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv7_1')(up7)\n    conv7 = Conv2D(128, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv7_2')(conv7)\n\n    up_conv7 = UpSampling2D(size=(2, 2), data_format=&quot;channels_last&quot;, name='up_conv7')(conv7)\n    ch, cw = get_crop_shape(conv2, up_conv7)\n    crop_conv2 = Cropping2D(cropping=(ch, cw), data_format=&quot;channels_last&quot;, name='crop_conv2')(conv2)\n    up8 = concatenate([up_conv7, crop_conv2])\n    conv8 = Conv2D(96, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv8_1')(up8)\n    conv8 = Conv2D(96, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv8_2')(conv8)\n\n    up_conv8 = UpSampling2D(size=(2, 2), data_format=&quot;channels_last&quot;, name='up_conv8')(conv8)\n    ch, cw = get_crop_shape(conv1, up_conv8)\n    crop_conv1 = Cropping2D(cropping=(ch, cw), data_format=&quot;channels_last&quot;, name='crop_conv1')(conv1)\n    up9 = concatenate([up_conv8, crop_conv1])\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv9_1')(up9)\n    conv9 = Conv2D(64, (3, 3), activation='relu', padding='same', data_format=&quot;channels_last&quot;, name='conv9_2')(conv9)\n\n    ch, cw = get_crop_shape(inputs, conv9)\n    conv9 = ZeroPadding2D(padding=(ch, cw), data_format=&quot;channels_last&quot;, name='conv9_3')(conv9)\n    conv10 = Conv2D(1, (1, 1), activation='sigmoid', data_format=&quot;channels_last&quot;, name='conv10_1')(conv9)\n    model = Model(inputs=inputs, outputs=conv10)\n</code></pre>\n<p>To compile the model I do:</p>\n<pre><code>model.compile(tf.keras.optimizers.Adam(lr=(1e-4) * 2), loss=dice_coef_loss, metrics=['accuracy'])\n</code></pre>\n<p>I have understood how MAML or Meta-SGD works, but I don't know to use it with a network with a lot of layers and weights.</p>\n<p>On this <a href=\"https://github.com/sudharsan13296/Hands-On-Meta-Learning-With-Python/blob/master/06.%20MAML%20and%20it%27s%20Variants/6.5%20Building%20MAML%20From%20Scratch.ipynb\" rel=\"nofollow noreferrer\">Github</a>, there is an implementation of MAML.</p>\n<p>The first thing that I don't know how to know it is this line of code from the previous Github:</p>\n<pre><code>#randomly initialize our model parameter theta\nself.theta = np.random.normal(size=50).reshape(50, 1)\n</code></pre>\n<p>Here, there are 50 weights. But I don't know how many weights are in the network, and their shape.</p>\n<p>And I don't know if I have use MAML on each layer separately or use it on all layers at once.</p>\n<p>Or how is the format for a HDF5 file.</p>\n<p>How can I use MAML or Meta-SGD with U-Net?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 208}]