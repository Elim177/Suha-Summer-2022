[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 3732765, "reputation": 281, "user_id": 3910261, "user_type": "registered", "accept_rate": 83, "profile_image": "https://www.gravatar.com/avatar/44a8664e824e47be9e3e7a78250b23f6?s=256&d=identicon&r=PG&f=1", "display_name": "jackaraz", "link": "https://stackoverflow.com/users/3910261/jackaraz"}, "is_answered": true, "view_count": 536, "accepted_answer_id": 68445819, "answer_count": 1, "score": 1, "last_activity_date": 1626746531, "creation_date": 1626713024, "last_edit_date": 1626726007, "question_id": 68444180, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/68444180/tf-case-and-tf-cond-executes-all-the-functions-within-in-tensorflow", "title": "`tf.case` and `tf.cond` executes all the functions within in TensorFlow", "body": "<p>I'm trying to execute some condition-dependent functions where each function needs to contract tensors differently depending on their shapes, for instance. However, I realised that <a href=\"https://www.tensorflow.org/api_docs/python/tf/cond\" rel=\"nofollow noreferrer\"><code>tf.cond</code></a> and <a href=\"https://www.tensorflow.org/api_docs/python/tf/case\" rel=\"nofollow noreferrer\"><code>tf.case</code></a> is executing all functions regardless of the condition. Prepared the following code as an example;</p>\n<pre class=\"lang-py prettyprint-override\"><code>def a(): \n    print(&quot;a&quot;)\n    return tf.constant(2)\ndef b(): \n    print(&quot;b&quot;)\n    return tf.constant(3)\ndef c(): \n    print(&quot;c&quot;)\n    return tf.constant(4)\ndef d(): \n    print(&quot;default&quot;)\n    return tf.constant(1)\n\nx = tf.constant(1)\n\n@tf.function\ndef f():\n    return tf.case([\n        (tf.equal(x,1), a),\n        (tf.equal(x,2), b),\n        (tf.equal(x,2), c)\n    ], default=d, exclusive=True)\n\n@tf.function\ndef f1():\n    def cond3():\n        return tf.cond(tf.equal(x,2), c, d)\n    def cond2():\n        return tf.cond(tf.equal(x,2), b, cond3)\n    \n    return tf.cond(tf.equal(x,1), a,  cond2)\n\nprint(f())\nprint(f1())\n\n# Output:\n# a\n# b\n# c\n# default\n# tf.Tensor(2, shape=(), dtype=int32)\n# a\n# b\n# c\n# default\n# tf.Tensor(2, shape=(), dtype=int32)\n</code></pre>\n<p>as you can see for both of the cases, the result is as expected but each function is executed while reaching the conclusion. Hence in my particular case, since I'm doing different calculations depending on the tensor's shape, I get a multitude of errors. I've seen many such bug reports but haven't found a solution. Is there another way to do conditional execution that I'm not aware of where different functions can be executed depending on the condition? Note that I tried simply using <code>if tf.equal(x,2): ...</code> but in that case, I'm getting an error saying that tensor output can not be used as python boolean. Note that this example is much-simplified version of my problem, my conditions are based on tensor shapes such as <code>tf.equal(tf.size(tensor), N)</code> so I really need a way to execute different things for different cases.</p>\n<hr />\n<p>After @LaplaceRicky 's answer I realised that the code that I provided was not representative enough so I'm providing a better example showing what I need to do;</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = tf.ones((3,2,1))\ny = tf.ones((1,2,3))\nz = tf.ones((4,3,5))\nk = tf.ones((3,5,5))\n\ndef a(t): \n    def exe():\n        return tf.einsum(&quot;ijk,lmi&quot;, t, y)\n    return exe\n\ndef b(t): \n    def exe():\n        return tf.einsum(&quot;ijk,ljm&quot;, t, z)\n    return exe\n\ndef d(t): \n    def exe():\n        return tf.einsum(&quot;ijk,klm&quot;, t, z)\n    return exe\n\nc = tf.constant(1)\n\n@tf.function\ndef f(t):\n    y = tf.case([\n        (tf.equal(tf.shape(t)[0], 3), a(t)),\n        (tf.equal(tf.shape(t)[1], 3), b(t)),\n    ], default=d, exclusive=True)\n    return y\n\n\n\nprint(f(x))\n</code></pre>\n<p>This function will execute properly without <code>tf.function</code> decorator leading to</p>\n<pre><code>tf.Tensor(\n[[[[3. 3.]]]\n [[[3. 3.]]]], shape=(2, 1, 1, 2), dtype=float32\n</code></pre>\n<p>However, when the decorator is included I got a <code>ValueError</code> which shows that all the cases are executed.</p>\n<p>System information</p>\n<ul>\n<li>TensorFlow version: 2.4.1</li>\n<li>Python version: 3.8.2</li>\n</ul>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 101}]