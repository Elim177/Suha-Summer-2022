[{"items": [{"tags": ["python", "python-3.x", "tensorflow", "deep-learning", "tf.keras"], "owner": {"account_id": 4060371, "reputation": 5446, "user_id": 3337089, "user_type": "registered", "accept_rate": 86, "profile_image": "https://www.gravatar.com/avatar/b096725512960a65abe37b76c383de67?s=256&d=identicon&r=PG&f=1", "display_name": "Nagabhushan S N", "link": "https://stackoverflow.com/users/3337089/nagabhushan-s-n"}, "is_answered": true, "view_count": 211, "accepted_answer_id": 59370029, "answer_count": 1, "score": 2, "last_activity_date": 1576570510, "creation_date": 1574953420, "last_edit_date": 1575466986, "question_id": 59091650, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59091650/assign-tensor-value-to-placeholder-in-tensorflow-v1-13", "title": "Assign tensor value to placeholder in tensorflow v1.13", "body": "<p>In my tensorflow model, output of one network is a tensor. This value I need to feed as input to another pretrained network. I'm loading the pretrained network as follows</p>\n\n<pre><code>input_b_ph = tf.placeholder(shape=(), dtype=float.32, name='input_b_ph')\nsess1 = tf.Session()\nsaver = tf.train.import_meta_graph(model_path.as_posix() + '.meta', input_map={'input/Identity:0': input_b_ph})\ngraph = tf.get_default_graph()\nsaver.restore(sess1, model_path.as_posix())\noutput_b = graph.get_tensor_by_name('output/Identity:0')\n</code></pre>\n\n<p>I need to feed a tensor to <code>feature_input</code>. How can I achieve this?</p>\n\n<p><strong>Edit 1</strong>: Adding end-to-end details:<br>\nI have a network <code>A</code> defined in tensorflow which takes input <code>input_a</code> and produces output <code>output_a</code>. This I need to feed to ResNet50 pretrained model. For this I used <code>ResNet50</code> from <code>tf.keras</code>  </p>\n\n<pre><code>from tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\n\nresnet_model = ResNet50(include_top=False, pooling='avg')\npreprocessed_input = preprocess_input(tf.cast(output_a, tf.float32))\noutput_resnet = resnet_model([preprocessed_input])\n</code></pre>\n\n<p>Output of ResNet is <code>output_resnet</code>. This I need to feed to another pretrained network, say network <code>B</code>. <code>B</code> is actually written in Keras. I modified it to use <code>tf.keras</code>. Then I save the trained model as below:</p>\n\n<pre><code>import tensorflow as tf\nfrom tensorflow import keras\ncurr_sess = keras.backend.get_session()\nwith tf.name_scope('input'):\n    _ = tf.identity(quality_net.model.input)\nwith tf.name_scope('output'):\n    __ = tf.identity(quality_net.model.output)\nsaver = tf.train.Saver()\nsaver.save(curr_sess, output_filepath.as_posix())\n</code></pre>\n\n<p>I have access to this network <code>B</code> and tried to save the model in <code>h5</code> format but it gave error that model is thread lock. On searching in internet, I got to know this error comes when there are <code>Lambda</code> layers in the network. So, I resorted to saving the model in tensorflow format - 3 files: meta, weights and index. (Any solution using h5 format is also acceptible).</p>\n\n<p>There is a caveat here. That the structure of network <code>B</code> can keep changing and it is from a different project. So I can't hardcode the architecture of <code>B</code>. I've to load it from saved model. My problem is how can I restore this pretrained model and pass <code>output_resnet</code> as input to network <code>B</code>. The output of network <code>B</code> i.e. <code>output_b</code> is the loss function to train my original network <code>A</code>. Currently I'm able to restore network B as follows:</p>\n\n<pre><code>input_b_ph = tf.placeholder(shape=(), dtype=float.32, name='input_b_ph')\nsess1 = tf.Session()\nsaver = tf.train.import_meta_graph(model_path.as_posix() + '.meta', input_map={'input/Identity:0': input_b_ph})\ngraph = tf.get_default_graph()\nsaver.restore(sess1, model_path.as_posix())\noutput_b = graph.get_tensor_by_name('output/Identity:0')\n</code></pre>\n\n<p>I have output from resnet as <code>output_resnet</code> which is a tensor. I need a way to set this to <code>input_b_ph</code>. How can I achieve that? Any alternate solutions are also acceptible</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 48}]