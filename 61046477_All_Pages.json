[{"items": [{"tags": ["tensorflow", "tensorflow2.0", "tensorboard"], "owner": {"account_id": 6768404, "reputation": 18652, "user_id": 5212614, "user_type": "registered", "accept_rate": 32, "profile_image": "https://i.stack.imgur.com/2qaHz.jpg?s=256&g=1", "display_name": "ASH", "link": "https://stackoverflow.com/users/5212614/ash"}, "is_answered": true, "view_count": 104, "accepted_answer_id": 61068723, "answer_count": 1, "score": 0, "last_activity_date": 1586477170, "creation_date": 1586107094, "last_edit_date": 1586477170, "question_id": 61046477, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/61046477/trying-to-analyze-mnist-dataset-through-tensorboard", "title": "Trying to Analyze Mnist Dataset Through TensorBoard", "body": "<p>I am running the code below and getting an error on this line.</p>\n\n<pre><code>tb.configure(argv=[None, '6006', 'C:/Users/ryans/'])\n</code></pre>\n\n<p>Error message reads:</p>\n\n<pre><code>tb.configure(argv=[None, '6006', 'C:/Users/ryans/'])\nusage: tensorboard [-h] [--helpfull] [--logdir PATH] [--host ADDR]\n                   [--port PORT] [--purge_orphaned_data BOOL]\n                   [--reload_interval SECONDS] [--db URI] [--db_import]\n                   [--db_import_use_op] [--inspect] [--version_tb] [--tag TAG]\n                   [--event_file PATH] [--path_prefix PATH]\n                   [--window_title TEXT] [--max_reload_threads COUNT]\n                   [--reload_task TYPE]\n                   [--samples_per_plugin SAMPLES_PER_PLUGIN]\n                   [--debugger_data_server_grpc_port PORT]\n                   [--debugger_port PORT] [--master_tpu_unsecure_channel ADDR]\ntensorboard: error: unrecognized arguments: 6006 C:/Users/ryans/\nAn exception has occurred, use %tb to see the full traceback.\n</code></pre>\n\n<p>Here is my code.</p>\n\n<pre><code># my code ...\nimport os\nimport pandas as pd\nimport numpy as np\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n# %matplotlib inline\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nimport datetime\n\n\nfrom tensorboard import program\ntb = program.TensorBoard()\ntb.configure(argv=[None, '6006', 'C:/Users/ryans/'])\nurl = tb.launch()\n\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\ndef create_model():\n  return tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(28, 28)),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(10, activation='softmax')\n  ])\n\n\nmodel = create_model()\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nlog_dir = \"C:/Users/ryans/logs/fit/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=log_dir, histogram_freq=1)\n\nmodel.fit(x=x_train, \n          y=y_train, \n          epochs=5, \n          validation_data=(x_test, y_test), \n          callbacks=[tensorboard_callback])\n\n\ntrain_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))\ntest_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test))\n\ntrain_dataset = train_dataset.shuffle(60000).batch(64)\ntest_dataset = test_dataset.batch(64)\n\n# The training code follows the advanced quickstart tutorial, but shows how to log metrics to TensorBoard. Choose loss and optimizer:\n\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy()\noptimizer = tf.keras.optimizers.Adam()\n\n# Create stateful metrics that can be used to accumulate values during training and logged at any point:\n\n# Define our metrics\ntrain_loss = tf.keras.metrics.Mean('train_loss', dtype=tf.float32)\ntrain_accuracy = tf.keras.metrics.SparseCategoricalAccuracy('train_accuracy')\ntest_loss = tf.keras.metrics.Mean('test_loss', dtype=tf.float32)\ntest_accuracy = tf.keras.metrics.SparseCategoricalAccuracy('test_accuracy')\n\n\ndef train_step(model, optimizer, x_train, y_train):\n  with tf.GradientTape() as tape:\n    predictions = model(x_train, training=True)\n    loss = loss_object(y_train, predictions)\n  grads = tape.gradient(loss, model.trainable_variables)\n  optimizer.apply_gradients(zip(grads, model.trainable_variables))\n\n  train_loss(loss)\n  train_accuracy(y_train, predictions)\n\ndef test_step(model, x_test, y_test):\n  predictions = model(x_test)\n  loss = loss_object(y_test, predictions)\n\n  test_loss(loss)\n  test_accuracy(y_test, predictions)\n\n# Set up summary writers to write the summaries to disk in a different logs directory:\n\ncurrent_time = datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntrain_log_dir = 'logs/gradient_tape/' + current_time + '/train'\ntest_log_dir = 'logs/gradient_tape/' + current_time + '/test'\ntrain_summary_writer = tf.summary.create_file_writer(train_log_dir)\ntest_summary_writer = tf.summary.create_file_writer(test_log_dir)\n\n# Start training. Use tf.summary.scalar() to log metrics (loss and accuracy) during training/testing within the scope of the summary writers to write the summaries to disk. You have control over which metrics to log and how often to do it. Other tf.summary functions enable logging other types of data.\n\nmodel = create_model() # reset our model\n\nEPOCHS = 5\n\nfor epoch in range(EPOCHS):\n  for (x_train, y_train) in train_dataset:\n    train_step(model, optimizer, x_train, y_train)\n  with train_summary_writer.as_default():\n    tf.summary.scalar('loss', train_loss.result(), step=epoch)\n    tf.summary.scalar('accuracy', train_accuracy.result(), step=epoch)\n\n  for (x_test, y_test) in test_dataset:\n    test_step(model, x_test, y_test)\n  with test_summary_writer.as_default():\n    tf.summary.scalar('loss', test_loss.result(), step=epoch)\n    tf.summary.scalar('accuracy', test_accuracy.result(), step=epoch)\n\n  template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n  print (template.format(epoch+1,\n                         train_loss.result(), \n                         train_accuracy.result()*100,\n                         test_loss.result(), \n                         test_accuracy.result()*100))\n\n  # Reset metrics every epoch\n  train_loss.reset_states()\n  test_loss.reset_states()\n  train_accuracy.reset_states()\n  test_accuracy.reset_states()\n</code></pre>\n\n<p>All code is from this link.</p>\n\n<p><a href=\"https://www.tensorflow.org/tensorboard/get_started\" rel=\"nofollow noreferrer\">https://www.tensorflow.org/tensorboard/get_started</a></p>\n\n<p>I want to be able to go to '<a href=\"http://localhost:6006/\" rel=\"nofollow noreferrer\">http://localhost:6006/</a>' and view the TensorBoard.  How can I do that?  Thanks!!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 106}]