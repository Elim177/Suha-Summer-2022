[{"items": [{"tags": ["python", "python-3.x", "tensorflow", "tensorflow2.0"], "owner": {"account_id": 11800713, "reputation": 63, "user_id": 8634478, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ce7f705c25781b6ea7b3535e9d48a545?s=256&d=identicon&r=PG&f=1", "display_name": "marlon", "link": "https://stackoverflow.com/users/8634478/marlon"}, "is_answered": false, "view_count": 212, "answer_count": 1, "score": 0, "last_activity_date": 1610714879, "creation_date": 1610710218, "last_edit_date": 1610714879, "question_id": 65735328, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65735328/how-to-best-use-tf-function-decorator-for-class-methods", "title": "How to best use @tf.function decorator for class methods?", "body": "<p>To examplify my problem with a minimal example, suppose I would like to create a class in the spirit of</p>\n<pre class=\"lang-py prettyprint-override\"><code>class test_a:\n    def __init__(self, X):\n        self.X = X\n    def predict(self, a):\n        return a * self.X\n</code></pre>\n<p>Importantly, the <code>predict()</code> function should change if I assign a new <code>X</code> to an instance of <code>test_a</code>.\nIn this example it works fine:</p>\n<pre class=\"lang-py prettyprint-override\"><code>X = tf.ones((1, 1))\na = test_a(X)\ny = tf.ones((1, 1))\na.predict(y) # output [[1.]]\n\n# now I want to change the value of a.X\nXnew = 2 * tf.ones((1, 1))\na.X = Xnew\na.predict(y) # output [[2.]], as desired.\n</code></pre>\n<p>Now suppose I want to use the <code>@tf.function</code> decorator to speed up <code>predict()</code>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>class test_b:\n    def __init__(self, X):\n        self.X = X\n        \n    @tf.function\n    def predict(self, a):\n        return a * self.X\n</code></pre>\n<p>Now the following undesired behavior occurs:</p>\n<pre class=\"lang-py prettyprint-override\"><code>X = tf.ones((1, 1))\nb = test_b(X)\ny = tf.ones((1, 1))\nb.predict(y) # output [[1.]]\n\n# now I want to change the value of b.X\nXnew = 2 * tf.ones((1, 1))\nb.X = Xnew\nb.predict(y) # output is still [[1.]], but I would like it to be [[2.]]\n</code></pre>\n<p>The only idea I have so far is having a method <code>_predict(X, a)</code>, which I could then decorate and then call <code>_predict(self.X, a)</code> inside the (not decorated) method <code>predict(self, a)</code>.\nAny help how this could be done better would be greatly appreciated.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 25}]