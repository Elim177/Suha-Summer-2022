[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras"], "owner": {"user_type": "does_not_exist", "display_name": "user13959036"}, "is_answered": true, "view_count": 704, "accepted_answer_id": 63381557, "answer_count": 3, "score": 1, "last_activity_date": 1598557479, "creation_date": 1597251276, "last_edit_date": 1598557479, "question_id": 63381301, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/63381301/how-many-neurons-should-be-in-the-last-layer-of-the-neural-network", "title": "How many neurons should be in the last layer of the neural network?", "body": "<p>I use the following code to classify movie reviews into three classes (negative as -1, neutral as 0, and 1 as positive). But is it true that there is only one output neuron in the last layer for the three-class classification problem?<br></p>\n<pre><code>import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nimport numpy as K\n\ncsvfilename_train = 'train(cleaned).csv'\ncsvfilename_test = 'test(cleaned).csv'\n\n# Read .csv files as pandas dataframes\ndf_train = pd.read_csv(csvfilename_train)\ndf_test = pd.read_csv(csvfilename_test)\n\ntrain_sentences  = df_train['Comment'].values\ntest_sentences  = df_test['Comment'].values\n\n# Extract labels from dataframes\ntrain_labels = df_train['Sentiment'].values\ntest_labels = df_test['Sentiment'].values\n\nvocab_size = 10000\nembedding_dim = 16\nmax_length = 30\ntrunc_type = 'post'\noov_tok = '&lt;OOV&gt;'\n\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\ntokenizer = Tokenizer(num_words = vocab_size, oov_token = oov_tok)\ntokenizer.fit_on_texts(train_sentences)\nword_index = tokenizer.word_index\nsequences = tokenizer.texts_to_sequences(train_sentences)\npadded = pad_sequences(sequences, maxlen = max_length, truncating = trunc_type)\n\ntest_sequences = tokenizer.texts_to_sequences(test_sentences)\ntest_padded = pad_sequences(test_sequences, maxlen = max_length)\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length = max_length),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(6, activation = 'relu'),\n    tf.keras.layers.Dense(1, activation = 'sigmoid'),\n])\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n\nnum_epochs = 10\nmodel.fit(padded, train_labels, epochs = num_epochs, validation_data = (test_padded, test_labels))\n</code></pre>\n<p>When I changes <code>tf.keras.layers.Dense(1, activation = 'sigmoid')</code> to <code>tf.keras.layers.Dense(2, activation = 'sigmoid')</code> it gives me the following <strong>error</strong>:</p>\n<pre><code>---&gt; 10 model.fit(padded, train_labels, epochs = num_epochs, validation_data = (test_padded,test_labels))\n     ValueError: logits and labels must have the same shape ((None, 2) vs (None, 1))\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 196}]