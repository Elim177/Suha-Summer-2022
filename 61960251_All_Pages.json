[{"items": [{"tags": ["python", "tensorflow", "keras", "tf.keras"], "owner": {"account_id": 7315121, "reputation": 73, "user_id": 5778441, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-fRcFXWsY0PU/AAAAAAAAAAI/AAAAAAAAAKE/x1qzO9eK3XQ/photo.jpg?sz=256", "display_name": "xavysp", "link": "https://stackoverflow.com/users/5778441/xavysp"}, "is_answered": false, "view_count": 585, "answer_count": 0, "score": 1, "last_activity_date": 1590169621, "creation_date": 1590167041, "last_edit_date": 1590169621, "question_id": 61960251, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/61960251/how-to-set-custom-test-step-in-keras", "title": "How to set custom test step in Keras?", "body": "<p>I have trained my model with the input (image) size [None, 400,400,3], but I want to test with a different  input size like [None,512,512,3]. Here my custom training implementation:</p>\n\n<pre><code>    my_model = customModel(rgb_mean=self.args.rgbn_mean)        \n    ckpt_manager = tf.train.Checkpoint(optimizer=optimizer,model=my_model)        \n    for epoch in range(self.args.max_epochs):\n\n        # training\n        for step, (x,y) in enumerate(train_data):\n\n            with tf.GradientTape() as tape:\n                pred = my_model(x, training=True)\n\n                preds, last_logits, loss = pre_process_binary_cross_entropy(\n                    loss_bc,pred, y,self.args, use_tf_loss=False)\n            if (step)%100==0 and loss &lt; global_loss:\n                # tfk.Model.save_weights(my_model,os.path.join(checkpoint_dir,\"saved_model.h5\"),\n                #                        save_format=ckpt_save_mode)\n                # # tfk.models.save_model(my_model,os.path.join(checkpoint_dir,\"1saved_model.h5\"),\n                # #                        save_format=ckpt_save_mode)\n                # tfk.models.save_model(my_model,checkpoint_dir)\n                ckpt_manager.save(checkpoint_dir)\n</code></pre>\n\n<p>Now here my custom test implementation:</p>\n\n<pre><code>         root = tf.train.Checkpoint(optimizer=optimizer,\n                                   model=my_model)\n        ckpt_manager = tf.train.CheckpointManager(root,checkpoit_dir,max_to_keep=10)\n        root.restore(ckpt_manager.latest_checkpoint)\n        for step, x in enumerate(test_data):\n            preds = my_model(x,training=False)\n</code></pre>\n\n<p>While I test the model resizing with 400x400 it works perfectly, but when I test with other size like 512x512, or 720x1280 it gives me this log:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"C:/Users/xavie/Documents/Codes/GitHub/efge/main.py\", line 76, in &lt;module&gt;\n    main(args=arg)\n  File \"C:/Users/xavie/Documents/Codes/GitHub/efge/main.py\", line 70, in main\n    model.test()\n  File \"C:\\Users\\xavie\\Documents\\Codes\\GitHub\\efge\\run_model.py\", line 198, in test\n    preds = my_model(x,training=False)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py\", line 968, in __call__\n    outputs = self.call(cast_inputs, *args, **kwargs)\n  File \"C:\\Users\\xavie\\Documents\\Codes\\GitHub\\efge\\model.py\", line 90, in call\n    output = self.batchnorm1(output, training=training)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py\", line 964, in __call__\n    self._maybe_build(inputs)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py\", line 2416, in _maybe_build\n    self.build(input_shapes)  # pylint:disable=not-callable\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\layers\\normalization.py\", line 401, in build\n    experimental_autocast=False)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\base_layer.py\", line 577, in add_weight\n    caching_device=caching_device)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\tracking\\base.py\", line 724, in _add_variable_with_custom_getter\n    name=name, shape=shape)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\tracking\\base.py\", line 791, in _preload_simple_restoration\n    checkpoint_position=checkpoint_position, shape=shape)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\training\\tracking\\base.py\", line 75, in __init__\n    self.wrapped_value.set_shape(shape)\n  File \"C:\\Users\\xavie\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py\", line 1107, in set_shape\n    (self.shape, shape))\nValueError: Tensor's shape (200,) is not compatible with supplied shape (256,)\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer.iter\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer.beta_1\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer.beta_2\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer.decay\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer.learning_rate\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm1.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm1.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm1.moving_mean\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm1.moving_variance\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.conv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm2.axis\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm2.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm2.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm2.moving_mean\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm2.moving_variance\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.conv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm3.axis\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm3.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm3.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm3.moving_mean\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm3.moving_variance\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.dconv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm4.axis\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm4.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm4.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm4.moving_mean\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm4.moving_variance\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.dconv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm5.axis\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm5.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm5.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm5.moving_mean\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.batchnorm5.moving_variance\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.dconv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv1.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv1.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv2.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv2.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv3.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).model.predConv3.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm1.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm1.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.conv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm2.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm2.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.conv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm3.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm3.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.dconv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm4.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm4.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.dconv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm5.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.batchnorm5.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.dconv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv1.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv1.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv2.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv2.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv3.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'm' for (root).model.predConv3.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm1.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm1.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.conv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm2.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm2.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.conv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm3.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm3.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.dconv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm4.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm4.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.dconv2.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm5.gamma\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.batchnorm5.beta\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.dconv3.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv1.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv1.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv2.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv2.conv1.bias\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv3.conv1.kernel\nWARNING:tensorflow:Unresolved object in checkpoint: (root).optimizer's state 'v' for (root).model.predConv3.conv1.bias\nWARNING:tensorflow:A checkpoint was restored (e.g. tf.train.Checkpoint.restore or tf.keras.Model.load_weights) but not all checkpointed values were used. See above for specific issues. Use expect_partial() on the load status object, e.g. tf.train.Checkpoint.restore(...).expect_partial(), to silence these warnings, or use assert_consumed() to make the check explicit. See https://www.tensorflow.org/guide/checkpoint#loading_mechanics for details.\n\n</code></pre>\n\n<p>Here the model:</p>\n\n<pre><code>class customModel(tfk.Model):\n\n    def __init__(self, data_format='channels_first', weight_decay=1e4, rgb_mean=None):\n\n        super(customModel, self).__init__()\n        self.weight_decay = weight_decay\n        self.rgbn_mean = rgb_mean\n\n        axis = -1 if data_format == \"channels_last\" else 1\n        #  data_format=data_format,\n        self.conv1 = tfk.layers.Conv2D(filters=16, kernel_size=(7, 7),\n                                       padding=\"same\", use_bias=False,\n                                       kernel_initializer=weight_init,\n                                       kernel_regularizer=l2(weight_decay),\n                                       strides=(2, 2))  # [8,200,200,16] when the input is 400\n        self.batchnorm1 = tfk.layers.BatchNormalization(axis=axis)\n\n    def call(self, x, training=False):\n        x = x-self.rgbn_mean[:-1]\n        output = self.conv1(x, training=training)\n        output = self.batchnorm1(output, training=training)\n        output = tf.nn.relu(output)\n        return output\n\n</code></pre>\n\n<p>What I am doing wrong? how can I fix it? please help me I am new in Keras :(\nP.S: I have tried with different Keras save models but I cannot test with different image sizes.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 152}]