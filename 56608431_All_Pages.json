[{"items": [{"tags": ["tensorflow", "keras"], "owner": {"account_id": 15062809, "reputation": 2258, "user_id": 10870968, "user_type": "registered", "profile_image": "https://graph.facebook.com/859956344339296/picture?type=large", "display_name": "Alex Deft", "link": "https://stackoverflow.com/users/10870968/alex-deft"}, "is_answered": true, "view_count": 149, "answer_count": 1, "score": 1, "last_activity_date": 1560590003, "creation_date": 1560584654, "question_id": 56608431, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/56608431/what-is-the-difference-between-a-model-and-a-bunch-of-stacked-layers-in-tf-2-0", "title": "What is the difference between a model and a bunch of stacked layers in TF 2.0?", "body": "<p>So, I can create my model by subclassing Keras layers and models, like this:</p>\n\n<pre><code>class CNN(tf.keras.models.Model):\n    def __init__(self, **kwargs):\n        super(CNN, self).__init__(**kwargs)\n        self.l1 = tf.keras.layers.Conv2D(64, (4, 4), padding='same')\n        self.l2 = tf.keras.layers.Dense(10, activation='softmax')\n\n    def call(self, ip):\n        x = self.l1(ip)\n        op = self.l2(x)\n        return op\n</code></pre>\n\n<p>How does this differ from </p>\n\n<pre><code>mymodel = Model(input = inputs, output= outputs)\n</code></pre>\n\n<p>I mean, I know some differences, like the model above has the attribute mymodel.input but when I ask for this attribute for a model defined by subclassing it throws this error:</p>\n\n<blockquote>\n  <p>AttributeError: Layer cnn is not connected, no input to return.</p>\n</blockquote>\n\n<p>that's just one difference, so, what makes them different and how to flesh out the first model to make have all the attributes of a model defined in the classical way? More precisely, as in the title: what is the difference between a bunch of stacked layers and a model ?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 110}]