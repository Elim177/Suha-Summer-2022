[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras"], "owner": {"account_id": 1224281, "reputation": 4378, "user_id": 1190200, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/3ddb16de44c68374a3b7bc386d91ca76?s=256&d=identicon&r=PG", "display_name": "songololo", "link": "https://stackoverflow.com/users/1190200/songololo"}, "is_answered": true, "view_count": 663, "accepted_answer_id": 62544325, "answer_count": 1, "score": 1, "last_activity_date": 1592949514, "creation_date": 1592948210, "question_id": 62544142, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62544142/tensorflow-keras-api-model-fit-method-returns-failed-to-convert-object-of-t", "title": "Tensorflow (Keras API) `model.fit` method returns &quot;Failed to convert object of type &lt;class &#39;tuple&#39;&gt; to Tensor&quot; error", "body": "<p>I am using gaussian noise per the <code>tf.random.normal</code> method (or <code>K.random_normal</code> via the <code>keras</code> API).</p>\n<p>It is used from within a custom <code>tensorflow</code> <code>Layer</code>, which, in turn, is used by a custom <code>Model</code>.</p>\n<p>For some reason, everything works as intended when calling the layer / model directly, or when using a custom training loop via <code>tf.GradientTape()</code>, but it throws a puzzling error when attempting to use the <code>fit</code> method instead.</p>\n<p>It appears to have something to do with inferring the batch dimension, which presents as <code>None</code> when calling the <code>fit</code> method.</p>\n<p>I suspect this has something to do with compilation and symbolic tensors vs. eager tensors, but I'm none-the-wiser as to how this would actually be resolved?</p>\n<p>I've tried to strip the problem down to a minimal example that reproduces the issue:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import models\nimport tensorflow as tf\n\nclass Demo(models.Model):\n\n    def __init__(self):\n        super().__init__()\n\n    def call(self, inputs, training=None, mask=None):\n        # batch gives &quot;2&quot; when called directly or via GradientTape()\n        # gives &quot;None&quot; when called via fit\n        batch = K.int_shape(inputs)[0]\n        dim = K.int_shape(inputs)[1]\n        noise = tf.random.normal(shape=(batch, dim), mean=0.0, stddev=1.0)\n        # manually specifying the batch dimension does work, e.g.\n        # noise = tf.random.normal(shape=(2, dim), mean=0.0, stddev=1.0)\n        return inputs * noise\n\ntest_data = np.array([[1., 2., 3., 4.], [5., 6., 7., 8.]])\n\ntester = Demo()\ntester.compile(optimizer='adam')\n\n# manual calling works\nprint(test_data - tester(test_data))\n\n# but calling fit does not\ntester.fit(x=test_data)\n# raises: TypeError: Failed to convert object of type &lt;class 'tuple'&gt; to Tensor.\n# Contents: (None, 4). Consider casting elements to a supported type.\n</code></pre>\n<p>Any suggestions for what the problem might be?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 21}]