[{"items": [{"tags": ["python", "matplotlib"], "owner": {"account_id": 1484715, "reputation": 1099, "user_id": 1393214, "user_type": "registered", "accept_rate": 85, "profile_image": "https://www.gravatar.com/avatar/63c9e6d4bcd174aba5445c7fc62acfb1?s=256&d=identicon&r=PG&f=1", "display_name": "User", "link": "https://stackoverflow.com/users/1393214/user"}, "is_answered": false, "view_count": 1783, "answer_count": 0, "score": 1, "last_activity_date": 1630946958, "creation_date": 1630944424, "last_edit_date": 1630946958, "question_id": 69077528, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/69077528/attributeerror-axessubplot-object-has-no-attribute-rownum", "title": "AttributeError: &#39;AxesSubplot&#39; object has no attribute &#39;rowNum&#39;", "body": "<p>A piece of code of mine, which had been already running without any problem, now raises</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;~/PycharmProjects/RL/DNN_NSL_CalifHou.py&quot;, line 131, in &lt;module&gt;\n    df1.plot(ax=axes[0,0])\n  File &quot;~\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pandas\\plotting\\_core.py&quot;, line 794, in __call__\n    return plot_backend.plot(data, kind=kind, **kwargs)\n  File &quot;~\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\__init__.py&quot;, line 62, in plot\n    plot_obj.generate()\n  File &quot;~\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py&quot;, line 284, in generate\n    self._adorn_subplots()\n  File &quot;~\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\core.py&quot;, line 472, in _adorn_subplots\n    sharey=self.sharey,\n  File &quot;~\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\pandas\\plotting\\_matplotlib\\tools.py&quot;, line 307, in _handle_shared_axes\n    layout[ax.rowNum, ax.colNum] = ax.get_visible()\nAttributeError: 'AxesSubplot' object has no attribute 'rowNum' \n</code></pre>\n<p>which corresponds to</p>\n<pre><code>fig, axes = plt.subplots(nrows=2, ncols=2)\ndf1 = pd.DataFrame(history.history)\ndf1.plot(ax=axes[0,0])\naxes[0,0].set_title('model')\n</code></pre>\n<p>Is anything broken in matplotlib?</p>\n<p>Here's a runnable snippet:</p>\n<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport time\n\nimport tensorflow as tf\n\nfrom sklearn.datasets import fetch_california_housing\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\n\nroot_logdir = os.path.join(os.curdir, &quot;my_California_housing_logs&quot;)\n\ndef get_run_logdir():\n    run_id = time.strftime(&quot;run_%Y_%m_%d-%H_%M_%S&quot;)\n    return os.path.join(root_logdir, run_id)\n\nrun_logdir = get_run_logdir()\n\n#############################################################\n\nhousing = fetch_california_housing()\n\nX_train_full, X_test, y_train_full, y_test = train_test_split(\n    housing.data, housing.target)\n\nX_train, X_valid, y_train, y_valid = train_test_split(\n    X_train_full, y_train_full)\n\nscaler = StandardScaler()\n\nX_train = scaler.fit_transform(X_train)\nX_valid = scaler.fit_transform(X_valid)\nX_test = scaler.fit_transform(X_test)\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=X_train.shape[1:]),\n    tf.keras.layers.BatchNormalization(momentum=0.999),\n    tf.keras.layers.Dense(48, tf.keras.activations.selu, kernel_initializer=&quot;lecun_normal&quot;),\n    tf.keras.layers.BatchNormalization(momentum=0.999),\n    tf.keras.layers.Dense(48, tf.keras.activations.selu, kernel_initializer=&quot;lecun_normal&quot;),\n    tf.keras.layers.BatchNormalization(momentum=0.999),\n    tf.keras.layers.Dense(1, kernel_initializer=&quot;lecun_normal&quot;)\n])\n\nmodel.compile(loss=tf.keras.losses.mean_squared_error,\n              optimizer=tf.keras.optimizers.Adam(learning_rate = 0.0003, beta_1=0.9, beta_2=0.999),\n              metrics=[tf.keras.metrics.MeanAbsoluteError()])\n\ndef exponential_decay(lr0, s):\n    def exponential_decay_fn(epoch):\n        return lr0 * 0.1 ** (epoch / s)\n    return exponential_decay_fn\n\nexponential_decay_fn = exponential_decay(lr0=0.01, s=20)\n\nlr_scheduler_cb = tf.keras.callbacks.LearningRateScheduler(exponential_decay_fn)\n\ncheckpoints_cb = tf.keras.callbacks.ModelCheckpoint(&quot;my_keras_model.h5&quot;,\n                                                    save_best_only=True)\nearly_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=10,\n                                                    restore_best_weights=True)\n\ntensorboard_cb = tf.keras.callbacks.TensorBoard(run_logdir)\n\nhistory = model.fit(X_train, y_train, epochs=1,\n                    validation_data=(X_valid, y_valid),\n                    callbacks=[checkpoints_cb, early_stopping_cb, tensorboard_cb, lr_scheduler_cb])\n\nfig, axes = plt.subplots(nrows=2, ncols=2)\ndf1 = pd.DataFrame(history.history)\ndf1.plot(ax=axes[0,0])\naxes[0,0].set_title('model')\n\nplt.show()\n</code></pre>\n<p><strong>Edit:</strong></p>\n<p>Here is also what I get from the clipboard:</p>\n<pre><code>loss  mean_absolute_error  val_loss  val_mean_absolute_error    lr\n0  0.673669             0.596114  2.244989                 1.277523  0.01\n</code></pre>\n<p>adding <code>df1.head().to_clipboard(sep='\\\\s+', index=True)</code>.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 77}]