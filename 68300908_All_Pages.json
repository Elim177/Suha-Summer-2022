[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 7846906, "reputation": 2947, "user_id": 5931672, "user_type": "registered", "accept_rate": 86, "profile_image": "https://lh5.googleusercontent.com/-Ljkm-NVRzOc/AAAAAAAAAAI/AAAAAAAAAFE/EelBBzc8ji0/photo.jpg?sz=256", "display_name": "Agustin Barrachina", "link": "https://stackoverflow.com/users/5931672/agustin-barrachina"}, "is_answered": false, "view_count": 210, "answer_count": 0, "score": 0, "last_activity_date": 1625748146, "creation_date": 1625744265, "last_edit_date": 1625748146, "question_id": 68300908, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/68300908/generate-a-partially-known-tensor-tensorflow", "title": "Generate a partially known tensor Tensorflow", "body": "<p>So I am doing a custom layer on Tensorflow. In the call function, I received the desired output shape. Basically, my last lines of code are literally:</p>\n<pre><code>desired_output_shape_with_batch = tf.concat([[tf.shape(inputs_values)[0]], output_shape], axis=0)\nret = tf.reshape(ret, shape=desired_output_shape_with_batch)\nreturn ret\n</code></pre>\n<p>I use the first dimension of concat: <code>tf.shape(inputs_values)[0]</code> as the batch size and this worked correctly until now that I want to make also the desired output shape to be able to change.</p>\n<p>For example (None, None, 3) so I can accept different RGB images.</p>\n<p>However, the concat function says: <code>ValueError: Cannot convert a partially known TensorShape to a Tensor: (None, None, 3)</code></p>\n<p>This is not a problem I can use the <a href=\"https://www.tensorflow.org/api_docs/python/tf/TensorShape#is_fully_defined\" rel=\"nofollow noreferrer\"><code>is_fully_defined()</code></a> method and check at the beginning of my function if the shape is fully defined and if not just return a partially defined tensor of shape <code>(None, None, None, 3)</code>, but <strong>how do I create this Partially defined tensor?</strong></p>\n<p>Basically, my idea is to do:</p>\n<pre><code>def call(inputs, **kwargs):\n    inputs_values, output_shape = inputs\n    if tf.TensorShape(output_shape).is_fully_defined():\n        # do my stuff\n        return ret\n    else:\n        # output shape will be a list or set with some None values\n        return tf.Tensor(shape=(None,) + output_shape)\n\n</code></pre>\n<p>How can I do that? If there is a better practice way to do this I am also open to advise.</p>\n<p>This question is similar to <a href=\"https://stackoverflow.com/questions/66706663/dealing-with-none-dimension-of-symbolic-tensor-when-creating-a-layer\">Dealing with none dimension of symbolic tensor when creating a layer</a> and it is actually the same layer that I want, this time, to be able to have an unknown <code>desired_output_shape</code> on the construction of the model.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 204}]