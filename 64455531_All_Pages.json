[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras", "deep-learning"], "owner": {"account_id": 7424649, "reputation": 13625, "user_id": 9215780, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-lqxossnzkSU/AAAAAAAAAAI/AAAAAAAAAJg/pHrYwIfRc-k/photo.jpg?sz=256", "display_name": "M.Innat", "link": "https://stackoverflow.com/users/9215780/m-innat"}, "is_answered": true, "view_count": 1760, "accepted_answer_id": 64461769, "answer_count": 1, "score": 0, "last_activity_date": 1603298975, "creation_date": 1603244845, "last_edit_date": 1603298975, "question_id": 64455531, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64455531/multi-input-modeling-with-model-sub-classing-api-in-tf-keras", "title": "Multi-Input Modeling with Model Sub-Classing API in TF.Keras", "body": "<p>Using model sub-classing api in <code>TF.Keras</code>, how do we build a <strong>multi-input</strong> model? In my case the input data type is different, one is image data and the other is a tabular feature. Below is what we've tried:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import tensorflow as tf\nimport tensorflow.keras.layers as KL\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.applications import EfficientNetB0\n\nclass Net(tf.keras.Model):\n    def __init__(self, idim, gdim):\n        super(Net, self).__init__()\n        # image input\n        self.efnet  = EfficientNetB0(input_shape=(idim), include_top = False, weights = 'imagenet')\n        self.gap    = KL.GlobalAveragePooling2D()\n        self.bn     = KL.BatchNormalization()\n        self.denseA = KL.Dense(784, activation='relu', name = 'denseA')\n        \n        # meta information input\n        self.gender = KL.Input(shape=(gdim), name='gender', dtype='float32')\n        self.gmeta  = KL.Dense(100, kernel_regularizer=tf.keras.regularizers.l2(l=0.01), activation='relu')\n        \n        self.cat    = KL.Concatenate()\n        self.out    = KL.Dense(1, activation='linear')\n    \n    def call(self, inputs, training=False):\n        print(inputs[0])\n        print(inputs[1])\n        \n        # image data \n        x     = self.efnet(inputs[0])\n        x_gap = self.gap(x)\n        bn    = self.bn(x_gap)\n        den_A = self.denseA(bn)\n        \n        # tabular feature \n        x2    = self.gender(inputs[1])\n        x3    = self.gmeta(x2)\n        \n        # cat\n        out   = self.cat()([den_A, x3])\n        y     = self.out(out)\n        return y\n\nidim = (224, 224, 3) # image dimension\ngdim = 2 # let's say, we've 2 feature column\nmodel = Net(idim, gdim)\nmodel.build(input_shape=[(None, *idim), (None, gdim)])\n</code></pre>\n<p>But it throws the following <code>ValueError</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>Tensor(&quot;Placeholder:0&quot;, shape=(None, 224, 224, 3), dtype=float32)\nTensor(&quot;Placeholder_1:0&quot;, shape=(None, 2), dtype=float32)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nc:\\users\\innat\\anaconda3\\envs\\melanoma\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py in build(self, input_shape)\n    431         try:\n--&gt; 432           self.call(x, **kwargs)\n    433         except (errors.InvalidArgumentError, TypeError):\n\n&lt;ipython-input-1-a7757d21ee96&gt; in call(self, inputs, training)\n     30 \n---&gt; 31         x2    = self.gender(inputs[1])\n     32         x3    = self.gmeta(x2)\n\nTypeError: 'Tensor' object is not callable\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-1-a7757d21ee96&gt; in &lt;module&gt;\n     46 gdim = 2\n     47 model = Net(idim, gdim)\n---&gt; 48 model.build(input_shape=[(None, *idim), (None, gdim)])\n\nc:\\users\\innat\\anaconda3\\envs\\melanoma\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py in build(self, input_shape)\n    432           self.call(x, **kwargs)\n    433         except (errors.InvalidArgumentError, TypeError):\n--&gt; 434           raise ValueError('You cannot build your model by calling `build` '\n    435                            'if your layers do not support float type inputs. '\n    436                            'Instead, in order to instantiate and build your '\n\nValueError: You cannot build your model by calling `build` if your layers do not support float type inputs. Instead, in order to instantiate and build your model, `call` your model on real tensor data (of the correct dtype).\n</code></pre>\n<h2>Update</h2>\n<p>Thanks to Andrey to find the silly bug. Here is the model plot from the accepted solution:</p>\n<p><a href=\"https://i.stack.imgur.com/YumrX.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/YumrX.png\" alt=\"enter image description here\" /></a></p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 161}]