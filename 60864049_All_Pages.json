[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "tensorflow2.0", "quantization"], "owner": {"account_id": 9842031, "reputation": 33, "user_id": 13127499, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/b7644e46b5e9266051406cbdecd33dcd?s=256&d=identicon&r=PG&f=1", "display_name": "mathematica_abstracto", "link": "https://stackoverflow.com/users/13127499/mathematica-abstracto"}, "is_answered": false, "view_count": 403, "answer_count": 1, "score": 3, "last_activity_date": 1632285530, "creation_date": 1585214181, "last_edit_date": 1632285530, "question_id": 60864049, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60864049/how-to-backprop-for-custom-quantization-in-tensorflow-2-0", "title": "How to backprop for custom quantization in tensorflow 2.0?", "body": "<p>I would like to backprop with identity (straight through estimator) when I quantize a tensor in tf2.0 eager mode. I am able to perform the forward pass, but encounter <code>ValueError: No gradients provided for any variable..</code> error when trying to apply gradients for my model for backprop.</p>\n\n<p>I tried to use custom gradients. As a minimal example, consider the following code:</p>\n\n<pre><code>import tensorflow as tf\n@tf.custom_gradient\ndef quantize(x):\n    x = tf.cast(x, dtype=tf.uint8)\n    def grad(dy):\n        return dy\n    return x, grad\n\n@tf.custom_gradient\ndef dequantize(x):\n  x = tf.cast(x, dtype=tf.float32)\n  def grad(dy):\n       return dy\n  return x, grad\n\nx = tf.ones([10,10])\nwith tf.GradientTape() as g:\n  g.watch(x)\n  y = dequantize(quantize(x))*2\ndy_dx = g.gradient(y, x) \n\nprint(dy_dx) # outputs None\n</code></pre>\n\n<p>The gradient is None, which means I won't be able to backprop when I use this kind of functions in a model.  How should I fix this? Are there better ways to achieve quantization given that I need something other than tf.quantize()?</p>\n\n<p>Also, the way I used the <code>GradientTape g</code> is according to the official tutorials, but I don't understand why they would use <code>g</code> outside the <code>with</code> scope (last \nline in the code). Any clarification is appreciated.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 36}]