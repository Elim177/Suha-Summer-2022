[{"items": [{"tags": ["tensorflow", "pycharm", "tensorflow-datasets", "tensorflow2.0"], "owner": {"account_id": 2376160, "reputation": 1485, "user_id": 2079445, "user_type": "registered", "accept_rate": 45, "profile_image": "https://www.gravatar.com/avatar/b3054d111aa00407c8d8000957ad9958?s=256&d=identicon&r=PG", "display_name": "ling", "link": "https://stackoverflow.com/users/2079445/ling"}, "is_answered": false, "view_count": 33, "answer_count": 0, "score": 0, "last_activity_date": 1585415041, "creation_date": 1576054755, "last_edit_date": 1576086443, "question_id": 59282027, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59282027/why-does-it-complain-images-variable-not-available", "title": "Why does it complain &#39;images&#39; variable not available?", "body": "<p>I am running the TF2 tutorial, and copied exactly the code into a .py file and run it in PyCharm, but got this error message:</p>\n\n<pre><code>Testing started at 12:50 AM ...\n/home/martin/nlp/my-env/tf/bin/python /home/martin/.local/share/JetBrains/Toolbox/apps/PyCharm-C/ch-0/193.5233.109/plugins/python-ce/helpers/pycharm/_jb_pytest_runner.py --path /home/martin/tf2-tutorial/cnn_mnist.py\nLaunching pytest with arguments /home/martin/tf2-tutorial/cnn_mnist.py in /home/martin/tf2-tutorial\n\n============================= test session starts ==============================\nplatform linux -- Python 3.7.1, pytest-5.3.1, py-1.8.0, pluggy-0.13.1 -- /home/martin/nlp/my-env/tf/bin/python\ncachedir: .pytest_cache\nrootdir: /home/martin/tf2-tutorial\ncollecting ... collected 1 item\n\ncnn_mnist.py::test2_step ERROR                                           [100%]\ntest setup failed\nfile /home/martin/tf2-tutorial/cnn_mnist.py, line 60\n  @tf.function\n  def test_step(images, labels):\nE       fixture 'images' not found\n&gt;       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory\n&gt;       use 'pytest --fixtures [testpath]' for help on them.\n</code></pre>\n\n<p>Why does it think it's a pytest program? And why does it issue this error message? The tutorial should work \"as is\".</p>\n\n<p>The copied code from the tutorial is below (exact copy):</p>\n\n<pre><code>from __future__ import absolute_import, division, print_function, unicode_literals\n\nimport tensorflow as tf\n\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D\nfrom tensorflow.keras import Model\n\nmnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\n# Add a channels dimension\nx_train = x_train[..., tf.newaxis]\nx_test = x_test[..., tf.newaxis]\n\ntrain_ds = tf.data.Dataset.from_tensor_slices(\n    (x_train, y_train)).shuffle(10000).batch(32)\n\ntest_ds = tf.data.Dataset.from_tensor_slices((x_test, y_test)).batch(32)\n\nclass MyModel(Model):\n  def __init__(self):\n    super(MyModel, self).__init__()\n    self.conv1 = Conv2D(32, 3, activation='relu')\n    self.flatten = Flatten()\n    self.d1 = Dense(128, activation='relu')\n    self.d2 = Dense(10, activation='softmax')\n\n  def call(self, x):\n    x = self.conv1(x)\n    x = self.flatten(x)\n    x = self.d1(x)\n    return self.d2(x)\n\n# Create an instance of the model\nmodel = MyModel()\n\nloss_object = tf.keras.losses.SparseCategoricalCrossentropy()\noptimizer = tf.keras.optimizers.Adam()\n\ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\ntrain_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n\ntest_loss = tf.keras.metrics.Mean(name='test_loss')\ntest_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')\n\n@tf.function\ndef train_step(images, labels):\n  with tf.GradientTape() as tape:\n    predictions = model(images)\n    loss = loss_object(labels, predictions)\n  gradients = tape.gradient(loss, model.trainable_variables)\n  optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n  train_loss(loss)\n  train_accuracy(labels, predictions)\n\n@tf.function\ndef test_step(images, labels):\n  predictions = model(images)\n  t_loss = loss_object(labels, predictions)\n\n  test_loss(t_loss)\n  test_accuracy(labels, predictions)\n\nEPOCHS = 5\n\nfor epoch in range(EPOCHS):\n  for images, labels in train_ds:\n    train_step(images, labels)\n\n  for test_images, test_labels in test_ds:\n    test_step(test_images, test_labels)\n\n  template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n  print(template.format(epoch+1,\n                        train_loss.result(),\n                        train_accuracy.result()*100,\n                        test_loss.result(),\n                        test_accuracy.result()*100))\n\n  # Reset the metrics for the next epoch\n  train_loss.reset_states()\n  train_accuracy.reset_states()\n  test_loss.reset_states()\n  test_accuracy.reset_states()\n</code></pre>\n\n<p>Could this be due to the PyCharm environment issue? But it has been working all fine?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 96}]