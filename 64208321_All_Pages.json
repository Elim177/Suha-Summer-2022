[{"items": [{"tags": ["python", "tensorflow", "tensorflow2.0", "sympy", "automatic-differentiation"], "owner": {"account_id": 19628683, "reputation": 1, "user_id": 14367478, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-jrJ4SG-8VR8/AAAAAAAAAAI/AAAAAAAAAAA/AMZuuckVmprzURN6mN7ssc63ivNm0FLzjw/photo.jpg?sz=256", "display_name": "Yang Jeong Park", "link": "https://stackoverflow.com/users/14367478/yang-jeong-park"}, "is_answered": false, "view_count": 119, "answer_count": 0, "score": 0, "last_activity_date": 1601899602, "creation_date": 1601899602, "question_id": 64208321, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64208321/is-sympy-solve-compatible-with-tensorflow-gradienttape", "title": "Is sympy solve compatible with tensorflow GradientTape?", "body": "<p>I want to solve p for Vo using sympy solve, an algorithm that solves an equation without an initial value. Then, I want to find the derivative of p for Vo using TensorFlow's automatic differentiation. I wrote the code below, and the value was calculated well. However, it could not be converted to tensorflow dtype at the end. Is there a way to use TensorFlow tensors compatible with sympy?</p>\n<pre><code>from sympy import solve, Symbol, re\nimport tensorflow as tf`\n\nclass Concentrate_calculator:\n    def __init__(self, k, k1, m):\n        self.k=k\n        self.k1=k1\n        self.m=m\n    \n    def calp(self, Vo):\n        p=Symbol('p')\n        equation = k1*m/(p+k1)+k/p-2*Vo-p\n        solution = solve(equation, p)\n        p=float(re(solution[2]))\n        return p\n\n\nk=10.0**15\nk1=10.0**9.5\nm=10.0**19.2    \n\ncal = Concentrate_calculator(k,k1,m)\n\nVo = tf.Variable(1e18)\n#Vo=1e18\nwith tf.GradientTape() as t:\n    t.watch(Vo)\n    p=cal.calp(Vo)\n  \ndpdVo = t.gradient(p,Vo)\nprint(dpdVo)\n</code></pre>\n<p>TypeError: Cannot convert value 21897084140.095097 to a TensorFlow DType.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 174}]