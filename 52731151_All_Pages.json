[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 3948330, "reputation": 5043, "user_id": 3259896, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/641c30a7b383022f22b53c8cedb04e3f?s=256&d=identicon&r=PG&f=1", "display_name": "SantoshGupta7", "link": "https://stackoverflow.com/users/3259896/santoshgupta7"}, "is_answered": false, "view_count": 417, "answer_count": 0, "score": 5, "last_activity_date": 1539132639, "creation_date": 1539132639, "question_id": 52731151, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/52731151/tesnorflow-how-to-provide-your-own-sampled-values-for-tf-nn-sampled-softmax-l", "title": "Tesnorflow: How to provide your own `sampled_values` for tf.nn.sampled_softmax_loss?", "body": "<p>In tf.nn.sampled_softmax_loss, one of the optional inputs is to put your own samples values. I would like to provide my own samples values so that I can use float16 (half precision) variables. If <code>sampled_values</code> is left blank, Tensorflow will use <code>log_uniform_candidate_sampler</code> to get values, which can only return float32. </p>\n\n<p>Here are all the inputs. </p>\n\n<pre><code>tf.nn.sampled_softmax_loss(\n    weights,\n    biases,\n    labels,\n    inputs,\n    num_sampled,\n    num_classes,\n    num_true=1,\n    sampled_values=None,\n    remove_accidental_hits=True,\n    partition_strategy='mod',\n    name='sampled_softmax_loss',\n    seed=None\n)\n</code></pre>\n\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/nn/sampled_softmax_loss\" rel=\"noreferrer\">https://www.tensorflow.org/api_docs/python/tf/nn/sampled_softmax_loss</a></p>\n\n<p>This is the information they give for the sampled_values arg :</p>\n\n<blockquote>\n  <p>sampled_values: a tuple of (sampled_candidates, true_expected_count,\n  sampled_expected_count) returned by a *_candidate_sampler function.\n  (if None, we default to log_uniform_candidate_sampler)</p>\n</blockquote>\n\n<p>I'm trying to figure out how to provide this tuple. What exactly are the <code>sampled_candidates</code>, <code>true_expected_count</code>, <code>sampled_expected_count</code> ? </p>\n\n<p>I know that it's sampling the weights and corresponding biases, so do I put them together in it's own tuple for <code>sampled_candidates</code> ? Also, am I putting the int for the place of the weight in the matrix, or am I putting the whole embedding itself?</p>\n\n<p>I've also looked at Tensorflow's math supplimental on negative sampling but I couldn't find any information for my issue <a href=\"https://www.tensorflow.org/extras/candidate_sampling.pdf\" rel=\"noreferrer\">https://www.tensorflow.org/extras/candidate_sampling.pdf</a></p>\n\n<p>In my search, I found this very similar question on a google forum</p>\n\n<p><a href=\"https://groups.google.com/a/tensorflow.org/forum/#!topic/discuss/6IDJ-XAIb9M\" rel=\"noreferrer\">https://groups.google.com/a/tensorflow.org/forum/#!topic/discuss/6IDJ-XAIb9M</a></p>\n\n<p>The Answer given is </p>\n\n<blockquote>\n  <p><code>sampled_values</code> is the tuple returned by our *candidate_sampler\n  classes. These classes implement methods that sample contrastive\n  labels (not observed, but used during training) according to some\n  distribution Q for use in approximate training methods like\n  noise-contrastive estimation (NCE) and Sampled Softmax. An example is\n  the log_uniform_candidate_sampler, which samples labels according to\n  the log-uniform distribution. </p>\n  \n  <p>You almost never need to provide these yourself. You would simply pass\n  in the result of a call to a *candidate_sampler function in the tf.nn\n  module (where * can be \"uniform\", \"log_uniform\", \"zipfian_binned\",\n  etc), e.g.</p>\n  \n  <p>sampled_values = tf.nn.zipfian_binned_candidate_sampler(...)</p>\n  \n  <p>If you just want to get it to work, just leave it to None, and it\n  would default to the log_uniform_candidate_sampler (often a good\n  choice).</p>\n  \n  <p>If you are interested in the math behind this, see this document:\n  <a href=\"https://www.tensorflow.org/versions/r0.8/extras/candidate_sampling.pdf\" rel=\"noreferrer\">https://www.tensorflow.org/versions/r0.8/extras/candidate_sampling.pdf</a>.</p>\n  \n  <p>But to answer your question: For each batch of observed labels L, and\n  a candidate sampling distribution Q, the tuple consists of:</p>\n  \n  <ul>\n  <li>the tensor with the actual sampled contrastive labels N, </li>\n  <li>the tensor with the log-expected-values of the observed labels L under Q, i.e. log Q(L), and </li>\n  <li>the tensor with the log-expected values of the contrastive labels under Q, i.e. log Q(N).</li>\n  </ul>\n  \n  <p>The latter are required for the math to go through (see above\n  document). So sampled_values contains(with a hopefully clear abuse of\n  notation): </p>\n  \n  <p>sampled_values = (N, log Q(L), log Q(N)).</p>\n</blockquote>\n\n<p>However, I still don't know how to input a value. I'm not sure what the datatypes should be, and if N is the int place in the embedding matrix, or the embedding itself. Also, I'm guessing N should be a list of values itself, the size of the number of negative labels we have to sample. </p>\n\n<p>I was wondering if I could get a example with some values. For example, for a negative sampling of 3, do I do something like this? </p>\n\n<p>sampled_values = ([4,29, 12], [1, 1, 1], [0, 0, 0])</p>\n\n<p>Also, the documentation says that the tuple should be \" returned by a *_candidate_sampler function\"</p>\n\n<p>Does that mean I need to provide a function that returns the tuple, instead of the tuple itself?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 106}]