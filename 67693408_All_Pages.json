[{"items": [{"tags": ["python", "tensorflow", "tensorflow-probability", "sequence-to-sequence"], "owner": {"account_id": 13863149, "reputation": 156, "user_id": 10008270, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/6263ccdfcf2d10b142abaefcb82b9c6c?s=256&d=identicon&r=PG&f=1", "display_name": "RR_28023", "link": "https://stackoverflow.com/users/10008270/rr-28023"}, "is_answered": true, "view_count": 116, "answer_count": 1, "score": 0, "last_activity_date": 1622040006, "creation_date": 1621966050, "question_id": 67693408, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67693408/workaround-fallback-value-for-tfp-distributions-categorical-log-prob-in-tensor", "title": "Workaround / fallback value for tfp.distributions.Categorical.log_prob in tensorflow graph mode", "body": "<p>Is there a way to avoid <code>tfp.distributions.Categorical.log_prob</code>raising an error if the input is a label out of range?</p>\n<p>I am passing a batch of samples to the <code>log_prob</code> method, some of them have the value <code>n_categories + 1</code>, which is what you get as fallback value when you sample from a probability distribution off all zeros. Some of the probability distributions in my <code>probs</code> batch are all zeros**.</p>\n<pre><code>dec_output, h_state, c_state = self.decoder(dec_inp, [h_state, c_state])\nprobs = self.attention(enc_output, dec_output, pointer_mask, len_mask)\ndistr = tfp.distributions.Categorical(probs=probs)\npointer = distr.sample()\nlog_prob = distr.log_prob(pointer) # log of the probability of choosing that action\n</code></pre>\n<p>I don't care what value I get from <code>log_prob</code>in those cases because later I will mask it and not use it. Not sure if a <code>fallback</code> value can be implemented somehow. If not, is there any workaround to avoid an error to be raised while I execute it in graph mode (with <code>@tf.function</code>)?</p>\n<p>**This is because I am doing stochastic decoding with an RNN of batches of sequences of variable length, a seq to seq task.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 216}]