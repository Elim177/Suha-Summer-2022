[{"items": [{"tags": ["tensorflow", "keras", "deep-learning"], "owner": {"account_id": 15062809, "reputation": 2258, "user_id": 10870968, "user_type": "registered", "profile_image": "https://graph.facebook.com/859956344339296/picture?type=large", "display_name": "Alex Deft", "link": "https://stackoverflow.com/users/10870968/alex-deft"}, "is_answered": true, "view_count": 2373, "accepted_answer_id": 55865378, "answer_count": 2, "score": 4, "last_activity_date": 1556274994, "creation_date": 1556265050, "last_edit_date": 1556266177, "question_id": 55863106, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/55863106/how-to-build-this-custom-layer-in-keras", "title": "How to build this custom layer in Keras?", "body": "<p>I'm building a NN that supports complex numbers. Currently working on complex activation. According to a Benjio paper, this is a good one:</p>\n\n<p><a href=\"https://i.stack.imgur.com/kKi6M.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/kKi6M.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Where b is a trainable parameter to be learnt</strong>. So I'm building a special layer to do this activation. I'm new to Keras and stuck already. I created this code below, but it gives an error with the build function. I have no idea what's happening, I just tried to copy the template. Please help.</p>\n\n<pre><code>class modrelu(Layer):\n    def __init__(self, **kwargs):\n        super(modrelu, self).__init__(**kwargs)\n\n    def build(self):\n        self.b= K.variable(value=np.random.rand()-0.5, dtype='float64')\n        super(modrelu, self).build()  # Be sure to call this at the end\n\n    def call(self, x):\n        assert isinstance(x, list)\n        ip_r, ip_i = x\n        comp= tf.complex(ip_r, ip_i ) \n        ABS= tf.math.abs(comp)\n        ANG= tf.math.angle(comp)\n\n        ABS= K.relu( self.b + ABS) \n\n        op_r=  ABS * K.sin(angle) #K.dot ??\n        op_i= ABS * K.cos(angle)\n        return [op_r, op_i]\n\n    def compute_output_shape(self, input_shape):\n        assert isinstance(input_shape, list)\n        shape_a, shape_b = input_shape\n        return [shape_a, shape_b]\n</code></pre>\n\n<p>Comments on my code:\nIn the <strong>init</strong> I didn't add anything, cause it is an activation layer that takes no input when instantiated.</p>\n\n<p>In the build method, I tried to add the b's. Not sure if I should use the self.add_weight method. Ideally, I want to have as many b's as the dimension of input.</p>\n\n<p>In the call method, this one, I'm pretty sure what I'm doing. It is easy, I just implemented the function.</p>\n\n<p>The last one, compute_output_shape, I just copied-pasted the template. The output should be the same as the input, cause it is just an activation layer.</p>\n\n<p>Finally, the error for what its worth, I know it is nonsense</p>\n\n<pre><code>TypeError                                 Traceback (most recent call last)\n&lt;ipython-input-5-3101a9226da5&gt; in &lt;module&gt;\n      1 a=K.variable(np.array([1,2]))\n      2 b=K.variable(np.array([3,4]))\n----&gt; 3 act([a,b])\n\n~\\AppData\\Local\\conda\\conda\\envs\\python36\\lib\\site-packages\\keras\\engine\\base_layer.py in __call__(self, inputs, **kwargs)\n    429                                          'You can build it manually via: '\n    430                                          '`layer.build(batch_input_shape)`')\n--&gt; 431                 self.build(unpack_singleton(input_shapes))\n    432                 self.built = True\n    433 \n\nTypeError: build() takes 1 positional argument but 2 were given\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 111}]