[{"items": [{"tags": ["python", "machine-learning", "keras", "lstm"], "owner": {"user_type": "does_not_exist", "display_name": "user12633030"}, "is_answered": true, "view_count": 1263, "accepted_answer_id": 59553437, "answer_count": 2, "score": 1, "last_activity_date": 1577898425, "creation_date": 1577889316, "last_edit_date": 1577898425, "question_id": 59553390, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59553390/keras-lstm-model-not-learning", "title": "Keras LSTM Model not learning", "body": "<p>I wrote this code a few days ago and I had a few bugs but with some help, I was able to fix them. The Model is not learning. I tried different batch sizes, different amount of epochs, different activation functions, checked my data a few times for flaws I wasn't able to find any. It is due in a week or so for a school project. Any help will be very much valued.</p>\n\n<p>Here is the code.</p>\n\n<pre><code>from keras.layers import Dense, Input, Concatenate, Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.models import Model\nfrom keras.layers import LSTM\nimport tensorflow as tf\nimport NetworkRequest as NR\nimport ParseNetworkRequest as PNR\nimport numpy as np\n\n\ndef buildModel():\n    _Price = Input(shape=(1, 1))\n    _Volume = Input(shape=(1, 1))\n    PriceLayer = LSTM(128)(_Price)\n    VolumeLayer = LSTM(128)(_Volume)\n    merged = Concatenate(axis=1)([PriceLayer, VolumeLayer])\n    Dropout(0.2)\n    dense1 = Dense(128, input_dim=2, activation='relu', use_bias=True)(merged)\n    Dropout(0.2)\n    dense2 = Dense(64, input_dim=2, activation='relu', use_bias=True)(dense1)\n    Dropout(0.2)\n    output = Dense(1, activation='softmax', use_bias=True)(dense2)\n\n    opt = tf.keras.optimizers.Adam(learning_rate=1e-3, decay=1e-6)\n\n    _Model = Model(inputs=[_Price, _Volume], output=output)\n    _Model.compile(optimizer=opt, loss='mse', metrics=['accuracy'])\n\n    return _Model\n\n\nif __name__ == '__main__':\n    api_key = \"47BGPYJPFN4CEC20\"\n    stock = \"DJI\"\n    Index = ['4. close', '5. volume']\n\n    RawData = NR.Initial_Network_Request(api_key, stock)\n\n    Closing = PNR.Parse_Network_Request(RawData, Index[0])\n    Volume = PNR.Parse_Network_Request(RawData, Index[1])\n    Length = len(Closing)\n\n    scalar = MinMaxScaler(feature_range=(0, 1))\n\n    Closing_scaled = scalar.fit_transform(np.reshape(Closing[:-1], (-1, 1)))\n    Volume_scaled = scalar.fit_transform(np.reshape(Volume[:-1], (-1, 1)))\n    Labels_scaled = scalar.fit_transform(np.reshape(Closing[1:], (-1, 1)))\n\n    Train_Closing = Closing_scaled[:int(0.9 * Length)]\n    Train_Closing = np.reshape(Train_Closing, (Train_Closing.shape[0], 1, 1))\n\n    Train_Volume = Volume_scaled[:int(0.9 * Length)]\n    Train_Volume = np.reshape(Train_Volume, (Train_Volume.shape[0], 1, 1))\n\n    Train_Labels = Labels_scaled[:int((0.9 * Length))]\n    Train_Labels = np.reshape(Train_Labels, (Train_Labels.shape[0], 1))\n\n    # -------------------------------------------------------------------------------------------#\n\n    Test_Closing = Closing_scaled[int(0.9 * Length):(Length - 1)]\n    Test_Closing = np.reshape(Test_Closing, (Test_Closing.shape[0], 1, 1))\n\n    Test_Volume = Volume_scaled[int(0.9 * Length):(Length - 1)]\n    Test_Volume = np.reshape(Test_Volume, (Test_Volume.shape[0], 1, 1))\n\n    Test_Labels = Labels_scaled[int(0.9 * Length):(Length - 1)]\n    Test_Labels = np.reshape(Test_Labels, (Test_Labels.shape[0], 1))\n\n    Predict_Closing = Closing_scaled[-1]\n    Predict_Closing = np.reshape(Predict_Closing, (Predict_Closing.shape[0], 1, 1))\n\n    Predict_Volume = Volume_scaled[-1]\n    Predict_Volume = np.reshape(Predict_Volume, (Predict_Volume.shape[0], 1, 1))\n\n    Predict_Label = Labels_scaled[-1]\n    Predict_Label = np.reshape(Predict_Label, (Predict_Label.shape[0], 1))\n\n    model = buildModel()\n    model.fit(\n        [\n            Train_Closing,\n            Train_Volume\n        ],\n        [\n            Train_Labels\n        ],\n        validation_data=(\n            [\n                Test_Closing,\n                Test_Volume\n            ],\n            [\n                Test_Labels\n            ]\n        ),\n        epochs=10,\n        batch_size=Length\n    )\n</code></pre>\n\n<p>This is the output when I run it.</p>\n\n<pre><code>Using TensorFlow backend.\n2020-01-01 16:31:47.905012: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2199985000 Hz\n2020-01-01 16:31:47.906105: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x49214f0 executing computations on platform Host. Devices:\n2020-01-01 16:31:47.906137: I tensorflow/compiler/xla/service/service.cc:175]   StreamExecutor device (0): Host, Default Version\n/home/martin/PycharmProjects/MarketPredictor/Model.py:26: UserWarning: Update your `Model` call to the Keras 2 API: `Model(inputs=[&lt;tf.Tenso..., outputs=Tensor(\"de...)`\n  _Model = Model(inputs=[_Price, _Volume], output=output)\nTrain on 4527 samples, validate on 503 samples\nEpoch 1/10\n\n4527/4527 [==============================] - 1s 179us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 2/10\n\n4527/4527 [==============================] - 0s 41us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 3/10\n\n4527/4527 [==============================] - 0s 42us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 4/10\n\n4527/4527 [==============================] - 0s 42us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 5/10\n\n4527/4527 [==============================] - 0s 43us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 6/10\n\n4527/4527 [==============================] - 0s 39us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 7/10\n\n4527/4527 [==============================] - 0s 42us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 8/10\n\n4527/4527 [==============================] - 0s 39us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 9/10\n\n4527/4527 [==============================] - 0s 42us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\nEpoch 10/10\n\n4527/4527 [==============================] - 0s 38us/step - loss: 0.4716 - accuracy: 2.2090e-04 - val_loss: 0.6772 - val_accuracy: 0.0000e+00\n\nProcess finished with exit code 0\n</code></pre>\n\n<p>The loss is high, and the accuracy is 0.\nPlease help.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 289}]