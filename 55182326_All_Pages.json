[{"items": [{"tags": ["python", "tensorflow", "deep-learning"], "owner": {"account_id": 4548208, "reputation": 3430, "user_id": 8089695, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/92107cb1b109e2b8281e9cb76b5e3f16?s=256&d=identicon&r=PG&f=1", "display_name": "MiloMinderbinder", "link": "https://stackoverflow.com/users/8089695/milominderbinder"}, "is_answered": true, "view_count": 1204, "accepted_answer_id": 55185688, "answer_count": 1, "score": 1, "last_activity_date": 1552663029, "creation_date": 1552651817, "question_id": 55182326, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/55182326/understanding-resourcevariables-in-tensorflow", "title": "Understanding ResourceVariables in tensorflow", "body": "<p>From <a href=\"https://stackoverflow.com/questions/40817665/whats-the-difference-between-variable-and-resourcevariable-in-tensorflow\">here</a></p>\n\n<blockquote>\n  <p>Unlike tf.Variable, a tf.ResourceVariable has well-defined semantics. Each usage of a ResourceVariable in a TensorFlow graph adds a read_value operation to the graph. The Tensors returned by a read_value operation are guaranteed to see all modifications to the value of the variable which happen in any operation on which the read_value depends on (either directly, indirectly, or via a control dependency) and guaranteed to not see any modification to the value of the variable on which the read_value operation does not depend on. For example, if there is more than one assignment to a ResourceVariable in a single session.run call there is a well-defined value for each operation which uses the variable's value if the assignments and the read are connected by edges in the graph.</p>\n</blockquote>\n\n<p>So i tried to test the behavior. My code:</p>\n\n<pre><code>tf.reset_default_graph()\na = tf.placeholder(dtype=tf.float32,shape=(), name='a')\nd = tf.placeholder(dtype=tf.float32,shape=(), name='d')\nb = tf.get_variable(name='b', initializer=tf.zeros_like(d), use_resource=True)\nc=a+b\nb_init = tf.assign(b, d)\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())   \n    print(sess.run([c,b_init,b], feed_dict={a:5.,d:10.})) \n</code></pre>\n\n<p>This prints [15.,10.,10.]. As per my understanding of resource variables in tensorflow variable <code>c</code> should not have access to the value of <code>b</code> that was assigned to it in <code>b_init</code> which, would mean the output instead should be [5.,10.,0.]. Please, help me understand where i am going wrong</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 169}]