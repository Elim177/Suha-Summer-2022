[{"items": [{"tags": ["tensorflow", "keras", "computer-vision", "heatmap", "image-recognition"], "owner": {"account_id": 19554279, "reputation": 173, "user_id": 14309081, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GiuKcYlPGp3qnyhphTTZInq9bpOR9hq7-gMJ5hA=k-s256", "display_name": "Bhuvan S", "link": "https://stackoverflow.com/users/14309081/bhuvan-s"}, "is_answered": false, "view_count": 504, "answer_count": 0, "score": 3, "last_activity_date": 1615364575, "creation_date": 1603170691, "question_id": 64438824, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64438824/grad-cam-in-keras-valueerror-graph-disconnected-cannot-obtain-value-for-tenso", "title": "Grad-CAM in keras, ValueError: Graph disconnected: cannot obtain value for tensor Tensor &quot;input_11_6:0&quot;, shape=(None, 150, 150, 3)", "body": "<p>How to perform Grad-CAM on pretrained custom model.\nHow to select <code>last_conv_layer_name</code> and <code>classifier_layer_names</code>?\nWhat is its significances and how to select layers' names?\nShould I consider Densenet121 sublayers or densenet as one functional layer?\nHow to perform Grad-CAM for this trained network?\nThese are the steps I tried,</p>\n<pre><code>#load model and custom metrics\ndependencies = {'recall_m': recall_m, 'precision_m' : precision_m, 'f1_m' : f1_m }\nmodel = keras.models.load_model(&quot;model_val_acc-73.33.h5&quot;, custom_objects = dependencies)\nmodel.summary()\n</code></pre>\n<pre><code>Model: &quot;sequential_9&quot;\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndensenet121 (Functional)     (None, 4, 4, 1024)        7037504   \n_________________________________________________________________\nflatten (Flatten)            (None, 16384)             0         \n_________________________________________________________________\ndense_encoder (Dense)        (None, 1024)              16778240  \n_________________________________________________________________\ndropout_51 (Dropout)         (None, 1024)              0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 256)               262400    \n_________________________________________________________________\ndropout_52 (Dropout)         (None, 256)               0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 128)               32896     \n_________________________________________________________________\ndropout_53 (Dropout)         (None, 128)               0         \n_________________________________________________________________\ndense_4 (Dense)              (None, 64)                8256      \n_________________________________________________________________\ndropout_54 (Dropout)         (None, 64)                0         \n_________________________________________________________________\ndense_5 (Dense)              (None, 32)                2080      \n_________________________________________________________________\ndropout_55 (Dropout)         (None, 32)                0         \n_________________________________________________________________\nFinal (Dense)                (None, 2)                 66        \n=================================================================\nTotal params: 24,121,442\nTrainable params: 17,083,938\nNon-trainable params: 7,037,504\n</code></pre>\n<p>This is the heat map function:-</p>\n<pre><code>###defining heat map\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, classifier_layer_names):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer\n    last_conv_layer = model.get_layer(last_conv_layer_name)\n    last_conv_layer_model = keras.Model(model.inputs, last_conv_layer.output)\n\n    # Second, we create a model that maps the activations of the last conv\n    # layer to the final class predictions\n    classifier_input = keras.Input(shape=last_conv_layer.output.shape[1:])\n    x = classifier_input\n    for layer_name in classifier_layer_names:\n        x = model.get_layer(layer_name)(x)\n    classifier_model = keras.Model(classifier_input, x)\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        # Compute activations of the last conv layer and make the tape watch it\n        last_conv_layer_output = last_conv_layer_model(img_array)\n        tape.watch(last_conv_layer_output)\n        # Compute class predictions\n        preds = classifier_model(last_conv_layer_output)\n        top_pred_index = tf.argmax(preds[0])\n        top_class_channel = preds[:, top_pred_index]\n\n    # This is the gradient of the top predicted class with regard to\n    # the output feature map of the last conv layer\n    grads = tape.gradient(top_class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n\n    # We multiply each channel in the feature map array\n    # by &quot;how important this channel is&quot; with regard to the top predicted class\n    last_conv_layer_output = last_conv_layer_output.numpy()[0]\n    pooled_grads = pooled_grads.numpy()\n    for i in range(pooled_grads.shape[-1]):\n        last_conv_layer_output[:, :, i] *= pooled_grads[i]\n\n    # The channel-wise mean of the resulting feature map\n    # is our heatmap of class activation\n    heatmap = np.mean(last_conv_layer_output, axis=-1)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 &amp; 1\n    heatmap = np.maximum(heatmap, 0) / np.max(heatmap)\n    return heatmap\n</code></pre>\n<p>this is an image input</p>\n<pre><code>img_array = X_test[10]    # 10th image sample\nX_test[10].shape\n#(150, 150, 3)\n\nlast_conv_layer_name = &quot;densenet121&quot;\nclassifier_layer_names = [ &quot;dense_2&quot;, &quot;dense_3&quot;, &quot;dense_4&quot;, &quot;dense_5&quot;, &quot;Final&quot; ]\n\n# Generate class activation heatmap\nheatmap = make_gradcam_heatmap(\n    img_array, model, last_conv_layer_name, classifier_layer_names\n)  ####===&gt; (I'm getting error here, in this line)\n</code></pre>\n<p>So what is wrong with <code>last_conv_layer_name</code> and <code>classifier_layer_names</code>.\nCan anyone please explain this?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 166}]