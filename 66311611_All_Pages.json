[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras", "deep-learning"], "owner": {"account_id": 11292876, "reputation": 1271, "user_id": 8281276, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/63c8b6d7ae99659965776b9e0a9b7c48?s=256&d=identicon&r=PG&f=1", "display_name": "Watanabe.N", "link": "https://stackoverflow.com/users/8281276/watanabe-n"}, "is_answered": true, "view_count": 210, "answer_count": 1, "score": 1, "last_activity_date": 1614006809, "creation_date": 1613979109, "last_edit_date": 1614006809, "question_id": 66311611, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66311611/when-and-how-keras-calculate-metrics-for-each-batch-of-samples", "title": "When and How Keras calculate metrics for each batch of samples?", "body": "<p>I was seeing how Keras custom metrics working, and calculation doesn't match between <code>tf.print</code> in metric function and callback print of <code>model.fit</code>.</p>\n<pre class=\"lang-py prettyprint-override\"><code>import tensorflow as tf  # tf2.4.1\nimport numpy as np\nmodel = tf.keras.models.Sequential(\n    tf.keras.layers.Dense(1, input_shape=(1,))\n)\ndef my_metric_fn(y_true, y_pred):\n    squared_difference = tf.square(y_true - y_pred)\n    loss =  tf.reduce_mean(squared_difference, axis=-1)\n    tf.print(y_true.shape, y_pred.shape, loss, tf.reduce_mean(squared_difference))\n    return loss\nmodel.compile(optimizer='adam', loss='mean_squared_error', metrics=[my_metric_fn])\nx = np.random.rand(4,1)\ny = x ** 2\nhistory = model.fit(x=x, y=y, batch_size=2, epochs=2)\nprint(history.history)\n</code></pre>\n<p>Output (formatted for a better readability)</p>\n<pre><code>Epoch 1/2\nTensorShape([2, 1]) TensorShape([2, 1]) [9.79962078e-06 0.0534314588] 0.02672063\n1/2 [==============&gt;...............] - ETA: 0s - loss: 0.0267 - my_metric_fn: 0.0267\nTensorShape([2, 1]) TensorShape([2, 1]) [0.0397406667 0.179955378] 0.109848022\n2/2 [==============================] - 0s 7ms/step - loss: 0.0544 - my_metric_fn: 0.0544\n\nEpoch 2/2\nTensorShape([2, 1]) TensorShape([2, 1]) [0.0392204635 0.0521505736] 0.0456855185\n1/2 [==============&gt;...............] - ETA: 0s - loss: 0.0457 - my_metric_fn: 0.0457\nTensorShape([2, 1]) TensorShape([2, 1]) [0.177408844 2.45939535e-08] 0.088704437\n2/2 [==============================] - 0s 5ms/step - loss: 0.0600 - my_metric_fn: 0.0600\n{'loss': [0.06828432530164719, 0.06719497591257095], 'my_metric_fn': [0.06828432530164719, 0.06719497591257095]}\n\n</code></pre>\n<p>See a printed loss of a batch in an above output.</p>\n<p>Epoch 1/2 1/2 tf.print: 0.02672063, and model.fit: 0.0267. OK.<br />\nEpoch 1/2 2/2 tf.print: 0.109848022, but model.fit: 0.0544. Not OK.</p>\n<p>How can I understand these match and mismatch? Where did 0.0544 come from?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 249}]