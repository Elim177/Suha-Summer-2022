[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 4441934, "reputation": 1952, "user_id": 3616293, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/cf7556b4227065cec9496375d64fea3d?s=256&d=identicon&r=PG&f=1", "display_name": "Arun", "link": "https://stackoverflow.com/users/3616293/arun"}, "is_answered": false, "view_count": 183, "answer_count": 0, "score": 1, "last_activity_date": 1578758451, "creation_date": 1578752122, "last_edit_date": 1578758451, "question_id": 59695217, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59695217/loading-weights-tensorflow-2-0-model-error", "title": "Loading weights TensorFlow 2.0 model error", "body": "<p>I am using Python 3.X and TensorFlow 2.0 along with \"tensorflow_model_optimization\" package for neural network pruning. The code I have is as follows-</p>\n\n<pre><code>from tensorflow_model_optimization.sparsity import keras as sparsity\n\n\nl = tf.keras.layers\n\n\n# Original model without pruning-\nmodel = Sequential()\nmodel.add(l.InputLayer(input_shape = (784, )))\nmodel.add(Flatten())\nmodel.add(Dense(units = 300, activation='relu', kernel_initializer = tf.initializers.GlorotUniform()))\nmodel.add(l.Dropout(0.2))\nmodel.add(Dense(units = 100, activation='relu', kernel_initializer = tf.initializers.GlorotUniform()))\nmodel.add(l.Dropout(0.1))\nmodel.add(Dense(units = num_classes, activation='softmax'))\n\n# Define callbacks-\ncallbacks = [\n              # tf.keras.callbacks.TensorBoard(log_dir=logdir, profile_batch = 0),\n             tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience = 3)\n]\n\n# Compile designed Neural Network-\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = 'adam',\n    metrics = ['accuracy'])\n\n# Save untrained and initial weights to disk-\nmodel.save_weights(\"Initial_non_trained_weights.h5\")\n\n\nepochs = 12\n\nnum_train_samples = X_train.shape[0]\n\nend_step = np.ceil(1.0 * num_train_samples / batch_size).astype(np.int32) * epochs\n\nprint(\"end_step parameter for this dataset =  {0}\".format(end_step))\n# end_step = 5628\n\n# Specify the parameters to be used for layer-wise pruning:\npruning_params = {\n    'pruning_schedule': sparsity.PolynomialDecay(\n        initial_sparsity=0.50, final_sparsity=0.90,\n        begin_step=2000, end_step=end_step, frequency=100)\n}\n\n\n# Neural network which is to be pruned-\npruned_model = Sequential()\npruned_model.add(l.InputLayer(input_shape=(784, )))\npruned_model.add(Flatten())\npruned_model.add(sparsity.prune_low_magnitude(Dense(units = 300, activation='relu', kernel_initializer=tf.initializers.GlorotUniform()),\n                                              **pruning_params))\npruned_model.add(l.Dropout(0.2))\npruned_model.add(sparsity.prune_low_magnitude(Dense(units = 100, activation='relu', kernel_initializer=tf.initializers.GlorotUniform()),\n                                              **pruning_params))\npruned_model.add(l.Dropout(0.1))\npruned_model.add(sparsity.prune_low_magnitude(Dense(units = num_classes, activation='softmax'), **pruning_params))\n\n# Compile pruned CNN-\npruned_model.compile(\n    loss=tf.keras.losses.categorical_crossentropy,\n    optimizer='adam',\n    metrics=['accuracy'])\n\n# Load weights from before-\npruned_model.load_weights(\"Initial_non_trained_weights.h5\")\n</code></pre>\n\n<p>This last line of loading initial weights into the pruned model gives me error:</p>\n\n<pre><code>ValueError: Layer #0 (named \"prune_low_magnitude_dense_9\" in the current model) was found to correspond to layer dense in the save file.\n</code></pre>\n\n<p>However the new layer prune_low_magnitude_dense_9 expects 5 weights, but the saved weights have 2 elements.</p>\n\n<p>What's going wrong?</p>\n\n<p>Thanks!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 17}]