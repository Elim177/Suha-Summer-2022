[{"items": [{"tags": ["python-3.x", "tensorflow", "machine-learning", "keras", "neural-network"], "owner": {"account_id": 12807770, "reputation": 234, "user_id": 10253383, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/Bz2iX.jpg?s=256&g=1", "display_name": "PsychoCom", "link": "https://stackoverflow.com/users/10253383/psychocom"}, "is_answered": false, "view_count": 376, "answer_count": 0, "score": 4, "last_activity_date": 1594171945, "creation_date": 1594171945, "question_id": 62786227, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62786227/how-to-track-weights-and-gradients-in-a-keras-custom-training-loop", "title": "How to track weights and gradients in a Keras custom training loop", "body": "<p>I have defined the following custom model and training loop in Keras:</p>\n<pre><code>class CustomModel(keras.Model):\n    def train_step(self, data):\n        x, y = data\n\n        with tf.GradientTape() as tape:\n            y_pred = self(x, training=True)  # Forward pass\n            loss = self.compiled_loss(y, y_pred, regularization_losses=self.losses)\n\n        trainable_vars = self.trainable_variables\n        gradients = tape.gradient(loss, trainable_vars)\n        self.optimizer.apply_gradients(zip(gradients, trainable_vars))\n        self.compiled_metrics.update_state(y, y_pred)\n        return {m.name: m.result() for m in self.metrics}\n</code></pre>\n<p>And I am using the following code to train the model on a simple toy data set:</p>\n<pre><code>inputs = keras.layers.Input(shape=(1,))\nhidden = keras.layers.Dense(1, activation='tanh')(inputs)\noutputs = keras.layers.Dense(1)(hidden)\n\nx = np.arange(0, 2*np.pi, 2*np.pi/100)\ny = np.sin(x)\n\nnnmodel = CustomModel(inputs, outputs)\nnnmodel.compile(optimizer=keras.optimizers.SGD(lr=0.1), loss=&quot;mse&quot;, metrics=[&quot;mae&quot;])\nnnmodel.fit(x, y, batch_size=100, epochs=2000)\n</code></pre>\n<p>I want to be able to see the values of the <code>gradient</code> and the <code>trainable_vars</code> variables in the <code>train_step</code> function for each training loop, and I am not sure how to do this.</p>\n<p>I have tried to set a break point inside the <code>train_step</code> function in my python IDE and expecting it to stop at the break point for each epoch of the training after I call <code>model.fit()</code> but this didn't happen. I also tried to have them print out the values in the log after each epoch but I am not sure how to achieve this.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 53}]