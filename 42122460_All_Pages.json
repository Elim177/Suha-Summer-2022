[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 963556, "reputation": 1375, "user_id": 987397, "user_type": "registered", "accept_rate": 32, "profile_image": "https://www.gravatar.com/avatar/fa7ae7d9bd13c2d04335c3209865c262?s=256&d=identicon&r=PG", "display_name": "Derk", "link": "https://stackoverflow.com/users/987397/derk"}, "is_answered": true, "view_count": 4947, "answer_count": 1, "score": 6, "last_activity_date": 1503074978, "creation_date": 1486583832, "question_id": 42122460, "content_license": "CC BY-SA 3.0", "link": "https://stackoverflow.com/questions/42122460/sharing-weights-in-tensorflow-between-two-subgraphs", "title": "Sharing weights in Tensorflow between two subgraphs", "body": "<p>I have the following setup, where each input consists of two trajectories. I want that the left graph has the same weight as the right graph</p>\n\n<p><a href=\"https://i.stack.imgur.com/qo3Aj.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/qo3Aj.png\" alt=\"enter image description here\"></a></p>\n\n<p>I tried to follow the approach described here for sharing variables, <a href=\"https://www.tensorflow.org/versions/r1.0/how_tos/variable_scope/\" rel=\"noreferrer\">https://www.tensorflow.org/versions/r1.0/how_tos/variable_scope/</a>, however it is not working. Two different graphs are created. What am I doing wrong?</p>\n\n<pre><code>def build_t_model(trajectories):\n    \"\"\"\n    Function to build a subgraph\n    \"\"\"\n    with tf.name_scope('h1_t'):\n        weights = tf.Variable(tf.truncated_normal([150, h1_t_units], stddev=1.0/math.sqrt(float(150))), name='weights')\n        biases = tf.Variable(tf.zeros([h1_t_units]), name='biases')\n        h1_t = tf.nn.relu(tf.matmul(trajectories, weights) + biases)\n\n    with tf.name_scope('h2_t'):\n        weights = tf.Variable(tf.truncated_normal([h1_t_units, h2_t_units], stddev=1.0/math.sqrt(float(h1_t_units))), name='weights')\n        biases = tf.Variable(tf.zeros([h2_t_units]), name='biases')\n        h2_t = tf.nn.relu(tf.matmul(h1_t, weights) + biases)\n\n    with tf.name_scope('h3_t'):\n        weights = tf.Variable(tf.truncated_normal([h2_t_units, M], stddev=1.0/math.sqrt(float(h2_t_units))), name='weights')\n        biases = tf.Variable(tf.zeros([M]), name='biases')\n        h3_t = tf.nn.relu(tf.matmul(h2_t, weights) + biases)\n\n    return h3_t\n\n\n# We build two trajectory networks. The weights should be shared\nwith tf.variable_scope('traj_embedding') as scope:        \n    self.embeddings_left = build_t_model(self.input_traj)\n    scope.reuse_variables()\n    self.embeddings_right = build_t_model(self.input_traj_mv)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 298}]