[{"items": [{"tags": ["python-3.x", "keras", "neural-network", "tensorflow2.0"], "owner": {"account_id": 4441934, "reputation": 1952, "user_id": 3616293, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/cf7556b4227065cec9496375d64fea3d?s=256&d=identicon&r=PG&f=1", "display_name": "Arun", "link": "https://stackoverflow.com/users/3616293/arun"}, "is_answered": true, "view_count": 125, "answer_count": 2, "score": 0, "last_activity_date": 1581153119, "creation_date": 1581105634, "last_edit_date": 1581144338, "question_id": 60120290, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60120290/building-neural-networks-tensorflow-2-0-model-sub-classing-valueerror-typeer", "title": "Building Neural Networks [TensorFlow 2.0] Model sub-classing - ValueError/TypeError", "body": "<p>I am using TensorFlow 2.0 with Python 3.7.5 to build a neural network for Iris classification using Model sub-classing approach.</p>\n\n<p>The code I have is as follows:</p>\n\n<pre><code>import tensorflow as tf\nfrom tensorflow.keras import Sequential, Model\nfrom tensorflow.keras.layers import Dense, Input\nimport pandas as pd\nimport numpy as np\n\n\n# Read in data-\ndata = pd.read_csv(\"iris.csv\")\n\n# Get data types for different attributes-\ndata.dtypes\n'''\nsepallength    float64\nsepalwidth     float64\npetallength    float64\npetalwidth     float64\nclass           object\ndtype: object\n'''\n\n\n# Get shape of data-\ndata.shape\n# (150, 5)\n\n\n# Check for missing values-\ndata.isnull().values.any()\n# False\n\n# Perform label encoding for target variable-\n\n# Initialize a label encoder-\nle = LabelEncoder()\n\n# Label encode target attribute-\ndata['class'] = le.fit_transform(data['class'])\n\n# Get different classes which are label encoded-\nle.classes_\n# array(['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'], dtype=object)\n\n# Split data into features (X) and target (y)-\nX = data.drop('class', axis = 1)\ny = data['class']\n\n\n# Get training &amp; testing sets using features and labels-\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\n# Convert from Pandas to numpy arrays-\nX_train = X_train.to_numpy()\nX_test = X_test.to_numpy()\n\ny_train = y_train.to_numpy()\ny_test = y_test.to_numpy()\n\nprint(\"\\nTraining and Testing set dimensions:\")\nprint(\"X_train.shape = {0}, y_train.shape = {1}\".format(X_train.shape, y_train.shape))\nprint(\"X_test.shape = {0}, y_test.shape = {1}\\n\".format(X_test.shape, y_test.shape))\n# Training and Testing set dimensions:\n# X_train.shape = (105, 4), y_train.shape = (105,)\n# X_test.shape = (45, 4), y_test.shape = (45,)\n\n\n\nclass IrisClassifier(Model):\n\n    def __init__(self):\n        super(IrisClassifier, self).__init__()\n\n        '''\n        self.layer1 = Dense(\n            units = 4, activation = 'relu',\n            kernel_initializer = tf.keras.initializers.GlorotNormal()\n            )\n        '''\n\n        self.input_layer = Input(\n            shape = (4,)\n            )\n\n        self.layer1 = Dense(\n            units = 10, activation = 'relu',\n            input_dim = 4,\n            kernel_initializer = tf.keras.initializers.GlorotNormal()\n            )\n\n        self.layer2 = Dense(\n            units = 10, activation = 'relu',\n            kernel_initializer = tf.keras.initializers.GlorotNormal()\n            )\n\n        self.outputlayer = Dense(\n            units = 3, activation = 'softmax'\n            )\n\n\n    def call(self, x):\n        x = self.input_layer(x)\n        x = self.layer1(x)\n        x = self.layer2(x)\n        # x = self.layer3(x)\n\n        return self.outputlayer(x)\n\n\n# Instantiate a model of defined neural network class-\nmodel = IrisClassifier()\n\n# Define EarlyStopping callback-\ncallback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3)\n\n# Compile defined model-\nmodel.compile(\n    optimizer=tf.keras.optimizers.Adam(lr = 0.001),\n    loss = 'sparse_categorical_crossentropy',\n    metrics = ['accuracy']\n     )\n\n\n# Train model-\nhistory2 = model.fit(\n    x = X_train, y = y_train,\n    validation_data = [X_test, y_test],\n    epochs = 50, batch_size = 16,\n    callbacks = [callback]\n    )\n</code></pre>\n\n<p>When I execute 'history2' code, I get the following error:</p>\n\n<blockquote>\n  <p>--------------------------------------------------------------------------- ValueError                                Traceback (most recent call\n  last)  in \n        3         validation_data = [X_test, y_test],\n        4         epochs = 50, batch_size = 16,\n  ----> 5         callbacks = [callback]\n        6   )</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py\n  in fit(self, x, y, batch_size, epochs, verbose, callbacks,\n  validation_split, validation_data, shuffle, class_weight,\n  sample_weight, initial_epoch, steps_per_epoch, validation_steps,\n  validation_freq, max_queue_size, workers, use_multiprocessing,\n  **kwargs)\n      726         max_queue_size=max_queue_size,\n      727         workers=workers,\n  --> 728         use_multiprocessing=use_multiprocessing)\n      729 \n      730   def evaluate(self,</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_arrays.py\n  in fit(self, model, x, y, batch_size, epochs, verbose, callbacks,\n  validation_split, validation_data, shuffle, class_weight,\n  sample_weight, initial_epoch, steps_per_epoch, validation_steps,\n  validation_freq, **kwargs)\n      640         steps=steps_per_epoch,\n      641         validation_split=validation_split,\n  --> 642         shuffle=shuffle)\n      643 \n      644     if validation_data:</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py\n  in _standardize_user_data(self, x, y, sample_weight, class_weight,\n  batch_size, check_steps, steps_name, steps, validation_split, shuffle,\n  extract_tensors_from_dataset)    2417     # First, we build the model\n  on the fly if necessary.    2418     if not self.inputs:\n  -> 2419       all_inputs, y_input, dict_inputs = self._build_model_with_inputs(x, y)    2420       is_build_called =\n  True    2421     else:</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training.py\n  in _build_model_with_inputs(self, inputs, targets)    2580     # or\n  lists of arrays, and extract a flat list of inputs from the passed<br>\n  2581     # structure.\n  -> 2582     training_utils.validate_input_types(inputs, orig_inputs)    2583     2584     if isinstance(inputs, (list, tuple)):</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/training_utils.py\n  in validate_input_types(inp, orig_inp, allow_dict, field_name)    1149\n  raise ValueError(    1150         'Please provide as model inputs\n  either a single array or a list of '\n  -> 1151         'arrays. You passed: {}={}'.format(field_name, orig_inp))    1152     1153 </p>\n  \n  <p>ValueError: Please provide as model inputs either a single array or a\n  list of arrays. You passed: inputs=     sepallength  sepalwidth \n  petallength  petalwidth 117          7.7         3.8          6.7<br>\n  2.2 7            5.0         3.4          1.5         0.2 73           6.1         2.8          4.7         1.2 92           5.8         2.6          4.0         1.2 87           6.3         2.3          4.4         1.3 ..           ...         ...          ...         ... 93           5.0\n  2.3          3.3         1.0 30           4.8         3.1          1.6         0.2 25           5.0         3.0          1.6         0.2 31           5.4         3.4          1.5         0.4 97           6.2         2.9          4.3         1.3</p>\n  \n  <p>[105 rows x 4 columns]</p>\n</blockquote>\n\n<p>After converting X_train, y_train, X_test and y_test to numpy arrays, when I execute, history2 to train the model, I get the following error:</p>\n\n<p>TypeError: in converted code:</p>\n\n<blockquote>\n<pre><code>&lt;ipython-input-14-ae6111e00410&gt;:34 call  *\n    x = self.input_layer(x)\n/home/arjun/.local/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/api.py:427\n</code></pre>\n  \n  <p>converted_call\n          f in m.<strong>dict</strong>.values() for m in (collections, pdb, copy, inspect, re)):\n      /home/arjun/.local/lib/python3.7/site-packages/tensorflow_core/python/autograph/impl/api.py:427\n  \n          f in m.<strong>dict</strong>.values() for m in (collections, pdb, copy, inspect, re)):\n      /home/arjun/.local/lib/python3.7/site-packages/tensorflow_core/python/ops/math_ops.py:1336\n  tensor_equals\n          return gen_math_ops.equal(self, other)\n      /home/arjun/.local/lib/python3.7/site-packages/tensorflow_core/python/ops/gen_math_ops.py:3627\n  equal\n          name=name)\n      /home/arjun/.local/lib/python3.7/site-packages/tensorflow_core/python/framework/op_def_library.py:536\n  _apply_op_helper\n          repr(values), type(values).<strong>name</strong>, err))</p>\n\n<pre><code>TypeError: Expected float32 passed to parameter 'y' of op 'Equal', got 'collections' of type 'str' instead. Error: Expected float32, got\n</code></pre>\n  \n  <p>'collections' of type 'str' instead.</p>\n</blockquote>\n\n<p>What's going wrong?</p>\n\n<p>Thanks!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 10}]