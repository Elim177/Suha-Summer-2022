[{"items": [{"tags": ["tensorflow", "machine-learning", "keras", "conv-neural-network"], "owner": {"account_id": 10678749, "reputation": 17, "user_id": 7861462, "user_type": "registered", "profile_image": "https://graph.facebook.com/411041312606652/picture?type=large", "display_name": "Giuseppe", "link": "https://stackoverflow.com/users/7861462/giuseppe"}, "is_answered": false, "view_count": 151, "answer_count": 0, "score": 1, "last_activity_date": 1596457006, "creation_date": 1596457006, "question_id": 63229261, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/63229261/gradienttape-returns-none", "title": "GradientTape returns None", "body": "<p>I am trying to use grad-CAM (I'm following this <a href=\"https://www.pyimagesearch.com/2020/03/09/grad-cam-visualize-class-activation-maps-with-keras-tensorflow-and-deep-learning/\" rel=\"nofollow noreferrer\">https://www.pyimagesearch.com/2020/03/09/grad-cam-visualize-class-activation-maps-with-keras-tensorflow-and-deep-learning/</a> from PyImageSearch) on a CNN I'm using transfer learning on.</p>\n<p>In particular, I am using a simple CNN for a regression problem. I used MobileNetV2 with an Average Pooling layer and a Dense layer with one unit on top, as shown below:</p>\n<pre><code>base_model = MobileNetV2(include_top=False, input_shape=(224, 224, 3), weights='imagenet')\nbase_model.trainable = False\ninputs = keras.Input(shape=(224, 224, 3))\nx = base_model(inputs)\nx = keras.layers.GlobalAveragePooling2D()(x)\noutputs = keras.layers.Dense(1, activation=&quot;linear&quot;)(x)\nmodel = keras.Model(inputs, outputs)\n</code></pre>\n<p>and the summary is:</p>\n<pre><code>Model: &quot;model&quot;\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_2 (InputLayer)         [(None, 224, 224, 3)]     0         \n_________________________________________________________________\nmobilenetv2_1.00_224 (Model) (None, 7, 7, 1280)        2257984   \n_________________________________________________________________\nglobal_average_pooling2d (Gl (None, 1280)              0         \n_________________________________________________________________\ndense (Dense)                (None, 1)                 1281      \n=================================================================\nTotal params: 2,259,265\nTrainable params: 1,281\nNon-trainable params: 2,257,984\n_________________________________________________________________\n</code></pre>\n<p>I initialize the CAM object with:</p>\n<pre><code>pred = 0.35\ncam = GradCAM(model, pred, layerName='input_2')\n</code></pre>\n<p>where pred is the predicted output on which I want to inspect the CAM and I also specify the layer name in order to refer to the input layer. Then I compute the heatmap on a sample image &quot;img&quot;:</p>\n<pre><code>heatmap = cam.compute_heatmap(img)\n</code></pre>\n<p>Now, let's focus on a part of the implementation of the function compute_heatmap from PyImageSearch:</p>\n<pre><code># record operations for automatic differentiation\nwith tf.GradientTape() as tape:\n    # cast the image tensor to a float-32 data type, pass the\n    # image through the gradient model, and grab the loss\n    # associated with the specific class index\n    inputs = tf.cast(image, tf.float32)\n    (convOutputs, predictions) = gradModel(inputs)\n    # loss = predictions[:, self.classIdx]  # original from PyImageSearch\n    loss = predictions[:]  # modified by me as I have only 1 output unit\n\n# use automatic differentiation to compute the gradients\ngrads = tape.gradient(loss, convOutputs)\n</code></pre>\n<p>The problem here is that the gradient grads is None.</p>\n<p>I thought that maybe the problem could lie in the network structure (all goes fine when reproducing the example of the classification task from the website), but I can't figure out where is the problem with this network used for regression!</p>\n<p>Could you please help me?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 68}]