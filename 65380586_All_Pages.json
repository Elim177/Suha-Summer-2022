[{"items": [{"tags": ["tensorflow2.x", "automatic-differentiation"], "owner": {"account_id": 20261582, "reputation": 11, "user_id": 14859819, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7b74a909f567e58f02170949422daae0?s=256&d=identicon&r=PG&f=1", "display_name": "Derrick", "link": "https://stackoverflow.com/users/14859819/derrick"}, "is_answered": false, "view_count": 387, "answer_count": 0, "score": 1, "last_activity_date": 1608489143, "creation_date": 1608472188, "last_edit_date": 1608489143, "question_id": 65380586, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65380586/how-to-obtain-the-jacobian-matrix-with-respect-to-the-inputs-of-a-keras-model-ne", "title": "How to obtain the Jacobian Matrix with respect to the inputs of a keras model neural network?", "body": "<p>I recently started learning and using automatic differentiation to determine the gradients and jacobian matrix of a neural network with respect to a given input. The method suggested by tensorflow is the <code>tape.gradient</code> and <code>tape.jacobian</code> method. However, I am not able to obtain the jacobian matrix using this method due to some bug in tensorflow. It works when I calculated <code>tape.gradient(y_pred, x)</code>, but not the jacobian matrix, which should have a shape of <code>(200,3)</code>. I am open to other ways to calculate the jacobian matrix, but I am more inclined to use automatic differentiation methods within Tensorflow. The current version I am using is Tensorflow 2.1.0. Greatly appreciate any advice!</p>\n<pre class=\"lang-py prettyprint-override\"><code>import tensorflow as tf\nimport numpy as np\n\n# The neural network accepts 3 inputs and produces 200 outputs. The actual values of the inputs and outputs are not written in the code as it is too involved.\nnum_inputs = 3\nnum_outputs = 200\nnum_hidden_layers  = 5\nnum_neurons = 50\nkernel = 'he_uniform'\nactivation  = tf.keras.layers.LeakyReLU(alpha=0.3)\n\n# Details of model (MLP)\ncurrent_model = tf.keras.models.Sequential()\ncurrent_model.add(tf.keras.Input(shape=(num_inputs,)))\nfor i in range(num_hidden_layers):\n    current_model.add(tf.keras.layers.Dense(units=num_neurons, activation=activation, kernel_initializer=kernel))\ncurrent_model.add(tf.keras.layers.Dense(units=num_outputs, activation='linear', kernel_initializer=kernel))\n\n# Finding the Jacobian matrix with respect to a given input of the neural network\n# In this case, the inputs are [0.02, 0.4 and 0.12] (i.e. 3 inputs)\nx = tf.Variable([[0.02, 0.4, 0.12]], dtype=tf.float32)\nwith tf.GradientTape() as tape:\n    y_pred = x\n    for layer in current_model.layers:\n        y_pred = layer(y_pred)\n\njacobian = tape.jacobian(y_pred, x)\n\nprint(jacobian)\n\n</code></pre>\n<p>Below is the error returned. I removed some parts for privacy purposes.</p>\n<pre class=\"lang-sh prettyprint-override\"><code>StagingError: in converted code:\n\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow_core\\python\\ops\\parallel_for\\control_flow_ops.py:183 f  *\n    return _pfor_impl(loop_fn, iters, parallel_iterations=parallel_iterations)\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow_core\\python\\ops\\parallel_for\\control_flow_ops.py:256 _pfor_impl\n    outputs.append(converter.convert(loop_fn_output))\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow_core\\python\\ops\\parallel_for\\pfor.py:1280 convert\n    output = self._convert_helper(y)\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow_core\\python\\ops\\parallel_for\\pfor.py:1453 _convert_helper\n    if flags.FLAGS.op_conversion_fallback_to_while_loop:\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\tensorflow_core\\python\\platform\\flags.py:84 __getattr__\n    wrapped(_sys.argv)\nC:\\Users\\...\\anaconda3\\envs\\tf\\lib\\site-packages\\absl\\flags\\_flagvalues.py:633 __call__\n    name, value, suggestions=suggestions)\n\nUnrecognizedFlagError: Unknown command line flag 'f'\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 272}]