[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 10942964, "reputation": 13, "user_id": 13096010, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ea455baac3f1c7ff3b30785c9aa594da?s=256&d=identicon&r=PG&f=1", "display_name": "balcony", "link": "https://stackoverflow.com/users/13096010/balcony"}, "is_answered": true, "view_count": 306, "accepted_answer_id": 60964083, "answer_count": 1, "score": 1, "last_activity_date": 1585717999, "creation_date": 1584725118, "question_id": 60778828, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60778828/higher-order-gradient-through-py-function", "title": "higher order gradient through py_function", "body": "<p>I wonder how to calculate higher order gradients through tf.py_function in tf2.0.  The following example (slightly modified from tensorflow doc) produces the correct dy_dx, and aa_x is None.  Thank you.</p>\n\n<pre><code>import tensorflow as tf\nimport os\n\ndef huber(x, delta):\n  if tf.abs(x) &lt;= delta:\n    return x*x/ (2*delta)\n  else:\n    return tf.abs(x)-delta/2.0\n\n\n\nx = tf.constant ([2.0 ] )         \nz = tf.constant ([1.0 ] )\n\nwith tf.GradientTape (persistent=True) as g0:\n  g0.watch(x)\n\n  with tf.GradientTape (persistent=True) as g :\n    g.watch (x)\n    y = tf.py_function(func=huber, inp=[x, 3.] , Tout=tf.float32  )\n\n  dy_dx = g.gradient(y, x)\n  aa = tf.reduce_sum(dy_dx *z )\n\naa_x = g0.gradient (aa, x)\nprint (dy_dx)\nprint (aa_x)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 98}]