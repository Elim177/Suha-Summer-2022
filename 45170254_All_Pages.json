[{"items": [{"tags": ["while-loop", "tensorflow"], "owner": {"account_id": 10716056, "reputation": 2138, "user_id": 7886651, "user_type": "registered", "accept_rate": 76, "profile_image": "https://i.stack.imgur.com/zfb59.jpg?s=256&g=1", "display_name": "I. A", "link": "https://stackoverflow.com/users/7886651/i-a"}, "is_answered": false, "view_count": 67, "answer_count": 1, "score": 0, "last_activity_date": 1500394340, "creation_date": 1500389565, "question_id": 45170254, "content_license": "CC BY-SA 3.0", "link": "https://stackoverflow.com/questions/45170254/tensorflow-while-body-not-executing", "title": "Tensorflow While Body Not Executing", "body": "<p>I have a FIFO Queue reading from tfrecords file in tensorflow. Each record is consisted of an image and its annotation, that is, a set of features. I was trying to skip some images that is, not feeding them into the graph, or not viewing them, according to some features in mind. Therefore, I thought that the best case scenario was to use on a while loop. That loop is going to test the value of the specified feature and decide whether to proceed or not. </p>\n\n<p>Kindly look at the following code:</p>\n\n<pre><code>import tensorflow as tf\nimport numpy as np\n\nnum_epoch = 100\n\ntfrecords_filename_seq = [\"C:/Users/user/PycharmProjects/AffectiveComputing/P16_db.tfrecords\"]\nfilename_queue = tf.train.string_input_producer(tfrecords_filename_seq, num_epochs=num_epoch, shuffle=False, name='queue')\nreader = tf.TFRecordReader()\n\ncurrent_image_confidence = tf.constant(0.0, dtype=tf.float32)\n\ndef body(i):\n    key, serialized_example = reader.read(filename_queue)\n    features = tf.parse_single_example(\n        serialized_example,\n        # Defaults are not specified since both keys are required.\n        features={\n            'height': tf.FixedLenFeature([], tf.int64),\n            'width': tf.FixedLenFeature([], tf.int64),\n            'image_raw': tf.FixedLenFeature([], tf.string),\n            'annotation_raw': tf.FixedLenFeature([], tf.string)\n        })\n\n    # This is how we create one example, that is, extract one example from the database.\n    image = tf.decode_raw(features['image_raw'], tf.uint8)\n    # The height and the weights are used to\n    height = tf.cast(features['height'], tf.int32)\n    width = tf.cast(features['width'], tf.int32)\n\n    # The image is reshaped since when stored as a binary format, it is flattened. Therefore, we need the\n    # height and the weight to restore the original image back.\n    image = tf.reshape(image, [height, width, 3])\n\n    annotation = tf.cast(features['annotation_raw'], tf.string)\n    t1 = tf.string_split([annotation], delimiter=',')\n    t2 = tf.reshape(t1.values, [1, -1])\n    t3 = tf.string_to_number(t2, out_type=tf.float32)\n    t_ = tf.slice(t3, begin=[0, 3], size=[1, 1])\n\n    # Note that t_ is holding a value of 1.0 or 0.0. So its a particular feature I'm interested in. \n    t_ = tf.Print(t_, data=[tf.shape(t_)], message='....')\n\n    z = tf.cond(t_[0][0] &lt; 1.0, lambda: tf.add(i, 0.0), lambda: tf.add(i, 1.0))\n\n    return z\n\ncond = lambda i: tf.equal(i, tf.constant(0.0, dtype=tf.float32))\n\nloop = tf.while_loop(cond, body, [current_image_confidence])\n\ninit_op = tf.group(tf.local_variables_initializer(),\n                   tf.global_variables_initializer())\n\nwith tf.Session() as sess:\n    sess.run(init_op)\n    sess.run(loop)\n</code></pre>\n\n<p>Finally, when trying to run the following code, it seems that the body is not executing and hence stuck in an infinite loop. And the <code>tf.Print(...)</code> in the body was not executed. </p>\n\n<p>Why this is the case?</p>\n\n<p>Any help is much appreciated!!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 68}]