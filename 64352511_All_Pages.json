[{"items": [{"tags": ["tensorflow", "keras", "tensorflow2.0"], "owner": {"account_id": 438612, "reputation": 22264, "user_id": 826983, "user_type": "registered", "accept_rate": 69, "profile_image": "https://i.stack.imgur.com/B9PSD.jpg?s=256&g=1", "display_name": "Stefan Falk", "link": "https://stackoverflow.com/users/826983/stefan-falk"}, "is_answered": false, "view_count": 2799, "answer_count": 1, "score": 0, "last_activity_date": 1646911296, "creation_date": 1602675820, "last_edit_date": 1602682643, "question_id": 64352511, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64352511/typeerror-not-json-serializable-tf-tensor-shape-dtype-float32-numpy", "title": "TypeError: (&#39;Not JSON Serializable:&#39;, &lt;tf.Tensor: shape=(), dtype=float32, numpy=123.0&gt;)", "body": "<p>I have a <em>production</em> model which is configurable over a <code>ModelConfig</code>  I wrote myself which itself is a <code>class Config(dict)</code>. In that <code>ModelConfig</code> I am setting <code>hidden_size=123</code>. The following s a simplification of my <em>production</em> model-code:</p>\n<pre class=\"lang-py prettyprint-override\"><code>class Config(dict):\n  # ..\n\n  def as_dict(self) -&gt; dict:\n    return self._serialize()\n\nclass ModelConfig(Config):\n  hidden_size: int = 123\n</code></pre>\n<p>Now, I have a custom keras Model which is implemented like this:</p>\n<pre class=\"lang-py prettyprint-override\"><code>class MyModel(keras.Model):\n\n  def __init__(self, config: ModelConfig):\n    self.config = config\n\n    self.dense = layers.Dense(config.hidden_size)\n    # ...\n\n  def get_config():\n    return self.config.as_dict()\n</code></pre>\n<p>Everything works except calling <code>MyModel#save</code>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>model.save(model_path, save_format='tf')\n</code></pre>\n<p>I am getting a <code>TypeError</code> saying:</p>\n<pre class=\"lang-none prettyprint-override\"><code>TypeError: ('Not JSON Serializable:', &lt;tf.Tensor: shape=(), dtype=float32, numpy=123.0&gt;)\n</code></pre>\n<p>I know it's <code>ModelConfig#hidden_size</code> that is being the property that's becoming a Tensor/EagerTensor here.</p>\n<p>The weird thing here is that in one of my test-scripts everything is working as intended. I created it in order to see if <code>Config</code> causes a problem on <code>save()</code> but this appears not to be the case:</p>\n<p>So the following here <strong>is working as expected</strong>:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\n\nfrom config import Config\n\n\nclass ModelConfig(Config):\n    hidden_size: int = 123\n\n\nclass MyLayer(layers.Layer):\n\n    def __init__(self, config, other=None, **kwargs):\n        super().__init__(**kwargs)\n        self.config = config\n        self.other = other if other is not None else None\n        self.dense = layers.Dense(config.hidden_size + 1)\n\n    def call(self, inputs, **kwargs):\n        x = self.other(inputs, **kwargs) if self.other is not None else inputs\n        return self.dense(x, **kwargs)\n\n\nclass MyModel(keras.Model):\n\n    def __init__(self, config: ModelConfig, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.config = config\n        self.other = MyLayer(config, other=MyLayer(config))\n        self.dense = layers.Dense(config.hidden_size)\n\n    def call(self, inputs, **kwargs):\n        x = self.dense(inputs, **kwargs)\n        return self.other(x, **kwargs)\n\n    def get_config(self):\n        return self.config.to_dict()\n\n    @tf.function(\n        input_signature=[tf.TensorSpec(shape=(None, 100))]\n    )\n    def infer(self, inputs):\n        return self.call(inputs)\n\n\ndef main():\n    fp = '/tmp/mymodel'\n    config = ModelConfig()\n    model = MyModel(config)\n    model(np.random.rand(1, 100))\n    model.save(fp, save_format='tf')\n    model = tf.saved_model.load(fp)\n    print(model.infer(np.random.rand(1, 100)))\n\n    print('All done.')\n\n\nif __name__ == '__main__':\n    main()\n</code></pre>\n<p>This means the problem is not the <code>Config</code> object but for some reason in my production-model one of its properties is causing it to fail on calling <code>save()</code>.</p>\n<p>It's probably a big shot but does anybody have an idea where to look for the issue here?</p>\n<p>In one case the property becomes a Tensor/EagerTensor which cannot be serialized (which makes sense) and in the test-script case it stays an <code>int</code> which works as intended..</p>\n<p>I also tried <code>tf.saved_model.save</code> with the same result.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 168}]