[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras"], "owner": {"account_id": 7433176, "reputation": 1256, "user_id": 5653423, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/fae09c3723ebb231b5d849574161b612?s=256&d=identicon&r=PG&f=1", "display_name": "shome", "link": "https://stackoverflow.com/users/5653423/shome"}, "is_answered": false, "view_count": 2295, "answer_count": 0, "score": 0, "last_activity_date": 1608106126, "creation_date": 1608088030, "question_id": 65316741, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65316741/function-call-stack-train-function-error", "title": "Function call stack: train_function error", "body": "<p>I have a dataset with 565 features and 10 different columns on the prediction site for predicting labels in the training model.Here is the model summary dimensions :</p>\n<pre><code>_________________________________________________________________\nModel: &quot;sequential&quot;\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #\n=================================================================\nconv1d (Conv1D)              (None, 563, 64)           256\n_________________________________________________________________\nflatten (Flatten)            (None, 36032)             0\n_________________________________________________________________\ndense (Dense)                (None, 50)                1801650\n_________________________________________________________________\ndense_1 (Dense)              (None, 50)                2550\n_________________________________________________________________\ndense_2 (Dense)              (None, 50)                2550\n_________________________________________________________________\ndense_3 (Dense)              (None, 50)                2550\n_________________________________________________________________\ndense_4 (Dense)              (None, 10)                510\n=================================================================\nTotal params: 1,810,066\nTrainable params: 1,810,066\nNon-trainable params: 0\n</code></pre>\n<p>Datatypes of the dataset and null values in each of the column :</p>\n<pre><code>0      float64\n1      float64\n2      float64\n3      float64\n4      float64\n        ...\n570    float64\n571    float64\n572    float64\n573    float64\n574    float64\nLength: 575, dtype: object\n0      0\n1      0\n2      0\n3      0\n4      0\n      ..\n570    0\n571    0\n572    0\n573    0\n574    0\nLength: 575, dtype: int64\n</code></pre>\n<p>dimensions of the dataset : (41490, 575).The error is showing as follows :</p>\n<pre><code>_________________________________________________________________\nEpoch 1/10\n^M  1/332 [..............................] - ETA: 0s - loss: 6.7792 - accuracy: 0.0100 - precision: 0.0112Traceback (most recent call last):\n  File &quot;parallelised_script_realdata2.py&quot;, line 68, in &lt;module&gt;\n    results = model.fit(train_X,train_y,validation_split = 0.2,epochs=10,batch_size = 100)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/keras/engine/training.py&quot;, line 108, in _method_wrapper\n    return method(self, *args, **kwargs)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/keras/engine/training.py&quot;, line 1098, in fit\n    tmp_logs = train_function(iterator)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/def_function.py&quot;, line 780, in __call__\n    result = self._call(*args, **kwds)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/def_function.py&quot;, line 807, in _call\n    return self._stateless_fn(*args, **kwds)  # pylint: disable=not-callable\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/function.py&quot;, line 2829, in __call__\n    return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/function.py&quot;, line 1848, in _filtered_call\n    cancellation_manager=cancellation_manager)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/function.py&quot;, line 1924, in _call_flat\n    ctx, args, cancellation_manager=cancellation_manager))\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/function.py&quot;, line 550, in call\n    ctx=ctx)\n  File &quot;/usr/local/lib64/python3.6/site-packages/tensorflow/python/eager/execute.py&quot;, line 60, in quick_execute\n    inputs, attrs, num_outputs)\ntensorflow.python.framework.errors_impl.InvalidArgumentError:  assertion failed: [predictions must be &gt;= 0] [Condition x &gt;= y did not hold element-wise:] [x (sequential/dense_4/Softmax:0) = ] [[-nan -nan -nan...]...] [y (Cast_6/x:0) = ] [0]\n         [[{{node assert_greater_equal/Assert/AssertGuard/else/_21/assert_greater_equal/Assert/AssertGuard/Assert}}]] [Op:__inference_train_function_1270]\n\nFunction call stack:\ntrain_function\n</code></pre>\n<p>Here is the code :</p>\n<pre><code>from sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv1D, Flatten\nfrom tensorflow.keras import optimizers\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nimport time\nimport tensorflow as tf\nimport pandas as pd\nimport tensorflow.keras.metrics\n\ndata = pd.read_csv('Step1_reducedfile.csv',skiprows = 1,header = None)\ndata = data.sample(frac=1).reset_index(drop=True)\ndata = data.to_numpy()\ntrain_X = data[0:data.shape[0],0:565]\ntrain_y = data[0:data.shape[0],565:data.shape[1]]\ntrain_X = train_X.reshape((train_X.shape[0], train_X.shape[1], 1))\n             \nimport random\nneurons = 50\nstrategy = tensorflow.distribute.MirroredStrategy()\nwith strategy.scope():\n    model = tf.keras.Sequential([\n      tf.keras.layers.Conv1D(64,kernel_size = 3,activation='relu',input_shape=train_X.shape[1:]),\n      tf.keras.layers.Flatten(),\n      tf.keras.layers.Dense(neurons,activation='relu'),\n      tf.keras.layers.Dense(neurons,activation='relu'),\n      tf.keras.layers.Dense(neurons,activation='relu'),\n      tf.keras.layers.Dense(neurons,activation='relu'),\n      tf.keras.layers.Dense(10, activation='softmax'),])\n    model.summary()\n    sgd = optimizers.SGD(lr=0.05, decay=1e-6, momentum=0.24, nesterov=True)\n    model.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy',tensorflow.keras.metrics.Precision()])\n    \n    model.summary()\n    results = model.fit(train_X,train_y,validation_split = 0.2,epochs=10,batch_size = 100)\n    print(results)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 49}]