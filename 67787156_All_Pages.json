[{"items": [{"tags": ["python", "tensorflow", "keras", "neural-network", "subclassing"], "owner": {"account_id": 17798480, "reputation": 5649, "user_id": 12925831, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/L0dY4.jpg?s=256&g=1", "display_name": "crispengari", "link": "https://stackoverflow.com/users/12925831/crispengari"}, "is_answered": true, "view_count": 204, "accepted_answer_id": 67787639, "answer_count": 2, "score": 0, "last_activity_date": 1622545326, "creation_date": 1622543276, "question_id": 67787156, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67787156/attributeerror-layer-mnist-model-35-has-no-inbound-nodes-tensorflow-keras-subc", "title": "AttributeError: Layer mnist_model_35 has no inbound nodes. Tensorflow keras subclassing API", "body": "<p>I'm doing keras subclassing with the mnist dataset. I was able to make it with <code>Sequantial</code> and <code>Functional</code> api's. But now when i call <code>model.fit()</code> on my subclass i get this error:</p>\n<pre class=\"lang-py prettyprint-override\"><code>AttributeError: Layer mnist_model_35 has no inbound nodes.\n</code></pre>\n<p>This is my code:</p>\n<ol>\n<li><strong>MNIstModel</strong></li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>class MNISTModel(keras.Model):\n  def __init__(self):\n    super().__init__()\n    self.flatten_layer = keras.layers.Flatten()\n    self.dense_1 = keras.layers.Dense(64, activation='relu')\n    self.dense_2 = keras.layers.Dense(128, activation='relu')\n    self.relu = keras.activations.relu\n    self.ouput = keras.layers.Dense(10, activation='softmax')\n    self.softmax = keras.activations.softmax\n\n  def call(self, x):\n    x = self.flatten_layer(x)\n    x = self.dense_1(x)\n    x = self.dense_2(x)\n    x = self.output(x)\n    return x\n  def model(self):\n    x = keras.layers.Input(shape=(28*28,))\n    return keras.Model(inputs=[x], outputs=self.call(x))\n\n</code></pre>\n<ol start=\"2\">\n<li><strong>Trainning my model</strong>:</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>sub_model = MNISTModel()\nsub_model_1 = Model(sub_model)\nsub_model.compile(\n    loss = keras.losses.SparseCategoricalCrossentropy(from_logits=False),\n    optimizer = keras.optimizers.Adam(learning_rate=0.001),\n    metrics = keras.metrics.SparseCategoricalAccuracy()           \n)\nsub_model.fit(X_train_tensors, y_train_tensors, epochs=2, verbose=1, batch_size=32,\n          validation_data=(X_test_tensors, y_test_tensors),\n          validation_batch_size=16)\n\nsub_model.model().summary()\n</code></pre>\n<ol start=\"3\">\n<li>How i loaded and preprocess my <code>mnist</code> dataset.</li>\n</ol>\n<pre class=\"lang-py prettyprint-override\"><code>(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n\ndef normalize(image):\n  image = tf.convert_to_tensor(image.astype('float32'))/255\n  return image\n\nX_train_tensors =tf.convert_to_tensor(list(map(normalize, X_train)))\nX_test_tensors = tf.convert_to_tensor(list(map(normalize, X_test)))\n\ny_test_tensors = tf.convert_to_tensor(y_test)\ny_train_tensors = tf.convert_to_tensor(y_train)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 214}]