[{"items": [{"tags": ["python-3.x", "machine-learning", "nlp", "tensorflow2.0", "tf.keras"], "owner": {"account_id": 16546644, "reputation": 33, "user_id": 11956015, "user_type": "registered", "profile_image": "https://graph.facebook.com/885881928446209/picture?type=large", "display_name": "Serj Ionescu", "link": "https://stackoverflow.com/users/11956015/serj-ionescu"}, "is_answered": true, "view_count": 1312, "answer_count": 1, "score": 1, "last_activity_date": 1623157631, "creation_date": 1615296533, "question_id": 66547831, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66547831/how-to-make-custom-validation-step-in-tensorflow-2-tensorflow-2-keras", "title": "How to make custom validation_step in tensorflow 2 Tensorflow 2 / Keras?", "body": "<p>I have a question regarding the validation Data.\nI have this neural network and I divided my data into train_generator, val_generator, test_generator.</p>\n<p>I made a custom model with a custom fit.</p>\n<pre><code>class MyModel(tf.keras.Model):\n     def __init__(self):\n     def __call__(.....)\n     def train_step(....)\n</code></pre>\n<p>then I have:</p>\n<pre><code> train_generator = DataGenerator(....)\n val_generator = DataGenerator(....)\n test_generator = DataGenerator(....)\n</code></pre>\n<p>then :</p>\n<pre><code> model = MyModel()\n model.compile(optimizer=keras.optimizers.Adam(clipnorm=5.),\n               metrics=[&quot;accuracy&quot;])\n model.fit(train_generator, validation_data = val_generator, epochs=40)\n</code></pre>\n<p>ok and the program gives me no errors\nBut my question is : how can I know what happens with my validation_data ?\nIs it processed the same way as the train_data ( train_generator ) in the train_step function ?\nOr do I need to specify how to process the validation data ?</p>\n<p>If it helps I will also live MyModel class</p>\n<pre><code>class MyModel(tf.keras.Model):\ndef __init__(self):\n    super(MyModel2, self).__init__()\n    self.dec2 = Decoder2()\n\ndef __call__(self, y_hat, **kwargs): \n\n    print(y_hat.shape)\n\n    z_hat = self.dec2(y_hat)\n    return z_hat\n\ndef train_step(self, dataset): \n    with tf.GradientTape() as tape:\n\n        y_hat = dataset[0]\n        z_true = dataset[1]\n\n        z_pred = self(y_hat, training=True)\n\n        #print(&quot;This is z_true : &quot;, z_true.shape)\n        #print(&quot;This is z_pred : &quot;, z_pred.shape)\n        loss = tf.reduce_mean(tf.abs(tf.cast(z_pred, tf.float64) - tf.cast(z_true, tf.float64)))\n        print(&quot;loss: &quot;, loss)\n        global_loss.append(loss)\n\n    # Compute gradients. TRE SA FAC GRADIENT CLIPPING\n    trainable_vars = self.trainable_variables\n    gradients = tape.gradient(loss, trainable_vars)\n    # Update weights\n    self.optimizer.apply_gradients(zip(gradients, trainable_vars))\n    # Update metrics (includes the metric that tracks the loss)\n    self.compiled_metrics.update_state(z_true, z_pred)\n    # Return a dict mapping metric names to current value\n    return {m.name: m.result() for m in self.metrics}\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 246}]