[{"items": [{"tags": ["python", "tensorflow", "lstm", "bayesian"], "owner": {"user_type": "does_not_exist", "display_name": "user12682643"}, "is_answered": false, "view_count": 1071, "answer_count": 0, "score": 2, "last_activity_date": 1583680586, "creation_date": 1583680586, "question_id": 60588916, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60588916/attributeerror-module-tensorflow-has-no-attribute-log-error", "title": "AttributeError: module &#39;tensorflow&#39; has no attribute &#39;log&#39; error", "body": "<p>I used ZhuSuan library to build bayesian lstm cell. I used the code that was in paper of you:ZhuSuan: A Library for Bayesian Deep python. But I got an error:</p>\n\n<p>AttributeError: module 'tensorflow' has no attribute 'log'\nCould someone help me to solve this problem?</p>\n\n<pre><code>  class BayesianLSTMCell(object):\n    def __init__(self, num_units, forget_bias=1.0):\n        self._forget_bias = forget_bias\n        w_mean = tf.zeros([2 * num_units + 1, 4 * num_units])\n        self._w = zs.Normal('w', w_mean, std=1., group_ndims=2)\n    def __call__(self, state, inputs):\n        c, h = state\n        batch_size = tf.shape(inputs)[0]\n        linear_in = tf.concat([inputs, h, tf.ones([batch_size, 1])], axis=1)\n        linear_out = tf.matmul(linear_in, self._w)\n        # i = input_gate, j = new_input, f = forget_gate, o = output_gate\n        i, j, f, o = tf.split(value=linear_out, num_or_size_splits=4, axis=1)\n        new_c = (c * tf.sigmoid(f + self._forget_bias) +\n                 tf.sigmoid(i) * tf.tanh(j))\n        new_h = tf.tanh(new_c) * tf.sigmoid(o)\n        return new_c, new_h\ndef bayesian_rnn(cell, inputs, seq_len):\n    batch_size = tf.shape(inputs)[0]\n    initializer = (tf.zeros([batch_size, 128]), tf.zeros([batch_size, 128]))\n    c_list, h_list = tf.scan(cell, inputs, initializer=initializer)\n    relevant_outputs = tf.gather_nd(\n    h_list, tf.stack([seq_len - 1, tf.range(batch_size)], axis=1))\n    logits = tf.squeeze(tf.layers.dense(relevant_outputs, 1), -1)\n    return logits \nseq_len=5\nwith zs.BayesianNet() as model:\n    cell = BayesianLSTMCell(128, forget_bias=0.)\n    logits = bayesian_rnn(cell, b, seq_len)\n    _ = zs.Bernoulli(Y, logits, dtype=tf.float32\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 288}]