[{"items": [{"tags": ["keras", "deep-learning", "conv-neural-network", "tf.keras", "vgg-net"], "owner": {"user_type": "does_not_exist", "display_name": "user11173832"}, "is_answered": false, "view_count": 642, "answer_count": 0, "score": 0, "last_activity_date": 1573522027, "creation_date": 1573452429, "last_edit_date": 1573522027, "question_id": 58796289, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/58796289/invalid-argument-you-must-feed-a-value-for-placeholder-tensor-vgg16-input-4-w", "title": "Invalid argument: You must feed a value for placeholder tensor &#39;vgg16_input_4&#39; with dtype float and shape [?,32,32,3]", "body": "<p>I got following error <br/></p>\n\n<blockquote>\n  <p>InvalidArgumentError: 2 root error(s) found.   (0) Invalid argument:\n  You must feed a value for placeholder tensor 'vgg16_input_4' with\n  dtype float and shape [?,32,32,3]      [[{{node vgg16_input_4}}]]<br>\n  [[dense_6/Softmax/_1775]]   (1) Invalid argument: You must feed a\n  value for placeholder tensor 'vgg16_input_4' with dtype float and\n  shape [?,32,32,3]      [[{{node vgg16_input_4}}]] 0 successful\n  operations. 0 derived errors ignored.</p>\n</blockquote>\n\n<p>and following code <br/></p>\n\n<pre><code>def show_result(n):\n\n    samples = []\n    for i in range(n):\n        original_img = x_test[i]\n        print('original_img-&gt;',original_img.shape)\n\n        img_array = np.expand_dims(original_img, 0)\n        #img_array = original_img\n\n\n        print('img_arrray-&gt;', img_array.shape)\n        #tf.image.convert_image_dtype(img_array, dtype=tf.float16, saturate=False)\n\n        get_output = K.function([model.layers[0].input], [model.layers[-3].output, model.layers[-1].output])\n        [conv_outputs, predictions] = get_output([img_array])\n\n        conv_outputs = conv_outputs[0, :, :, :]\n        class_weights = model.layers[-1].get_weights()[0]\n\n        cam = np.zeros(dtype = np.float32, shape = conv_outputs.shape[0:2])\n</code></pre>\n\n<p>the shape of the image is </p>\n\n<blockquote>\n  <p>original_img-> (32, 32, 3) img_arrray-> (1, 32, 32, 3)</p>\n</blockquote>\n\n<pre><code>model = models.Sequential()\n\nbase_model = VGG16(include_top = False, input_shape=(32, 32, 3))\nbase_model.layers.pop()\nmodel.add(base_model)\nmodel.add(layers.ZeroPadding2D(padding=(1,1)))\nmodel.add(layers.Conv2D(filters=1024, kernel_size=(3,3),activation='relu'))\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dense(10,activation='softmax'))\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 28}]