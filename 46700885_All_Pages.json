[{"items": [{"tags": ["python", "tensorflow"], "owner": {"user_type": "does_not_exist", "display_name": "user7830303"}, "is_answered": true, "view_count": 1263, "accepted_answer_id": 46709032, "answer_count": 2, "score": 0, "last_activity_date": 1523330139, "creation_date": 1507778567, "question_id": 46700885, "content_license": "CC BY-SA 3.0", "link": "https://stackoverflow.com/questions/46700885/python-typeerror-float-object-cannot-be-interpreted-as-an-index", "title": "Python TypeError: &#39;float&#39; object cannot be interpreted as an index", "body": "<p>The following code uses audio files to create a matrix of features in <code>tensorflow</code>:</p>\n\n<pre><code>import tensorflow as tf\n\ndirectory = \"audio_dataset/*.wav\"\n\nfilenames = tf.train.match_filenames_once(directory)\n\ninit = (tf.global_variables_initializer(), tf.local_variables_initializer())\n\ncount_num_files = tf.size(filenames)\nfilename_queue = tf.train.string_input_producer(filenames)\nreader = tf.WholeFileReader()\nfilename, file_contents = reader.read(filename_queue)\n\nwith tf.Session() as sess:\n    sess.run(init)\n    num_files = sess.run(count_num_files)\n\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n\n    for i in range(num_files):\n        audio_file = sess.run(filename)\n        print(audio_file)\n</code></pre>\n\n<p>this is a toolkit that converts audio from time to frequency domain:    </p>\n\n<pre><code>from bregman.suite import *\n\n\nchromo = tf.placeholder(tf.float32)\nmax_freqs = tf.argmax(chromo, 0)\n\n\ndef get_next_chromogram(sess):\n    audio_file = sess.run(filename)\n    F = Chromagram(audio_file, nfft=16384, wfft=8192, nhop=2205)\n    return F.X\n\n\ndef extract_feature_vector(sess, chromo_data):\n    num_features, num_samples = np.shape(chromo_data)\n    freq_vals = sess.run(max_freqs, feed_dict={chromo: chromo_data})\n    hist, bins = np.histogram(freq_vals, bins=range(num_features + 1))\n    return hist.astype(float) / num_samples\n\n\ndef get_dataset(sess):\n    num_files = sess.run(count_num_files)\n    coord = tf.train.Coordinator()\n    threads = tf.train.start_queue_runners(coord=coord)\n    xs = []\n    for _ in range(num_files):\n        chromo_data = get_next_chromogram(sess)\n        x = [extract_feature_vector(sess, chromo_data)]\n        x = np.matrix(x)\n        if len(xs) == 0:\n            xs = x\n        else:\n            xs = np.vstack((xs, x))\n    return xs\n</code></pre>\n\n<p>this clusters the data around two centroids:    </p>\n\n<pre><code>k = 2\nmax_iterations = 100\n\ndef initial_cluster_centroids(X, k):\n    return X[0:k, :]\n\ndef assign_cluster(X, centroids):\n    expanded_vectors = tf.expand_dims(X, 0)\n    expanded_centroids = tf.expand_dims(centroids, 1)\n    distances = tf.reduce_sum(tf.square(tf.subtract(expanded_vectors, expanded_centroids)), 2)\n    mins = tf.argmin(distances, 0)\n    return mins\n\ndef recompute_centroids(X, Y):\n    sums = tf.unsorted_segment_sum(X, Y, k)\n    counts = tf.unsorted_segment_sum(tf.ones_like(X), Y, k)\n    return sums / counts\n\nwith tf.Session() as sess:\n    sess.run(init)\n    X = get_dataset(sess)\n    centroids = initial_cluster_centroids(X, k)\n    i, converged = 0, False\n    while not converged and i &lt; max_iterations:\n        i += 1\n        Y = assign_cluster(X, centroids)\n        centroids = sess.run(recompute_centroids(X, Y))\n    print(centroids)\n</code></pre>\n\n<p>but Im getting the following traceback:</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"components.py\", line 776, in &lt;module&gt;\n    X = get_dataset(sess)\n  File \"ccomponents.py\", line 745, in get_dataset\n    chromo_data = get_next_chromogram(sess)\n  File \"coffee_components.py\", line 728, in get_next_chromogram\n    F = Chromagram(audio_file, nfft=16384, wfft=8192, nhop=2205)\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features.py\", line 143, in __init__\n    Features.__init__(self, arg, feature_params)\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features_base.py\", line 70, in __init__\n    self.extract()\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features_base.py\", line 213, in extract\n    self.extract_funs.get(f, self._extract_error)()\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features_base.py\", line 711, in _chroma\n    if not self._cqft():\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features_base.py\", line 588, in _cqft\n    self._make_log_freq_map()\n  File \"/Volumes/Dados/Documents/Education/Programming/Machine Learning/Manning/book/BregmanToolkit-master/bregman/features_base.py\", line 353, in _make_log_freq_map\n    mxnorm = P.empty(self._cqtN) # Normalization coefficients        \nTypeError: 'float' object cannot be interpreted as an index\n</code></pre>\n\n<p>as far as I'm concerned, <code>range</code>is an <code>int</code>and not a <code>float</code>.</p>\n\n<p>could someone please point me the error here?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 112}]