[{"items": [{"tags": ["python", "tensorflow", "keras", "out-of-memory", "tensor"], "owner": {"account_id": 16210555, "reputation": 79, "user_id": 11704700, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/9534d0c54edcb252a3dffb5c7fe438e3?s=256&d=identicon&r=PG&f=1", "display_name": "jost", "link": "https://stackoverflow.com/users/11704700/jost"}, "is_answered": true, "view_count": 128, "answer_count": 2, "score": 0, "last_activity_date": 1623833900, "creation_date": 1623790054, "last_edit_date": 1623829137, "question_id": 67993309, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67993309/what-is-the-difference-between-a-multiplication-eg-tf-math-multiply-and-a-m", "title": "What is the difference between a multiplication (eg. tf.math.multiply()) and a multiplication layer (eg. tf.keras.layers.multiply())?", "body": "<p>I thought that <code>tf.keras.layers.multiply()</code> was a wrapper for element-wise multiplication to use in a model. But it seems to behave different to a normal multiplication like <code>tf.math.multiply()</code>.<br />\nThe normal multiplication works as expected for large data shapes whereas the layer leads to an out of memory error. The multiply layer tries to allocate a tensor of shape[input_shape, input_shape]. This leads to the out of memory error.</p>\n<p>Why does it do this when a element-wise multiplication using the other function works without allocating that much memory? What is the difference between the function and the layer version of the function?</p>\n<p>EDIT:\ncode example for <code>tf.math.multiply()</code></p>\n<pre><code>random1 = np.random.random((960000,))\nrandom2 = np.random.random((960000,))\nmultiplied = tf.math.multiply(random1, random2)\n</code></pre>\n<p>this runs as expected.</p>\n<p>code example for <code>tf.keras.multiply()</code></p>\n<pre><code>random1 = np.random.random((960000,))\nrandom2 = np.random.random((960000,))\ninputs = tf.keras.layers.Input(shape=(960000,))\nout = tf.keras.layers.multiply((inputs, random2))\n\nmodel = tf.keras.Model(inputs=inputs, outputs=out)\ntest = model(random1)\n</code></pre>\n<p>this leads to <code>ResourceExhaustedError: OOM when allocating tensor with shape[960000,960000]...</code></p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 211}]