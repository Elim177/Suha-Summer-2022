[{"items": [{"tags": ["python-3.x", "tensorflow", "tensorflow2.0", "checkpoint"], "owner": {"account_id": 9188928, "reputation": 822, "user_id": 6830120, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/ec11d68d09d2000b715f18651a0824b7?s=256&d=identicon&r=PG&f=1", "display_name": "S.Perera", "link": "https://stackoverflow.com/users/6830120/s-perera"}, "is_answered": true, "view_count": 253, "accepted_answer_id": 65008282, "answer_count": 1, "score": 0, "last_activity_date": 1606319833, "creation_date": 1606226293, "question_id": 64988038, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64988038/tensorflow-checkpoint-restoring-learning-rate", "title": "TensorFlow Checkpoint restoring Learning rate", "body": "<p>I am trying to use <code>TensorFlow checkpoint</code>, everything is working well except for the <code>Learning rate</code>. It is getting re-initialized every time I run and does not restore from the previous.</p>\n<p>Here is a toy example I am trying to replicate the problem:</p>\n<pre><code>import numpy as np\nimport tensorflow as tf\n  \n\nX = tf.range(10.)\nY = 50.*X\n\nclass CGMM(tf.Module):\n    def __init__(self):\n        super(CGMM, self).__init__(name='CGMM')\n        self.beta =  tf.Variable(1. , dtype=np.float32)\n        self.learning_rate =  tf.Variable(1. , dtype=np.float32)\n\n    @tf.function\n    def objfun(self):\n        beta = self.beta\n        obj = tf.reduce_mean(tf.square(beta*self.X - self.Y))\n        return obj\n\n    def build_model(self,X,Y,decay_steps):\n\n        self.X,self.Y=X,Y\n        starter_learning_rate = 0.05 #0.05\n        global_step = tf.Variable(1, trainable=False)\n        self.learning_rate = tf.compat.v1.train.exponential_decay(starter_learning_rate, global_step,decay_steps, 0.96, staircase=True)\n\n        optimizer = tf.compat.v1.train.RMSPropOptimizer(self.learning_rate)\n\n        ckpt = tf.train.Checkpoint(step=tf.Variable(1) ,model=self, optimizer=optimizer)\n        manager = tf.train.CheckpointManager(ckpt, './tf_ckpts_cg', max_to_keep=3)\n\n        ckpt.restore(manager.latest_checkpoint)\n        if manager.latest_checkpoint:\n            print(&quot;Restored from {}&quot;.format(manager.latest_checkpoint))\n        else:\n            print(&quot;Initializing from scratch.&quot;)\n\n        for i in range(500):\n            optimizer.minimize(self.objfun, global_step=global_step,  var_list =  [self.beta])\n            loss, beta, learning_rate = self.objfun(), self.beta, self.learning_rate().numpy()\n\n            ckpt.step.assign_add(1)\n            if (int(ckpt.step)-1) % 100 == 0:\n                save_path = manager.save()\n                print(&quot;Saved checkpoint for step {}: {}&quot;.format(int(ckpt.step), save_path))\n                print(&quot;learning_rate : &quot; + str(learning_rate))\n\n        return beta\n\n\nmodel = CGMM()\nopt_beta = model.build_model(X,Y,100)\n</code></pre>\n<p>Results 1st run:</p>\n<pre><code>Initializing from scratch.\nSaved checkpoint for step 101: ./tf_ckpts_cg/ckpt-1\nlearning_rate : 0.048\nSaved checkpoint for step 201: ./tf_ckpts_cg/ckpt-2\nlearning_rate : 0.04608\nSaved checkpoint for step 301: ./tf_ckpts_cg/ckpt-3\nlearning_rate : 0.044236798\nSaved checkpoint for step 401: ./tf_ckpts_cg/ckpt-4\nlearning_rate : 0.042467322\nSaved checkpoint for step 501: ./tf_ckpts_cg/ckpt-5\nlearning_rate : 0.04076863\n</code></pre>\n<p>Results 2nd run:</p>\n<pre><code>Restored from ./tf_ckpts_cg/ckpt-5\nSaved checkpoint for step 601: ./tf_ckpts_cg/ckpt-6\nlearning_rate : 0.048\nSaved checkpoint for step 701: ./tf_ckpts_cg/ckpt-7\nlearning_rate : 0.04608\nSaved checkpoint for step 801: ./tf_ckpts_cg/ckpt-8\nlearning_rate : 0.044236798\nSaved checkpoint for step 901: ./tf_ckpts_cg/ckpt-9\nlearning_rate : 0.042467322\nSaved checkpoint for step 1001: ./tf_ckpts_cg/ckpt-10\nlearning_rate : 0.04076863\n</code></pre>\n<p>As you can see the same <code>Learning Rate</code> is repeated on both the runs but other variables are working well. Can you please help me to fix this?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 136}]