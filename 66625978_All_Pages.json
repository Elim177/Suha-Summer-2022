[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 12776926, "reputation": 181, "user_id": 11043577, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c8e72e2134d3c83bd9fbc62bfb2464c4?s=256&d=identicon&r=PG", "display_name": "Naman Bansal", "link": "https://stackoverflow.com/users/11043577/naman-bansal"}, "is_answered": false, "view_count": 95, "answer_count": 0, "score": 1, "last_activity_date": 1615733992, "creation_date": 1615733992, "question_id": 66625978, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66625978/using-tf-custom-gradient-to-calculate-a-taylors-series-approximation", "title": "Using tf.custom_gradient to calculate a Taylor&#39;s series approximation", "body": "<p>I am supposed to calculate the Taylor series approximation of the function <code>cos(x) + 1</code> using a TensorFlow custom gradient.</p>\n<p>I wrote the following code:</p>\n<pre><code>def approx_cos_p1(x, n=7, dtype=tf.float32):\n    &quot;&quot;&quot;Return the approximation of cos(x) + 1 using a taylor/series expansion up to order 7&quot;&quot;&quot;\n\n    result = tf.constant(2, dtype)\n\n    for i in range(1, n//2+1):\n        if i % 2 == 1:\n            num=tf.math.pow(x, i*2)\n\n            den=math.factorial(i*2)\n\n            result=tf.math.subtract(result,tf.math.divide(num,den))\n\n        else:\n            num=tf.math.pow(x, i*2)\n            \n\n            den=math.factorial(i*2)\n\n            result=tf.math.add(result,tf.math.divide(num,den))\n\n    return result\n\n@tf.custom_gradient\ndef approx_cos_p1_custom_grad(x):\n  def backward(dy):\n    return approx_cos_p1(x)\n  return x, backward\n\nx=tf.Variable(3.0,dtype=tf.float32)\n\nwith tf.GradientTape(persistent=True) as t:\n  output=approx_cos_p1_custom_grad(x)\n\nprint(t.gradient(output,x))\n</code></pre>\n<p>But according to the Tensorflow documentation, tf.custom_gradients should be used as follows:</p>\n<pre><code>#Establish an identity operation, but clip during the gradient pass\n@tf.custom_gradient\ndef clip_gradients(y):\n  def backward(dy):\n    return tf.clip_by_norm(dy, 0.5)\n  return y, backward\n\nv = tf.Variable(2.0)\nwith tf.GradientTape() as t:\n  output = clip_gradients(v * v)\nprint(t.gradient(output, v))  # calls &quot;backward&quot;, which clips 4 to 2\n</code></pre>\n<p>The <code>approx_cos_p1()</code> function works perfectly.</p>\n<p>The problem here is that the <code>dy</code> parameter in the function <code>backward()</code> is not being passed in <code>approx_cos_p1()</code> which is not as per the Tensorflow documentation. But I get the desired output as <code>-3.15</code>.</p>\n<p>When I pass <code>dy</code> in <code>approx_cos_p1()</code>, I get an undesired output <code>1.14</code>.</p>\n<p>Is my implementation of the function correct?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 241}]