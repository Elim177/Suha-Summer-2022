[{"items": [{"tags": ["python", "tensorflow", "keras", "gradient"], "owner": {"account_id": 17677172, "reputation": 35, "user_id": 12831920, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-mLnNImk5mH8/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rcJWvupQCLXMc-5JuOw-zXMDQsbPA/photo.jpg?sz=256", "display_name": "Abdelbaki Souid", "link": "https://stackoverflow.com/users/12831920/abdelbaki-souid"}, "is_answered": false, "view_count": 351, "answer_count": 0, "score": 0, "last_activity_date": 1622938669, "creation_date": 1622784451, "last_edit_date": 1622938669, "question_id": 67831913, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67831913/how-to-define-a-grad-cam-function-for-tf2-0-keras-cnn-for-image-classification", "title": "How to define a grad cam function for TF2.0+ keras CNN for image classification?", "body": "<p>I'm trying to run CNN classifier on TF2.3. But I have a problem with The grad cam (saliency). I got the following error:</p>\n<p><code>tf.gradients</code> is not supported when eager execution is enabled. Use <code>tf.GradientTape</code> instead.</p>\n<p>I saw there is some proposed solution, but I'm trying to use grad cam as a function.</p>\n<p>This is my function :</p>\n<pre><code>def grad_cam(input_model, image, cls, layer_name, H=320, W=320):\n    &quot;&quot;&quot;GradCAM method for visualizing input saliency.&quot;&quot;&quot;    \n    y_c = input_model.output[0, cls]\n    conv_output = input_model.get_layer(layer_name).output\n    \n    grads = gtape.gradient(y_c, conv_output)[0]\n\n    gradient_function = K.function([input_model.input], [conv_output, grads])\n\n    output, grads_val = gradient_function([image])\n    output, grads_val = output[0, :], grads_val[0, :, :, :]\n\n    weights = np.mean(grads_val, axis=(0, 1))\n    cam = np.dot(output, weights)\n\n    # Process CAM\n    cam = cv2.resize(cam, (W, H), cv2.INTER_LINEAR)\n    cam = np.maximum(cam, 0)\n    cam = cam / cam.max()\n    return cam\n\n\ndef compute_gradcam(model, img, image_dir, df, labels, selected_labels,\n                    layer_name='bn'):    \n    preprocessed_input = load_image(img, image_dir, df)\n    predictions = model.predict(preprocessed_input)\n\n    print(&quot;Loading original image&quot;)\n    plt.figure(figsize=(15, 10))\n    plt.subplot(151)\n    plt.title(&quot;Original&quot;)\n    plt.axis('off')\n    plt.imshow(load_image(img, image_dir, df, preprocess=False), cmap='gray')\n\n    j = 1\n    for i in range(len(labels)):\n        if labels[i] in selected_labels:\n            print(f&quot;Generating gradcam for class {labels[i]}&quot;)\n            gradcam = grad_cam(model, preprocessed_input, i, layer_name)\n            plt.subplot(151 + j)\n            plt.title(f&quot;{labels[i]}: p={predictions[0][i]:.3f}&quot;)\n            plt.axis('off')\n            plt.imshow(load_image(img, image_dir, df, preprocess=False),\n                       cmap='gray')\n            plt.imshow(gradcam, cmap='jet', alpha=min(0.5, predictions[0][i]))\n            j += 1\n</code></pre>\n<p>This code is from an online course.\nI appreciate the help.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 214}]