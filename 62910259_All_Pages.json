[{"items": [{"tags": ["tensorflow", "keras"], "owner": {"account_id": 3948330, "reputation": 5043, "user_id": 3259896, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/641c30a7b383022f22b53c8cedb04e3f?s=256&d=identicon&r=PG&f=1", "display_name": "SantoshGupta7", "link": "https://stackoverflow.com/users/3259896/santoshgupta7"}, "is_answered": false, "view_count": 172, "answer_count": 0, "score": 0, "last_activity_date": 1594808298, "creation_date": 1594800247, "last_edit_date": 1594808298, "question_id": 62910259, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62910259/how-to-set-keras-layer-to-include-none-in-return-tuple", "title": "How to set Keras layer to include `None` in return tuple", "body": "<p>I am trying to make a Keras layer that returns <code>None</code> in its tuple.</p>\n<pre><code>class transformer_IO(tf.keras.layers.Layer):\n  def call(self, input):\n    return (input, None, None, None)\n</code></pre>\n<p>However, when I try to compile with this error, I get</p>\n<blockquote>\n<p>AttributeError: 'NoneType' object has no attribute 'shape'</p>\n</blockquote>\n<p>Here is an example</p>\n<pre><code>!pip install transformers\nfrom transformers import TFBertModel\nimport tensorflow as tf\nfrom copy import deepcopy\n\nclass transformer_IO(tf.keras.layers.Layer):\n  def call(self, input):\n    return (input, None, None, None)\n    \ndef get_functional_model_protoFix():\n    bioRoberta_f = TFBertModel.from_pretrained('bert-base-uncased', from_pt=True)\n\n    Q_Tlayer0_f = deepcopy(bioRoberta_f.layers[0].encoder.layer[8])\n    Q_Tlayer0_f._name = Q_Tlayer0_f._name + 'Query_f'\n\n    Q_Tlayer1_f = deepcopy(bioRoberta_f.layers[0].encoder.layer[9])\n    Q_Tlayer1_f._name = Q_Tlayer1_f._name + 'Query_f'\n\n    transIO = transformer_IO()\n\n    inputIds = tf.keras.Input(shape=(None,), dtype=tf.int32, name='input_Q') \n    \n    Q_outputs = bioRoberta_f(inputIds)[0]\n    Q_outputs = transIO(Q_outputs)\n    Q_outputs = Q_Tlayer0_f(Q_outputs)[0]\n    Q_outputs = transIO(Q_outputs)\n    Q_outputs = Q_Tlayer1_f(Q_outputs)[0]\n\n    modelNew = tf.keras.Model(inputs=inputIds, outputs=Q_outputs)\n\n    return modelNew\n\nmodel_functional = get_functional_model_protoFix()\nmodel_functional.compile(loss=loss_fn,\n                optimizer=tfa.optimizers.AdamW(weight_decay=1e-4, learning_rate=1e-5, \n                                                epsilon=1e-06))\n</code></pre>\n<p>Full error message</p>\n<pre><code>---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n&lt;ipython-input-35-a029c18cecf9&gt; in &lt;module&gt;()\n----&gt; 1 model_functional_new = get_functional_model_protoFix()\n      2 model_functional_new.compile(loss=loss_fn,\n      3                 optimizer=tfa.optimizers.AdamW(weight_decay=1e-4, learning_rate=1e-5, \n      4                                                 epsilon=1e-06))\n\n7 frames\n&lt;ipython-input-34-693ee085f848&gt; in get_functional_model_protoFix()\n     13 \n     14     Q_outputs = bioRoberta_f(inputIds)[0]\n---&gt; 15     Q_outputs = transIO(Q_outputs)\n     16     Q_outputs = Q_Tlayer0_f(Q_outputs)[0]\n     17     Q_outputs = transIO(Q_outputs)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, *args, **kwargs)\n    952               kwargs.pop('mask')\n    953             inputs, outputs = self._set_connectivity_metadata_(\n--&gt; 954                 inputs, outputs, args, kwargs)\n    955           self._handle_activity_regularization(inputs, outputs)\n    956           self._set_mask_metadata(inputs, outputs, input_masks)\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _set_connectivity_metadata_(self, inputs, outputs, args, kwargs)\n   2312     # This updates the layer history of the output tensor(s).\n   2313     self._add_inbound_node(\n-&gt; 2314         input_tensors=inputs, output_tensors=outputs, arguments=arguments)\n   2315     return inputs, outputs\n   2316 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/base_layer.py in _add_inbound_node(self, input_tensors, output_tensors, arguments)\n   2342         input_tensors=input_tensors,\n   2343         output_tensors=output_tensors,\n-&gt; 2344         arguments=arguments)\n   2345 \n   2346     # Update tensor history metadata.\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/node.py in __init__(self, outbound_layer, inbound_layers, node_indices, tensor_indices, input_tensors, output_tensors, arguments)\n    108     self.input_shapes = nest.map_structure(backend.int_shape, input_tensors)\n    109     # Nested structure of shape tuples, shapes of output_tensors.\n--&gt; 110     self.output_shapes = nest.map_structure(backend.int_shape, output_tensors)\n    111 \n    112     # Optional keyword arguments to layer's `call`.\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/nest.py in map_structure(func, *structure, **kwargs)\n    615 \n    616   return pack_sequence_as(\n--&gt; 617       structure[0], [func(*x) for x in entries],\n    618       expand_composites=expand_composites)\n    619 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/nest.py in &lt;listcomp&gt;(.0)\n    615 \n    616   return pack_sequence_as(\n--&gt; 617       structure[0], [func(*x) for x in entries],\n    618       expand_composites=expand_composites)\n    619 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py in int_shape(x)\n   1201   &quot;&quot;&quot;\n   1202   try:\n-&gt; 1203     shape = x.shape\n   1204     if not isinstance(shape, tuple):\n   1205       shape = tuple(shape.as_list())\n\nAttributeError: 'NoneType' object has no attribute 'shape'\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 210}]