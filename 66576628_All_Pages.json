[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 20476513, "reputation": 21, "user_id": 15025730, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/d005dc43e5ead5133c431149bf050b2e?s=256&d=identicon&r=PG&f=1", "display_name": "mik213", "link": "https://stackoverflow.com/users/15025730/mik213"}, "is_answered": false, "view_count": 88, "answer_count": 0, "score": 1, "last_activity_date": 1615445092, "creation_date": 1615438024, "last_edit_date": 1615445092, "question_id": 66576628, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66576628/tensorflow-how-to-modify-tensors", "title": "Tensorflow - how to modify tensors", "body": "<p>I am trying to train a ResNet50 classifier using Tensorflow</p>\n<p>Let's say there are 10 classes (label 0-9) and current label is 7. <br>The one-hot encoding of this label will be <code>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0]</code>.<br> However, I want to modify this label to be <code>[0, 0, 0, 0, 0, 0.1, 0.8, 1, 0.8, 0.1]</code> so the network is punished less when it guesses 6 or 8 when its supposed to true label is 7.</p>\n<p>I am using tensorflow.keras.preprocessing.image.ImageDataGenerator and I wasn't sure how to modify the labels there so I decided to modify the labels in my training loop.</p>\n<p>Train loop:</p>\n<pre><code>num_train_batches = len(train_ds)\nnum_train_step = 0\nfor images, labels in train_ds:\n    train_step(images, labels)\n    num_train_step += 1\n    if num_train_step==num_train_batches:\n        break\n</code></pre>\n<p>Train step:</p>\n<pre><code>@tf.function\ndef train_step(images, labels):\n    with tf.GradientTape() as tape:\n        preds = model(images, training=True)\n        loss = my_loss(labels, preds)\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    # update metrics\n    train_loss(loss)\n    train_accuracy(labels, preds)\n</code></pre>\n<p>my_loss: one hot encoding labels and applying my_labelize to each onehot encoded label</p>\n<pre><code>def my_loss(labels, preds): # labels is not one hot encoded\n    x = 0\n    oh_labels = tf.one_hot(K.cast(labels, dtype='int32'), 10, dtype=tf.float32)\n    my_labels = tf.map_fn(fn=my_labelize, elems=oh_labels)\n\n    loss = tf.nn.softmax_cross_entropy_with_logits(labels=my_labels, logits=[preds])\n    return loss\n</code></pre>\n<p>my_labelize: I am creating 3 separate arrays ([left of 1], [1], [right of 1]) and concatenating all 3\nIn above example with label 7, left will be [0, 0, 0, 0, 0, 0.1, 0.8] and right will be [0.8, 0.1]</p>\n<pre><code>def my_labelize(oh_row): # oh_row will be one hot encoded vector \n    idx = tf.where(tf.equal(oh_row, 1))[0] # supposed to find index where 1 is \n\n    left_zero_idx = idx-3\n    second_left = idx-2\n    first_left = idx-1\n\n    if first_left &lt; 0:\n        left = np.array([])\n    elif second_left &lt; 0:\n        left = np.array([0.8])\n    elif left_zero_idx &lt; 0:\n        left = np.array([0.1, 0.8])\n    else:\n        left = np.append(np.zeros(left_zero_idx+1), np.array([0.1, 0.8]))\n    \n    right_zero_idx = idx+3\n    second_right = idx+2\n    first_right = idx+1\n\n    if first_right &gt; len(oh_row):\n        right = np.array([])\n    elif second_right &gt; len(oh_row):\n        right = np.array([0.8])\n    elif right_zero_idx &gt; len(oh_row):\n        right = np.array([0.8, 0.1])\n    else:\n        right = np.append(np.array([0.8, 0.1]), np.zeros(len(oh_row)-right_zero_idx))\n    \n    left = tf.convert_to_tensor(left, tf.float32)\n    mid = tf.convert_to_tensor(np.array([1]), tf.float32)\n    right = tf.convert_to_tensor(right, tf.float32)\n    my_label = tf.stack([left, mid, right])\n    return my_label\n</code></pre>\n<p>However this does not seem to be working (mostly erors in my_labelize, the values don't seem to be updating properly or getting None) and when I'm trying to debug by checking values in debugger mode I only get outputs like `Tensor(&quot;map/while/strided_slice:0&quot;, shape=(1,), dtype=int64). When I try to use .eval() I get this error</p>\n<blockquote>\n<p>ValueError: Cannot use the default session to evaluate tensor: the\ntensor's graph is different from the session's graph. Pass an explicit\nsession to <code>eval(session=sess)</code>.</p>\n</blockquote>\n<p>What is the best way to replace values at a given index of a tensor? I know tensor values can't be changed so I would have to crate a copy, but I'm not sure what the fastest way is (without losing GPU acceleration)</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 187}]