[{"items": [{"tags": ["python", "tensorflow", "keras"], "owner": {"account_id": 26373, "reputation": 43816, "user_id": 68571, "user_type": "registered", "accept_rate": 79, "profile_image": "https://i.stack.imgur.com/Yw9Lg.png?s=256&g=1", "display_name": "VansFannel", "link": "https://stackoverflow.com/users/68571/vansfannel"}, "is_answered": true, "view_count": 6724, "accepted_answer_id": 62158222, "answer_count": 1, "score": 2, "last_activity_date": 1591121186, "creation_date": 1591084592, "last_edit_date": 1591116558, "question_id": 62147370, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62147370/attributeerror-model-object-has-no-attribute-trainable-variables-when-model", "title": "AttributeError: &#39;Model&#39; object has no attribute &#39;trainable_variables&#39; when model is &lt;class &#39;keras.engine.training.Model&#39;&gt;", "body": "<p>I've just started to learn Tensorflow (2.1.0), Keras (2.3.1) and Python 3.7.7.</p>\n\n<p>By the way, I'm running all my code on an Anaconda Environment on Windows 7 64bit. I have also tried on an Anaconda Environment on Linux and I get the same error.</p>\n\n<p>I'm following this Tensorflow's tutorial: \"<a href=\"https://www.tensorflow.org/tutorials/customization/custom_training_walkthrough\" rel=\"nofollow noreferrer\">Custom training: walkthrough</a>\".</p>\n\n<p>Everything is ok, but when I typed this piece of code:</p>\n\n<pre><code>def grad(model, inputs, targets):\n  with tf.GradientTape() as tape:\n    loss_value = loss(model, inputs, targets, training=True)\n  return loss_value, tape.gradient(loss_value, model.trainable_variables)\n</code></pre>\n\n<p>I get the error:</p>\n\n<blockquote>\n  <p>Instance of 'Model' has no 'trainable_variables' member</p>\n</blockquote>\n\n<p>This is my model, with all of its imports:</p>\n\n<pre><code>import keras\nfrom keras.models import Input, Model\nfrom keras.layers import Dense, Conv2D, Conv2DTranspose, UpSampling2D, MaxPooling2D, Flatten, ZeroPadding2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nimport numpy as np\nimport tensorflow as tf\n\ndef vgg16_encoder_decoder(input_size = (200,200,1)):\n    #################################\n    # Encoder\n    #################################\n    inputs = Input(input_size, name = 'input')\n\n    conv1 = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name ='conv1_1')(inputs)\n    conv1 = Conv2D(64, (3, 3), activation = 'relu', padding = 'same', name ='conv1_2')(conv1)\n    pool1 = MaxPooling2D(pool_size = (2,2), strides = (2,2), name = 'pool_1')(conv1)\n\n    conv2 = Conv2D(128, (3, 3), activation = 'relu', padding = 'same', name ='conv2_1')(pool1)\n    conv2 = Conv2D(128, (3, 3), activation = 'relu', padding = 'same', name ='conv2_2')(conv2)\n    pool2 = MaxPooling2D(pool_size = (2,2), strides = (2,2), name = 'pool_2')(conv2)\n\n    conv3 = Conv2D(256, (3, 3), activation = 'relu', padding = 'same', name ='conv3_1')(pool2)\n    conv3 = Conv2D(256, (3, 3), activation = 'relu', padding = 'same', name ='conv3_2')(conv3)\n    conv3 = Conv2D(256, (3, 3), activation = 'relu', padding = 'same', name ='conv3_3')(conv3)\n    pool3 = MaxPooling2D(pool_size = (2,2), strides = (2,2), name = 'pool_3')(conv3)\n\n    conv4 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv4_1')(pool3)\n    conv4 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv4_2')(conv4)\n    conv4 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv4_3')(conv4)\n    pool4 = MaxPooling2D(pool_size = (2,2), strides = (2,2), name = 'pool_4')(conv4)\n\n    conv5 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv5_1')(pool4)\n    conv5 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv5_2')(conv5)\n    conv5 = Conv2D(512, (3, 3), activation = 'relu', padding = 'same', name ='conv5_3')(conv5)\n    pool5 = MaxPooling2D(pool_size = (2,2), strides = (2,2), name = 'pool_5')(conv5)\n\n    #################################\n    # Decoder\n    #################################\n    #conv1 = Conv2DTranspose(512, (2, 2), strides = 2, name = 'conv1')(pool5)\n\n    upsp1 = UpSampling2D(size = (2,2), name = 'upsp1')(pool5)\n    conv6 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv6_1')(upsp1)\n    conv6 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv6_2')(conv6)\n    conv6 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv6_3')(conv6)\n\n    upsp2 = UpSampling2D(size = (2,2), name = 'upsp2')(conv6)\n    conv7 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv7_1')(upsp2)\n    conv7 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv7_2')(conv7)\n    conv7 = Conv2D(512, 3, activation = 'relu', padding = 'same', name = 'conv7_3')(conv7)\n    zero1 = ZeroPadding2D(padding =  ((1, 0), (1, 0)), data_format = 'channels_last', name='zero1')(conv7)\n\n    upsp3 = UpSampling2D(size = (2,2), name = 'upsp3')(zero1)\n    conv8 = Conv2D(256, 3, activation = 'relu', padding = 'same', name = 'conv8_1')(upsp3)\n    conv8 = Conv2D(256, 3, activation = 'relu', padding = 'same', name = 'conv8_2')(conv8)\n    conv8 = Conv2D(256, 3, activation = 'relu', padding = 'same', name = 'conv8_3')(conv8)\n\n    upsp4 = UpSampling2D(size = (2,2), name = 'upsp4')(conv8)\n    conv9 = Conv2D(128, 3, activation = 'relu', padding = 'same', name = 'conv9_1')(upsp4)\n    conv9 = Conv2D(128, 3, activation = 'relu', padding = 'same', name = 'conv9_2')(conv9)\n\n    upsp5 = UpSampling2D(size = (2,2), name = 'upsp5')(conv9)\n    conv10 = Conv2D(64, 3, activation = 'relu', padding = 'same', name = 'conv10_1')(upsp5)\n    conv10 = Conv2D(64, 3, activation = 'relu', padding = 'same', name = 'conv10_2')(conv10)\n\n    conv11 = Conv2D(1, 3, activation = 'relu', padding = 'same', name = 'conv11')(conv10)\n\n    model = Model(inputs = inputs, outputs = conv11, name = 'vgg-16_encoder_decoder')\n\n    return model\n</code></pre>\n\n<p>I have found any reference for that attribute in <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/Model\" rel=\"nofollow noreferrer\">Tensorflow Keras Model</a> documentation.</p>\n\n<p>On \"<a href=\"https://www.tensorflow.org/guide/migrate#2_use_python_objects_to_track_variables_and_losses\" rel=\"nofollow noreferrer\">Migrate your TensorFlow 1 code to TensorFlow 2 - 2. Make the code 2.0-native</a>\", say:</p>\n\n<blockquote>\n  <p>If you need to aggregate lists of variables (like\n  tf.Graph.get_collection(tf.GraphKeys.VARIABLES)), use the .variables\n  and .trainable_variables attributes of the Layer and Model objects.</p>\n</blockquote>\n\n<p>The network in Tensorflow's tutorial \"<a href=\"https://www.tensorflow.org/tutorials/customization/custom_training_walkthrough\" rel=\"nofollow noreferrer\">Custom training: walkthrough</a>\" is:</p>\n\n<pre><code>model = tf.keras.Sequential([\n  tf.keras.layers.Dense(10, activation=tf.nn.relu, input_shape=(4,)),  # input shape required\n  tf.keras.layers.Dense(10, activation=tf.nn.relu),\n  tf.keras.layers.Dense(3)\n])\n</code></pre>\n\n<p>When I do:</p>\n\n<pre><code>print(type(model))\n</code></pre>\n\n<p>I get:</p>\n\n<pre><code>&lt;class 'tensorflow.python.keras.engine.sequential.Sequential'&gt;\n</code></pre>\n\n<p>But if I print the type of my network, <code>vgg16_encoder_decoder</code>, I get:</p>\n\n<pre><code>&lt;class 'keras.engine.training.Model'&gt;\n</code></pre>\n\n<p>So, <strong>the problem is</strong> the type of the network. I haven't say the above class, <code>'keras.engine.training.Model'</code>, before.</p>\n\n<p>How can I fix this problem to let me use the attribute <code>trainable_variables</code>?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 227}]