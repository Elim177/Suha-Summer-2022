[{"items": [{"tags": ["python", "python-3.x", "tensorflow", "keras"], "owner": {"account_id": 15587361, "reputation": 651, "user_id": 11245475, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/77dcf0ea160a4e6b27eed736d2b8df83?s=256&d=identicon&r=PG&f=1", "display_name": "krenerd", "link": "https://stackoverflow.com/users/11245475/krenerd"}, "is_answered": false, "view_count": 129, "answer_count": 0, "score": 1, "last_activity_date": 1624952562, "creation_date": 1624933168, "last_edit_date": 1624952562, "question_id": 68171845, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/68171845/input-dataset-of-different-shapes-in-tf-keras-model-with-custom-train-step-overr", "title": "Input dataset of different shapes in tf.keras.Model with custom train_step override", "body": "<p>I defined a custom <code>tf.keras.Model</code> and overrode <code>train_step</code> for implementing custom training logic. The dataset <code>trainDataset</code> is a <code>tf.data</code> object, each element containing <code>(image, label)</code> with different image sizes. I would like to perform data augmentation inside the <code>train_step</code> as in the code below. I believe my code including the part has no logical flaws, including the part where I use model.fit to train the model.</p>\n<p>However, an error occurs telling me that it <code>Cannot batch tensors with different shapes</code>. I see that something is executed before <code>train_step</code> and that is blocking the training process. How could I solve this?</p>\n<pre><code>model=GeneralCNN(cfg, network, augmentation)\nmodel.compile(optimizer, loss, cfg['training'])\n...\ntrainLogs=model.fit(trainDataset.batch(cfg['batch_size']), epochs=1, validation_data=valDataset)\n</code></pre>\n<pre><code>...(subclass of tf.keras.Model)\ndef train_step(self, data):\n        tf.print('check!')\n        images, labels =  data\n        images = self.augmentation(images) # &lt;--- includes resizing\n        # initialize important variables.\n        batch_size = tf.shape(images)[0]\n\n        # Train the network \n        with tf.GradientTape() as tape:\n            predictions = self.network(images)\n            loss = self.loss_fn(labels, predictions)\n        grads = tape.gradient(loss, self.network.trainable_weights)\n        self.optimizer.apply_gradients(zip(grads, self.network.trainable_weights))\n\n        # Update metrics\n        self.lossMetric.update_state(loss)\n\n        predictionsIndicies=tf.math.argmax(predictions, axis=1)\n        self.accuracyMetric.update_state((predictionsIndicies, labels))\n        return {&quot;loss&quot;: self.lossMetric.result(), &quot;accuracy&quot;: self.accuracyMetric.result()}\n...\n</code></pre>\n<p>Error:</p>\n<pre><code>raceback (most recent call last):\n  File &quot;train.py&quot;, line 116, in &lt;module&gt;\n    app.run(main)\n  File &quot;/usr/local/lib/python3.7/dist-packages/absl/app.py&quot;, line 303, in run\n    _run_main(main, args)\n  File &quot;/usr/local/lib/python3.7/dist-packages/absl/app.py&quot;, line 251, in _run_main\n    sys.exit(main(argv))\n  File &quot;train.py&quot;, line 76, in main\n    trainLogs=model.fit(P, epochs=1, steps_per_epoch=1000, validation_data=valDataset)\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py&quot;, line 1183, in fit\n    tmp_logs = self.train_function(iterator)\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py&quot;, line 889, in __call__\n    result = self._call(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py&quot;, line 950, in _call\n    return self._stateless_fn(*args, **kwds)\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py&quot;, line 3024, in __call__\n    filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py&quot;, line 1961, in _call_flat\n    ctx, args, cancellation_manager=cancellation_manager))\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py&quot;, line 596, in call\n    ctx=ctx)\n  File &quot;/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py&quot;, line 60, in quick_execute\n    inputs, attrs, num_outputs)\ntensorflow.python.framework.errors_impl.InvalidArgumentError:  Cannot batch tensors with different shapes in component 0. First element had shape [375,500,3] and element 1 had shape [333,500,3].\n     [[node IteratorGetNext (defined at train.py:76) ]] [Op:__inference_train_function_1852]\n\nFunction call stack:\ntrain_function\n\n</code></pre>\n<p>Edit: augmentation code just in case</p>\n<ul>\n<li>the code works when I resize the dataset before <code>model.fit</code></li>\n</ul>\n<pre><code>def BuildAugmentation(cfg):\n    augmentationType = cfg['augmentation']\n\n    if augmentationType=='none':\n        return SimpleResize(cfg)\n    elif augmentationType=='simple':\n        return SimpleAugmentation(cfg)\n\ndef SimpleResize(cfg):\n    # resizing only w/o augmentations\n    model=tf.keras.models.Sequential([\n        tfPreprocessing.Resizing(cfg['image_size'], cfg['image_size'])\n    ])\n    return model\n\ndef SimpleAugmentation(cfg):\n    # custom simple augmenation w/ humble augmentations\n    model=tf.keras.models.Sequential([\n        tfPreprocessing.RandomRotation(factor=0.02),\n        tfPreprocessing.RandomZoom(height_factor=0.2, width_factor=0.2),\n        tfPreprocessing.Resizing(cfg['image_size'], cfg['image_size']),\n        tfPreprocessing.RandomFlip(&quot;horizontal&quot;)\n    ])\n    return model\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 115}]