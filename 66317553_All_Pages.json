[{"items": [{"tags": ["python", "tensorflow", "keras"], "owner": {"account_id": 12587117, "reputation": 131, "user_id": 9598527, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/eb56a0482eadd7dbdca7b311b155753f?s=256&d=identicon&r=PG&f=1", "display_name": "Ajinkya Ambatwar", "link": "https://stackoverflow.com/users/9598527/ajinkya-ambatwar"}, "is_answered": true, "view_count": 72, "accepted_answer_id": 66317683, "answer_count": 1, "score": 0, "last_activity_date": 1614004422, "creation_date": 1614003903, "question_id": 66317553, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66317553/keras-conv3d-input-channels-conflict", "title": "Keras Conv3d input channels conflict", "body": "<p>Hi I am creating a network in TF2 that includes conv3D layers.\nHere is mY network definition</p>\n<pre><code>class Model(tf.keras.Model):\n    def __init__(\n        self,\n        numOutputClasses=None,\n        filters1=128,\n        filters2=256,\n        filters3=512,\n    ):\n        super(Model, self).__init__()\n        self.regularizer = tf.keras.regularizers.l2(l=REGULARISATIONSCALE)\n        self.convblock1 = convBlock(filters1, self.regularizer)\n        self.convblock2 = convBlock(filters2, self.regularizer)\n        self.convblock3 = convBlock(filters3, self.regularizer)\n        \n    def call(\n        self,\n        x\n       ):\n\n        x = tf.reshape(x, [batchsize, vsize, vsize, vsize, VOXELFEATUREDIM])\n        print(&quot;input to convbloc1 has shape &quot;, x.shape)\n        x = self.convblock1(x)\n        print(&quot;input to convbloc2 has shape &quot;, x.shape)\n        x = self.convblock2(x)\n        print(&quot; input to cb3 has shape &quot;, x.shape)\n        x = self.convblock3(x)\n        return x\n</code></pre>\n<p>Where the <code>convBlock</code> is defined as</p>\n<pre><code>class convBlock(layers.Layer):\n    def __init__(self, filters, regularizer):\n        super(convBlock, self).__init__()\n        self.regularizer = regularizer\n        self.conv3d = tf.keras.Sequential(\n            [\n                layers.Conv3D(\n                    filters=filters,\n                    kernel_size=[3, 3, 3],\n                    padding=&quot;same&quot;,\n                    strides=[1, 1, 1],\n                    bias_initializer=tf.zeros_initializer(),\n                    kernel_regularizer=self.regularizer,\n                    bias_regularizer=self.regularizer,\n                ),\n                layers.BatchNormalization(),\n                layers.LeakyReLU(),\n            ]\n        )\n        self.maxpool = layers.MaxPooling3D(pool_size=[2, 2, 2], strides=[2, 2, 2])\n\n    def call(self, x):\n        print(&quot;in cb&quot;)\n        print(&quot;x shape &quot;, x.shape)\n        x = self.conv3d(x)\n        print(&quot;x shape &quot;, x.shape)\n        x = self.conv3d(x)\n        print(&quot;x shape &quot;, x.shape)\n        x = self.maxpool(x)\n        print(&quot;op shape &quot;, x.shape)\n        return x\n</code></pre>\n<p>My input to the <code>Model</code> has shape(after first reshape) <code>[32, 16, 16, 16, 128]</code> which is fed to the first <code>ConvBlock</code> layer. As expected the output has shape of <code>[32, 8, 8, 8, 128]</code>(with 128 output channels+MaxPool for halving the dimension).\nWhen this output gets fed to <code>convblock2</code>(the second convblock in <code>Model</code>), the output after first <code>conv3d</code> layer is <code>[32, 8, 8, 8, 256]</code>(expected - Dimension preserving+256 output channels).\nBut when this output is passed to second <code>conv3d</code> layer of <code>convblock2</code> it returns a value error</p>\n<pre><code>ValueError:expected axis -1 of input shape to have value 128 but received input with shape [32, 8, 8, 8, 256]\n</code></pre>\n<p>Now my doubt is why conv3D expecting for number of input channels? Am I missing something in my code?</p>\n<p>Any help would be appreciated!\nThank you!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 201}]