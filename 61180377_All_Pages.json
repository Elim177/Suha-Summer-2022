[{"items": [{"tags": ["python", "tensorflow", "tensorflow2.0"], "owner": {"account_id": 7389098, "reputation": 316, "user_id": 7361588, "user_type": "registered", "accept_rate": 86, "profile_image": "https://i.stack.imgur.com/KyWOO.gif?s=256&g=1", "display_name": "COOKIE", "link": "https://stackoverflow.com/users/7361588/cookie"}, "is_answered": false, "view_count": 122, "answer_count": 0, "score": 1, "last_activity_date": 1586750925, "creation_date": 1586741529, "last_edit_date": 1586750925, "question_id": 61180377, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/61180377/tensorflow-tape-gradient-returning-none-on-style-transfer", "title": "Tensorflow tape.gradient() returning None on style transfer", "body": "<p>I'm working on deep learning styler transfer using vgg19, but I can't get my optimizer to work, as my gradient won't compute and tape.gradient returns none. I can't find any issues in my code. Here's the code for loss and gradient tape.</p>\n\n<p>the \"image\" is a TensorFlow tensor</p>\n\n<p><strong>Loss</strong></p>\n\n<pre><code>image_features = get_features(image, model)\nstyle_features = get_features(style, model)\ncontent_loss = tf.reduce_mean(tf.square(image_features[3]-content_features[3]))\ncontent_loss *= content_weight\n\nstyle_loss = 0\nstyle_weights = [1.0, 0.8, 0.5, 0.3, 0.1]\nfor w in range(len(style_weights)):\n  gram_image = gram_matrix(image_features[w])\n  gram_style = gram_matrix(style_features[w])\n  style_loss += style_weights[w] * tf.reduce_mean(tf.square(gram_image - gram_style))\n\nprint(\"content_loss: \", content_loss, \"style_loss: \", style_loss)\nloss = content_loss + style_loss\ngrad = get_gradient(loss, image)\n</code></pre>\n\n<p><strong>gram_matrix</strong></p>\n\n<pre><code>def gram_matrix(tensor):\n    channels = tensor.shape[-1]\n    a = tf.reshape(tensor, [-1, channels])\n    n = a.shape[0]\n    gram = tf.matmul(a, a, transpose_a = True)\n    return gram \n</code></pre>\n\n<p><strong>get_features</strong>-how the image and style_features are calculated</p>\n\n<pre><code>def get_features(image, model):\n    output = model(image)\n    features = [layer[0] for layer in output]\n    return features\n</code></pre>\n\n<p><strong>gradient</strong></p>\n\n<pre><code>def get_gradient(loss, image):\n        with tf.GradientTape() as tape:\n    tape.watch(loss)\n    grad = tape.gradient(loss, image)\n    return grad\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 124}]