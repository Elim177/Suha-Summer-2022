[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras", "gradienttape"], "owner": {"account_id": 9436154, "reputation": 760, "user_id": 7018093, "user_type": "registered", "accept_rate": 20, "profile_image": "https://lh5.googleusercontent.com/-xYQCVFzJDCI/AAAAAAAAAAI/AAAAAAAAAEk/Inc2fERknps/photo.jpg?sz=256", "display_name": "man zet", "link": "https://stackoverflow.com/users/7018093/man-zet"}, "is_answered": true, "view_count": 506, "accepted_answer_id": 63315002, "answer_count": 1, "score": 0, "last_activity_date": 1596887430, "creation_date": 1596885306, "last_edit_date": 1596887430, "question_id": 63314740, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/63314740/tensorflow-gradient-always-gives-none-when-using-gradienttape", "title": "Tensorflow gradient always gives None when using GradientTape", "body": "<p>I was playing around and trying to implement my own loss function in TensorFlow but I always get <code>None</code> gradients. To reproduce the problem I've now reduced my program to a minimal example. I define a very simple model:</p>\n<pre class=\"lang-py prettyprint-override\"><code>import tensorflow as tf\n\nmodel = tf.keras.Sequential(\n    [\n        tf.keras.Input(shape=(3,), name=&quot;input&quot;),\n        tf.keras.layers.Dense(64, activation=&quot;relu&quot;, name=&quot;layer2&quot;),\n        tf.keras.layers.Dense(3, activation=&quot;softmax&quot;, name=&quot;output&quot;),\n    ]\n)\n</code></pre>\n<p>and then define a very simple (but probably useless) loss function:</p>\n<pre class=\"lang-py prettyprint-override\"><code>def dummy_loss(x):\n  return tf.reduce_sum(x)\n\ndef train(model, inputs, learning_rate):\n  outputs = model(inputs)\n  with tf.GradientTape() as t:\n    current_loss = dummy_loss(outputs)\n  temp = t.gradient(current_loss, model.trainable_weights)\ntrain(model, tf.random.normal((10, 3)), learning_rate=0.001)\n</code></pre>\n<p>but <code>t.gradient(current_loss, model.trainable_weights)</code> gives me only a list of <code>None</code> values, i.e. <code>[None, None, None, None]</code>. Why is this the case? What am I doing wrong? Might there be a misconception on my side about how TensorFlow works?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 66}]