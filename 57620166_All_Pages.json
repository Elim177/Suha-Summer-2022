[{"items": [{"tags": ["python-3.x", "tensorflow"], "owner": {"account_id": 4441934, "reputation": 1952, "user_id": 3616293, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/cf7556b4227065cec9496375d64fea3d?s=256&d=identicon&r=PG&f=1", "display_name": "Arun", "link": "https://stackoverflow.com/users/3616293/arun"}, "is_answered": true, "view_count": 189, "accepted_answer_id": 57621326, "answer_count": 1, "score": 1, "last_activity_date": 1566543838, "creation_date": 1566536846, "question_id": 57620166, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/57620166/tensorflow-gradients-example", "title": "TensorFlow gradients example", "body": "<p>I have the following code to compute an example of gradients using TensorFlow-</p>\n\n<pre><code># z = f(x, y) = 2*x - y\n# Partial derivative of dz/dx = 2; dz/dy = -1\n# Initialize x and y variables-                                         \nx = tf.Variable([1], dtype = tf.int32)\ny = tf.Variable([2], dtype = tf.int32)\nz = tf.subtract(2 * x, y)\n\n# Define gradient operation-\ngrad = tf.gradients(z, [x, y])\n\n\n# Initialize TensorFlow session-\nsess = tf.Session()\n\n# Initialize all variables-\nsess.run(tf.global_variables_initializer())\n\n# Compute gradient defined above-\nres_grad = sess.run(grad)\n\n# Close the session-\nsess.close()\n</code></pre>\n\n<p>But the line-</p>\n\n<pre><code>res_grad = sess.run(grad)\n</code></pre>\n\n<p>Gives the following error-</p>\n\n<blockquote>\n  <p>TypeError                                 Traceback (most recent call\n  last)  in \n  ----> 1 res = sess.run(grad)</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in run(self, fetches, feed_dict, options, run_metadata)\n      948     try:\n      949       result = self._run(None, fetches, feed_dict, options_ptr,\n  --> 950                          run_metadata_ptr)\n      951       if run_metadata:\n      952         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in _run(self, handle, fetches, feed_dict, options, run_metadata)<br>\n  1156     # Create a fetch handler to take care of the structure of\n  fetches.    1157     fetch_handler = _FetchHandler(\n  -> 1158         self._graph, fetches, feed_dict_tensor, feed_handles=feed_handles)    1159     1160     # Run request and get\n  response.</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in <strong>init</strong>(self, graph, fetches, feeds, feed_handles)\n      472     \"\"\"\n      473     with graph.as_default():\n  --> 474       self._fetch_mapper = _FetchMapper.for_fetch(fetches)\n      475     self._fetches = []\n      476     self._targets = []</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in for_fetch(fetch)\n      262     elif isinstance(fetch, (list, tuple)):\n      263       # NOTE(touts): This is also the code path for namedtuples.\n  --> 264       return _ListFetchMapper(fetch)\n      265     elif isinstance(fetch, collections.Mapping):\n      266       return _DictFetchMapper(fetch)</p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in <strong>init</strong>(self, fetches)\n      371     \"\"\"\n      372     self._fetch_type = type(fetches)\n  --> 373     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n      374     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n      375 </p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in (.0)\n      371     \"\"\"\n      372     self._fetch_type = type(fetches)\n  --> 373     self._mappers = [_FetchMapper.for_fetch(fetch) for fetch in fetches]\n      374     self._unique_fetches, self._value_indices = _uniquify_fetches(self._mappers)\n      375 </p>\n  \n  <p>~/.local/lib/python3.7/site-packages/tensorflow/python/client/session.py\n  in for_fetch(fetch)\n      259     if fetch is None:\n      260       raise TypeError('Fetch argument %r has invalid type %r' % (fetch,\n  --> 261                                                                  type(fetch)))\n      262     elif isinstance(fetch, (list, tuple)):\n      263       # NOTE(touts): This is also the code path for namedtuples.</p>\n  \n  <p>TypeError: Fetch argument None has invalid type </p>\n</blockquote>\n\n<p>What's going wrong?</p>\n\n<p>Thanks!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 39}]