[{"items": [{"tags": ["python", "tensorflow"], "owner": {"user_type": "does_not_exist", "display_name": "user7744624"}, "is_answered": false, "view_count": 186, "answer_count": 1, "score": 0, "last_activity_date": 1498570963, "creation_date": 1498562342, "question_id": 44778962, "content_license": "CC BY-SA 3.0", "link": "https://stackoverflow.com/questions/44778962/precision-and-recall-from-text-file", "title": "Precision and recall from text file", "body": "<p>I have this chunk of code which takes in a directory and spits of 5 prediction in descending order and stores it in a text file.\nAny sugestions as to how may i edit this to calculate precsion and recall for the directory?</p>\n\n<p>Thanks in advance. </p>\n\n<pre><code>os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'\n\n# change this as you see fit\nimage_path = sys.argv[1]\n\nextension = ['*.jpeg', '*.jpg']\nfiles=[]\n\n\nfor e in extension:\n    directory = os.path.join(image_path, e)\nfileList = glob.glob(directory)\nfor f in fileList:\n    files.append(f)\n    # Loads label file, strips off carriage return\n    label_lines = [line.rstrip() for line\n                   in tf.gfile.GFile(\"/tf_files/retrained_labels.txt\")]\n    # Unpersists graph from file  \nwith tf.gfile.FastGFile(\"/tf_files/retrained_graph.pb\", 'rb') as f:\ngraph_def = tf.GraphDef()\ngraph_def.ParseFromString(f.read())\ntf.import_graph_def(graph_def, name='')\n\nwith tf.Session() as sess:\n\n# Feed the image_data as input to the graph and get first prediction\nsoftmax_tensor = sess.graph.get_tensor_by_name('final_result:0')\n\n# Read in the image_data\nfor file in files:\n    image_data = tf.gfile.FastGFile(file, 'rb').read()\n\n    predictions = sess.run(softmax_tensor, \\\n                   {'DecodeJpeg/contents:0': image_data})\n\n# Sort to show labels of first prediction in order of confidence\n    top_k = predictions[0].argsort()[-len(predictions[0]):][::-1]\n    print(\"Image Name: \" + file)\n    for node_id in top_k:\n        human_string = label_lines[node_id]\n        score = predictions[0][node_id]\n        print('%s (score = %.5f)' % (human_string, score))\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 294}]