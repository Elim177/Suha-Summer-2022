[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 3948330, "reputation": 5043, "user_id": 3259896, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/641c30a7b383022f22b53c8cedb04e3f?s=256&d=identicon&r=PG&f=1", "display_name": "SantoshGupta7", "link": "https://stackoverflow.com/users/3259896/santoshgupta7"}, "is_answered": true, "view_count": 4949, "accepted_answer_id": 53999722, "answer_count": 1, "score": 0, "last_activity_date": 1546385864, "creation_date": 1546383446, "last_edit_date": 1546385269, "question_id": 53999583, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/53999583/tf-concat-giving-shape-must-be-at-least-rank-2-but-is-rank-1-error-even-if-bot", "title": "tf.concat giving &#39;Shape must be at least rank 2 but is rank 1&#39; error even if both tensors are the same shape", "body": "<p>I'm trying to concat two tensorflow constants of the same shape but I'm getting an error. Here's the code. (I just edited it to make the init value explicit)</p>\n\n<p>import tensorflow as tf</p>\n\n<pre><code>b1 = tf.constant(value=[5,8])\nb2 = tf.constant(value=[6,9])\nb3= tf.concat( [b1, b2] , 1) \n\nwith tf.Session( ) as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run([ b3] ))\n</code></pre>\n\n<p>Gives this error</p>\n\n<pre><code>---------------------------------------------------------------------------\nInvalidArgumentError                      Traceback (most recent call last)\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\n   1658   try:\n-&gt; 1659     c_op = c_api.TF_FinishOperation(op_desc)\n   1660   except errors.InvalidArgumentError as e:\n\nInvalidArgumentError: Shapes must be equal rank, but are 2 and 1\n    From merging shape 0 with other shapes. for 'stack_38' (op: 'Pack') with input shapes: [2,2], [2].\n\nDuring handling of the above exception, another exception occurred:\n\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-96-3acc40ce0738&gt; in &lt;module&gt;()\n      1 c1 = [[5,8], [7,4]]\n      2 c2 = [6,9]\n----&gt; 3 c3= tf.stack( [c1, c2] )\n      4 with tf.Session( ) as sess:\n      5     sess.run(tf.global_variables_initializer())\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/dispatch.py in wrapper(*args, **kwargs)\n    178     \"\"\"Call target, and fall back on dispatchers if there is a TypeError.\"\"\"\n    179     try:\n--&gt; 180       return target(*args, **kwargs)\n    181     except (TypeError, ValueError):\n    182       # Note: convert_to_eager_tensor currently raises a ValueError, not a\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py in stack(values, axis, name)\n   1003                                                       expanded_num_dims))\n   1004 \n-&gt; 1005   return gen_array_ops.pack(values, axis=axis, name=name)\n   1006 \n   1007 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_array_ops.py in pack(values, axis, name)\n   5446   axis = _execute.make_int(axis, \"axis\")\n   5447   _, _, _op = _op_def_lib._apply_op_helper(\n-&gt; 5448         \"Pack\", values=values, axis=axis, name=name)\n   5449   _result = _op.outputs[:]\n   5450   _inputs_flat = _op.inputs\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py in _apply_op_helper(self, op_type_name, name, **keywords)\n    786         op = g.create_op(op_type_name, inputs, output_types, name=scope,\n    787                          input_types=input_types, attrs=attr_protos,\n--&gt; 788                          op_def=op_def)\n    789       return output_structure, op_def.is_stateful, op\n    790 \n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/deprecation.py in new_func(*args, **kwargs)\n    499                 'in a future version' if date is None else ('after %s' % date),\n    500                 instructions)\n--&gt; 501       return func(*args, **kwargs)\n    502 \n    503     doc = _add_deprecated_arg_notice_to_docstring(\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in create_op(***failed resolving arguments***)\n   3298           input_types=input_types,\n   3299           original_op=self._default_original_op,\n-&gt; 3300           op_def=op_def)\n   3301       self._create_op_helper(ret, compute_device=compute_device)\n   3302     return ret\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in __init__(self, node_def, g, inputs, output_types, control_inputs, input_types, original_op, op_def)\n   1821           op_def, inputs, node_def.attr)\n   1822       self._c_op = _create_c_op(self._graph, node_def, grouped_inputs,\n-&gt; 1823                                 control_input_ops)\n   1824 \n   1825     # Initialize self._outputs.\n\n/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py in _create_c_op(graph, node_def, inputs, control_inputs)\n   1660   except errors.InvalidArgumentError as e:\n   1661     # Convert to ValueError for backwards compatibility.\n-&gt; 1662     raise ValueError(str(e))\n   1663 \n   1664   return c_op\n\nValueError: Shapes must be equal rank, but are 2 and 1\n    From merging shape 0 with other shapes. for 'stack_38' (op: 'Pack') with input shapes: [2,2], [2].\n</code></pre>\n\n<p>Even though the two tensors are exactly the same shape. If I do axis=0 it works, and if I replace the tensors with regular numpy arrays of the same numbers, it works, but some how the combination of tensorflow constants and axis=1 is causing an issue. </p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 62}]