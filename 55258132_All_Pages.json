[{"items": [{"tags": ["python", "tensorflow", "eager-execution"], "owner": {"account_id": 15128062, "reputation": 123, "user_id": 10916789, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/-cWZooBN96GE/AAAAAAAAAAI/AAAAAAAAAAA/AKxrwcYEXTkfTssXojxqNAoKO9pq3oWBsQ/mo/photo.jpg?sz=256", "display_name": "Oktai Tatanov", "link": "https://stackoverflow.com/users/10916789/oktai-tatanov"}, "is_answered": false, "view_count": 75, "answer_count": 0, "score": 2, "last_activity_date": 1553076657, "creation_date": 1553076294, "last_edit_date": 1553076657, "question_id": 55258132, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/55258132/how-to-eval-model-with-batch-size-1-and-use-trained-parameters-for-batchnorm-rat", "title": "How to eval model with batch_size=1 and use trained parameters for BatchNorm rather than InstanceNorm?", "body": "<p>When I run my <code>model(training=False)</code> with <code>batch_size = 2</code>, model uses trained parameters for BatchNorm, but when I run model with <code>batch_size = 1</code>, my model don't use trained parameters and do <code>InstanceNorm</code> in fact. How can I run model with <code>batch_size = 1</code> as <code>batch_size = 2</code>?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>class ContextExtractor(tf.keras.Model):\r\n        def __init__(self, model_name, pretrained_shape):\r\n            super().__init__()\r\n            self.model = self.__get_model(model_name, pretrained_shape)\r\n\r\n        def call(self, x, training=False, **kwargs):\r\n            features = self.model(x, training=training)\r\n            return features\r\n\r\n        def __get_model(self, model_name, pretrained_shape):\r\n            if model_name == \"mobilenetv2\":\r\n                return MobileNetV2(input_shape=pretrained_shape,\r\n                                   weights='imagenet',\r\n                                   alpha=0.35,\r\n                                   include_top=False,\r\n                                   pooling='avg')\r\n\r\ncontext_extractor = ContextExtractor(\"mobilenetv2\", (224, 224, 3))\r\nbc = tf.random.uniform((10, 224, 224, 3))\r\n\r\na1 = context_extractor(bc, training=False)\r\nprint(hash(a1[0].numpy().tobytes()))\r\n# -8545286774071995675\r\na2 = context_extractor(bc[:2], training=False)\r\nprint(hash(a2[0].numpy().tobytes()))\r\n# -8545286774071995675 &lt;-- the same\r\n\r\na3 = context_extractor(bc[:1], training=False)\r\nprint(hash(a3[0].numpy().tobytes()))\r\n# 8191470914604248680 &lt;-- another result!</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 47}]