[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 1637432, "reputation": 1718, "user_id": 1510542, "user_type": "registered", "accept_rate": 67, "profile_image": "https://i.stack.imgur.com/zysaA.jpg?s=256&g=1", "display_name": "MPA", "link": "https://stackoverflow.com/users/1510542/mpa"}, "is_answered": false, "view_count": 419, "answer_count": 0, "score": 1, "last_activity_date": 1515757689, "creation_date": 1515754812, "last_edit_date": 1515757689, "question_id": 48224875, "content_license": "CC BY-SA 3.0", "link": "https://stackoverflow.com/questions/48224875/tensorflow-handling-nested-tensors-with-dim-none", "title": "TensorFlow: handling nested tensors with dim None", "body": "<h1>Goal</h1>\n\n<ul>\n<li>I am designing a neural network in TensorFlow with a similar mode of operation as <a href=\"https://arxiv.org/abs/1506.02640\" rel=\"nofollow noreferrer\">YOLO</a>, that is, constructing a grid over an image, and making predictions for each cell in the grid. </li>\n<li>I have a set of input images, and a number of labels per image that varies from image to image. For example, the first image has 5 labels, the second image has 10, the third has 2, etc. The predictions of my neural network are cast in the form <code>(# images) x (# grid cells) x (5)</code>.</li>\n<li>For each image in the batch, I select the grid cells that correspond to their respective label positions (using <a href=\"https://www.tensorflow.org/api_docs/python/tf/gather\" rel=\"nofollow noreferrer\"><code>tf.gather</code></a>). In this way, I get a slice of the grid cells that contain the relevant objects.</li>\n<li>I then have a loss function that increments the loss for each label in a given image, adding it all to a grand total loss.</li>\n</ul>\n\n<h1>Problem</h1>\n\n<p>Because of the irregularity in the structure (varying number of elements along each dimension), I find it very difficult to come up with an approach that deals with such nested structures. Normally, I'd simply loop over and slice NumPy arrays until the job is done, but TensorFlow doesn't seem to allow for that (looping over <code>None</code> dims, slicing, etc.).</p>\n\n<h1>Possible solutions?</h1>\n\n<p>Some things I've tried:</p>\n\n<ul>\n<li>Running a plain and simple loop over the first dimension of the predictions (the # of images) using <a href=\"https://www.tensorflow.org/api_docs/python/tf/range\" rel=\"nofollow noreferrer\"><code>tf.range</code></a>, and then slicing the input (e.g. <code>slice = labels[i]</code> or similar). I get all sorts of errors  later on that don't make sense to me (like <code>TypeError: Value passed to parameter 'begin' has DataType float32 not in list of allowed values: int32, int64</code> even though the input is <code>int32</code>...).</li>\n<li>Organising various input tensors into a nested tensor with <a href=\"https://www.tensorflow.org/api_docs/python/tf/stack\" rel=\"nofollow noreferrer\"><code>tf.stack</code></a>, pass it into my loss function, and loop over each image in the batch using <a href=\"https://www.tensorflow.org/api_docs/python/tf/unstack\" rel=\"nofollow noreferrer\"><code>tf.unstack</code></a>. TensorFlow raised errors about the dimensions not being equal</li>\n<li>Using <a href=\"https://www.tensorflow.org/versions/r1.0/api_docs/python/tf/scan\" rel=\"nofollow noreferrer\"><code>tf.scan</code></a> and <a href=\"https://www.tensorflow.org/api_docs/python/tf/map_fn\" rel=\"nofollow noreferrer\"><code>tf.map</code></a>, looping over the first dimension (i.e. images in a batch) of a nested tensor. Again, I couldn't manage to construct a nested tensor in the first place</li>\n</ul>\n\n<h1>Question</h1>\n\n<p>How to properly handle nested structures with <code>None</code> dimensions? </p>\n\n<p><strong>Edit/Note</strong>: I know how to make it work for only a single image (i.e. not looping over the first dimension), so any solution would work that calls <code>calculate_loss_function(x, y, z)</code> repeatedly for each image in a batch.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 286}]