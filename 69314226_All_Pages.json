[{"items": [{"tags": ["numpy", "python-3.8", "tensorflow2.x"], "owner": {"account_id": 4441934, "reputation": 1962, "user_id": 3616293, "user_type": "registered", "accept_rate": 35, "profile_image": "https://www.gravatar.com/avatar/cf7556b4227065cec9496375d64fea3d?s=256&d=identicon&r=PG&f=1", "display_name": "Arun", "link": "https://stackoverflow.com/users/3616293/arun"}, "is_answered": false, "view_count": 55, "answer_count": 0, "score": 0, "last_activity_date": 1632482675, "creation_date": 1632482675, "question_id": 69314226, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/69314226/l1-and-l2-norms-for-4-d-conv-layer-tensor", "title": "L1 and L2 norms for 4-D Conv layer tensor", "body": "<p>(TensorFlow 2.4.1 and np 1.19.2) - For a defined convolutional layer as follows:</p>\n<pre><code>conv = Conv2D(\n        filters = 3, kernel_size = (3, 3),\n        activation='relu',\n        kernel_initializer = tf.initializers.GlorotNormal(),\n        bias_initializer = tf.ones_initializer,\n        strides = (1, 1), padding = 'same',\n        data_format = 'channels_last'\n        )\n\n# and a sample input data-\nx = tf.random.normal(shape = (1, 5, 5, 3), mean = 1.0, stddev = 0.5)\n\nx.shape\n# TensorShape([1, 5, 5, 3])\n\n# Get output from the conv layer-\nout = conv(x)\n\nout.shape\n# TensorShape([1, 5, 5, 3])\n\nout = tf.squeeze(out)\n\nout.shape\n# TensorShape([5, 5, 3])\n</code></pre>\n<p>Here, the three filters can be accessed as: <em>conv.weights[0][:, :, :, 0]</em>, <em>conv.weights[0][:, :, :, 1]</em> and <em>conv.weights[0][:, :, :, 2]</em> respectively.\nIf I want to compute the L2 norms for all of the three filters/kernels, I am using the code:</p>\n<pre><code># Compute L2 norms-\n\n# Using numpy-\nnp.linalg.norm(conv.weights[0][:, :, :, 0], ord = None)\n# 0.85089666\n\n# Using tensorflow-\ntf.norm(conv.weights[0][:, :, :, 0], ord = 'euclidean').numpy()\n# 0.85089666\n\n# Using numpy-\nnp.linalg.norm(conv.weights[0][:, :, :, 1], ord = None)\n# 1.0733316\n\n# Using tensorflow-\ntf.norm(conv.weights[0][:, :, :, 1], ord = 'euclidean').numpy()\n# 1.0733316\n\n# Using numpy-\nnp.linalg.norm(conv.weights[0][:, :, :, 2], ord = None)\n# 1.0259292\n\n# Using tensorflow-\ntf.norm(conv.weights[0][:, :, :, 2], ord = 'euclidean').numpy()\n# 1.0259292\n</code></pre>\n<p>How can I compute L2 norm for the given conv layer's kernels (by using 'conv.weights')?\nAlso, what's the correct way for computing L1 norm for the same conv layer's kernels?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 74}]