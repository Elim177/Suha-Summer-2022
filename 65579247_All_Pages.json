[{"items": [{"tags": ["tensorflow", "keras", "deep-learning", "neural-network", "conv-neural-network"], "owner": {"account_id": 16230354, "reputation": 2719, "user_id": 11725056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3fb8aa3bd56b90f894e9805de55ff840?s=256&d=identicon&r=PG&f=1", "display_name": "Deshwal", "link": "https://stackoverflow.com/users/11725056/deshwal"}, "is_answered": true, "view_count": 2780, "accepted_answer_id": 65590426, "answer_count": 1, "score": 4, "last_activity_date": 1609917932, "creation_date": 1609850867, "last_edit_date": 1609914873, "question_id": 65579247, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65579247/how-does-the-tensorflows-tripletsemihardloss-and-triplethardloss-and-how-to-use", "title": "How does the Tensorflow&#39;s TripletSemiHardLoss and TripletHardLoss and how to use with Siamese Network?", "body": "<p>As much as I know that <code>Triplet Loss</code> is a Loss Function which decrease the distance between anchor and positive but decrease between anchor and negative. Also, there is a margin added to it.</p>\n<p>So for EXAMPLE LEt us Suppose: a <code>Siamese Network</code>, which gives embeddings:</p>\n<pre><code>anchor_output = [1,2,3,4,5...] # embedding given by the CNN model\npositive_output = [1,2,3,4,4...]\nnegative_output= [53,43,33,23,13...]\n</code></pre>\n<p>And I think I can get the triplet loss such as: (I think I have to make it as loss using Lambda Layer or so)</p>\n<pre><code># calculate triplet loss\nd_pos = tf.reduce_sum(tf.square(anchor_output - positive_output), 1)\nd_neg = tf.reduce_sum(tf.square(anchor_output - negative_output), 1)\n\nloss = tf.maximum(0., margin + d_pos - d_neg)\nloss = tf.reduce_mean(loss)\n\n</code></pre>\n<p>So what on the earth is:\n<a href=\"https://www.tensorflow.org/addons/api_docs/python/tfa/losses/TripletHardLoss\" rel=\"nofollow noreferrer\">tfa.losses.TripletHardLoss</a> and\n<a href=\"https://www.tensorflow.org/addons/api_docs/python/tfa/losses/TripletSemiHardLoss\" rel=\"nofollow noreferrer\">tfa.losses.TripletSemiHardLoss</a></p>\n<p>As much as I know, Semi and hard are type of data generation techniques for <code>Siamese Techniques</code> which push the model to learn more.</p>\n<p><strong>MY Thinking</strong>: As I have learned it in <a href=\"https://omoindrot.github.io/triplet-loss\" rel=\"nofollow noreferrer\">This Post</a>, I think you can do:</p>\n<ol>\n<li>Generate a Batch of say 3 images and make a pair of 3 having <code>27</code> images</li>\n<li>Discard every <strong>invalid</strong> pair (all i,j,k should be unique). Remaining Batch <code>B</code></li>\n<li>Get the embeddings on each pair in batch <code>B</code></li>\n</ol>\n<p>So I think <code>HardTripletLoss</code> takes account of only those 3 images per batch which had <strong>Biggest</strong> Anchor-Positive distance and <strong>Lowest</strong> Anchor- Negative distance.</p>\n<p>And for <code>Semi Hard</code>, I think it discards all the losses calculated by every image pair where the distance was 0.</p>\n<p>if not, Could someone please correct me and tell me how these can be used. (I know we can use it inside <code>model.complie()</code> but my question is different.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 57}]