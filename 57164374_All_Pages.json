[{"items": [{"tags": ["python-3.x", "tensorflow", "tensorflow2.0", "tf.keras"], "owner": {"account_id": 1987773, "reputation": 1216, "user_id": 1782553, "user_type": "registered", "accept_rate": 70, "profile_image": "https://www.gravatar.com/avatar/bc4d4fbae28ecd225bd84e7e8cb6fc5e?s=256&d=identicon&r=PG", "display_name": "Jav", "link": "https://stackoverflow.com/users/1782553/jav"}, "is_answered": false, "view_count": 446, "answer_count": 1, "score": 1, "last_activity_date": 1563973404, "creation_date": 1563885431, "last_edit_date": 1563954998, "question_id": 57164374, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/57164374/oom-with-a-simple-resnet50-using-tensorflow2-0-on-an-nvidia-rtx2080-ti", "title": "OOM with a &quot;simple&quot; ResNet50 using Tensorflow2.0 on an Nvidia RTX2080 Ti", "body": "<p>I'm surprised to face an Out-of-Memory error using <code>tf.keras.applications.ResNet50</code> implementation on an Nvidia RTX2080Ti (with 11Gb of memory !).</p>\n\n<h2>Question:</h2>\n\n<p>Is there something wrong with the workflow I use?</p>\n\n<h2>Notes:</h2>\n\n<ul>\n<li>I'm using <code>tensorflow-gpu==2.0.0b1</code> with <code>CUDA v10.1</code></li>\n<li>I work on a segmentation task, thus the large <code>output_shape</code></li>\n<li>I build the batches myself, thus the use of <code>train_on_batch()</code> </li>\n<li>Even when setting <code>memory_growth</code> to <code>True</code>, the memory get filled-up from 700Mb to 10850Mb in a fraction of a second.</li>\n</ul>\n\n<h2>Code:</h2>\n\n<pre><code>import tensorflow as tf\nimport tensorflow.keras as ke\nimport numpy as np\n\nke.backend.clear_session()\n\ninputs = ke.layers.Input(shape=(512,1024,3), dtype=\"float32\")\noutputs = ke.applications.ResNet50(include_top=False, weights=\"imagenet\")(inputs)\noutputs = ke.layers.Lambda(lambda x: tf.compat.v1.image.resize_bilinear(x, size=(512,1024)))(outputs)\noutputs = ke.layers.Conv2D(2, 1, activation=\"softmax\")(outputs)\nmodel = ke.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(optimizer=ke.optimizers.RMSprop(lr=0.001), loss=ke.losses.CategoricalCrossentropy())\n\nimages = np.zeros((1,512,1024,3), dtype=np.float32)\ntargets = np.zeros((1,512,1024,2), dtype=np.float32)\n\nmodel.train_on_batch(images, targets)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 263}]