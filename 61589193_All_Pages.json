[{"items": [{"tags": ["tensorflow", "keras", "tensorflow2.0"], "owner": {"account_id": 4548208, "reputation": 3430, "user_id": 8089695, "user_type": "registered", "accept_rate": 100, "profile_image": "https://www.gravatar.com/avatar/92107cb1b109e2b8281e9cb76b5e3f16?s=256&d=identicon&r=PG&f=1", "display_name": "MiloMinderbinder", "link": "https://stackoverflow.com/users/8089695/milominderbinder"}, "is_answered": false, "view_count": 602, "answer_count": 1, "score": 1, "last_activity_date": 1588611769, "creation_date": 1588585109, "question_id": 61589193, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/61589193/weird-behavior-in-tensorflow-if-inputs-is-a-dictionary", "title": "Weird behavior in tensorflow if inputs is a dictionary", "body": "<p>Tensorflow version: 2.1</p>\n\n<p>OS - ubuntu 20.04</p>\n\n<p>If we use the <code>name</code> parameter while creating an 'Input` layer then we can feed the inputs to the model as a dictionary. One would expect the dictionary input to actually map key: value pairs properly but i fear that is not happening.  Below is the minimum reproducible code to have a peek into the issue:</p>\n\n<pre><code>import tensorflow as tf\nclass IL(layers.Layer):\n    def __init__(self):\n        super().__init__()\n    def call(self,inputs,training=True):\n        return inputs\n\nil = IL()\naa = tf.keras.Input((2,), name='a')\nbb = tf.keras.Input((2,), name='b')\ncc = tf.keras.Input((2,), name='c')\nix1 = {'pq':cc,'mn':aa,'yz':bb}\nout1 = il(ix1)\nmodel = tf.keras.Model(ix1, [out1])\nx1 = {'1': np.arange(0,2,dtype=np.float32).reshape(-1,2),\\\n      '3': np.arange(10,12,dtype=np.float32).reshape(-1,2),\n      'a': np.arange(20,22,dtype=np.float32).reshape(-1,2)}\ny_pred = model(x1,training=True)\n</code></pre>\n\n<p>Expected behavior:\nx1 gets mapped to corresponding keys. i dont know if those keys are supposed to be layer names or input dict given to model <code>ix1</code>. </p>\n\n<p>Question 1: Can you clarify what the dictionary keys in inputs are to be for? </p>\n\n<p>Current behavior:\nThe concept of dictionary is tossed out completely. What is happening is <code>x1</code> will get sorted on keys and be fed to model in order as if <code>1x1</code> was sorted as well. Meaning, in the above use-case 'mn' ('a' according to layer name) will map to <code>1</code> in <code>x1</code>, <code>pq</code> to <code>3</code> and <code>yz</code> to <code>a</code>. What is going on here? im looking for a little insight into how things work with tensorflow. Right now it seems as much of a sticks and stones contraption as tensorflow 1 was which, breaks my heart</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 163}]