[{"items": [{"tags": ["tensorflow"], "owner": {"account_id": 14193578, "reputation": 643, "user_id": 12214867, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-RCjV0xfzAWk/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3rdopK4Nj0yLOC-VAKly278w63sD8w/mo/photo.jpg?sz=256", "display_name": "JJJohn", "link": "https://stackoverflow.com/users/12214867/jjjohn"}, "is_answered": true, "view_count": 24, "accepted_answer_id": 68667677, "answer_count": 1, "score": 0, "last_activity_date": 1628174754, "creation_date": 1628168473, "last_edit_date": 1628174754, "question_id": 68667100, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/68667100/im-trying-to-reproduce-the-result-of-a-post-my-training-acc-is-better-though-m", "title": "I&#39;m trying to reproduce the result of a post, my training acc is better though my test acc is very bad, how do I do?", "body": "<p>I'm trying to reproduce the result of <a href=\"https://www.kaggle.com/louisong97/neural-network-approach-to-iris-dataset\" rel=\"nofollow noreferrer\">this post</a></p>\n<p>I'm using tensorflow 2.5.0, so this code</p>\n<pre><code>import tensorflow as tf\ntf.__version__\n</code></pre>\n<p>gives</p>\n<pre><code>2.5.0\n</code></pre>\n<p>I imported the packages as that post did</p>\n<pre><code>import numpy as np\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils import np_utils\nfrom sklearn.preprocessing import normalize\n</code></pre>\n<p>The construction of training and test set is a bit different from the way in that post though, I don't think this matters.</p>\n<pre><code>iris = load_iris()\nx_train, x_test, y_train, y_test = train_test_split(\n    iris.data, iris.target, test_size=0.33, random_state=2021)\n</code></pre>\n<p>I normalized the data as that post did</p>\n<pre><code>x_train=normalize(x_train,axis=0)\ny_train=np_utils.to_categorical(y_train,num_classes=3)\ny_test=np_utils.to_categorical(y_test,num_classes=3)\n</code></pre>\n<p>Here is the model</p>\n<pre><code>model = tf.keras.Sequential([\n    tf.keras.layers.Dense(1000, input_dim=4, activation='relu'),\n    tf.keras.layers.Dense(500, activation='relu'),\n    tf.keras.layers.Dense(300, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(3, activation='softmax')\n])\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n\nmodel.fit(x_train,y_train, validation_data=(x_test,y_test), batch_size=20,epochs=20,verbose=0)\n</code></pre>\n<p>my accuracy on training set is a bit higher</p>\n<pre><code>prediction=model.predict(x_train)\nlength=len(prediction)\ny_label=np.argmax(y_train,axis=1)\npredict_label=np.argmax(prediction,axis=1)   \naccuracy=np.sum(y_label==predict_label)/length * 100 \nprint(&quot;Accuracy of the dataset&quot;,accuracy )\n</code></pre>\n<p>and I got</p>\n<pre><code>Accuracy of the dataset 98.0\n</code></pre>\n<p>unfortunately, my accuracy on test set is way lower than that post</p>\n<pre><code>prediction=model.predict(x_test)\nlength=len(prediction)\ny_label=np.argmax(y_test,axis=1)\npredict_label=np.argmax(prediction,axis=1)\naccuracy=np.sum(y_label==predict_label)/length * 100 \nprint(&quot;Accuracy of the dataset&quot;,accuracy )\n</code></pre>\n<p>This is what I got</p>\n<pre><code>Accuracy of the dataset 28.000000000000004\n</code></pre>\n<p>Why is that?</p>\n<p>updated:</p>\n<p>with @HakanAkg\u00fcn's suggestion, I normalized the test set and got 68 acc. The post I referenced gets 100%, any other suggestions?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 88}]