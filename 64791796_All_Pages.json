[{"items": [{"tags": ["tensorflow2.0", "tensorflow-datasets", "tensorflow-federated"], "owner": {"account_id": 19951543, "reputation": 31, "user_id": 14621089, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/c473eaf9dce9b611523f32d70b51b09d?s=256&d=identicon&r=PG&f=1", "display_name": "Miguel Vazquez", "link": "https://stackoverflow.com/users/14621089/miguel-vazquez"}, "is_answered": true, "view_count": 133, "answer_count": 1, "score": 3, "last_activity_date": 1605675517, "creation_date": 1605117983, "question_id": 64791796, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64791796/linear-regression-using-tf-data-with-federated-core-api-and-data-on-remote-execu", "title": "Linear regression using tf.data with federated core API and data on remote execution client", "body": "<p>I'm trying to do a demonstration of federated learning with tff. And I've got this far but the error messages I get are just too confusing. The important part is that I want to demostrate that the data is in the remote engine, which is why I use the <code>tf.data.experimental.CsvDataset</code> and I could not find anything similar in any tutorial. I've managed to do a mini experiment where data was read in the remote site, but I can't get this larger example to work.</p>\n<p>Currently it complains about 'p = x * w + b', I believe because x is not a federated_value. But I've tried many many variations and just can't get it to work. The Salary.csv is from a tutorial here <a href=\"https://www.kaggle.com/karthickveerakumar/salary-data-simple-linear-regression?select=Salary_Data.csv\" rel=\"nofollow noreferrer\">https://www.kaggle.com/karthickveerakumar/salary-data-simple-linear-regression?select=Salary_Data.csv</a></p>\n<pre><code>import pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nimport tensorflow_federated as tff\n\nimport grpc\n\nip_address = '127.0.0.1'\nport = 8000\n\nchannels = [grpc.insecure_channel(f'{ip_address}:{port}') for _ in range(10)]\n\ntff.backends.native.set_remote_execution_context(channels, rpc_mode='STREAMING')\n\n@tf.function()\ndef load_data():\n    return tf.data.experimental.CsvDataset('data/Salary.csv', [tf.float64,tf.float64], header=True)\n\n\nW_TYPE = tff.FederatedType(tf.float64, tff.CLIENTS, all_equal=True)\nB_TYPE = tff.FederatedType(tf.float64, tff.CLIENTS, all_equal=True)\n@tff.federated_computation(W_TYPE, B_TYPE)\ndef train(w, b):\n    data = load_data()\n    loss = tf.Variable(0.0, dtype=tf.float64)\n    with tf.GradientTape() as tape:\n        for x, y in data:\n            p = x * w + b\n            loss = loss + tf.square(p - y)\n\n    g_w, g_b = tape.gradient(loss, [w, b])\n    w.assign_sub(0.0001 * g_w)\n    b.assign_sub(0.0001 * g_b)\n    return [w, b]\n\nw = tf.Variable(2.0, dtype=tf.float64)\nb = tf.Variable(3.0, dtype=tf.float64)\nfor _ in range(1000):\n    w, b = train(data, tff.federated_broadcast(w), tff.federated_broadcast(b))\n\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 146}]