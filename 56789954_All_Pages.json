[{"items": [{"tags": ["deep-learning", "customization", "loss-function"], "owner": {"account_id": 15085414, "reputation": 147, "user_id": 11057642, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/bcc1147639cc503c5323ed4503df7c2c?s=256&d=identicon&r=PG", "display_name": "Keren", "link": "https://stackoverflow.com/users/11057642/keren"}, "is_answered": false, "view_count": 613, "answer_count": 2, "score": 0, "last_activity_date": 1561645674, "creation_date": 1561634536, "question_id": 56789954, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/56789954/i-get-an-error-while-trying-to-customize-my-loss-function", "title": "I get an error while trying to customize my loss function", "body": "<p>I am trying to create a custom loss function for my deep learning model and I run into an error.</p>\n\n<p>I am going to give here an example of a code that is not what I want to use but if I understand how to make this little loss function work, then I think I'll be able to make my long loss function work. So I am pretty much asking for help to make this next function work, here it is.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>    model.compile(optimizer='rmsprop',loss=try_loss(pic_try), metrics= \n    ['accuracy'])\n</code></pre>\n\n<pre class=\"lang-py prettyprint-override\"><code>    def try_loss(pic):\n    def try_2_loss(y_true,y_pred):\n     return tf.py_function(func=try_3_loss,inp=[y_pred,pic], Tout=tf.float32)\n    return try_2_loss\n</code></pre>\n\n<pre class=\"lang-py prettyprint-override\"><code>    def try_3_loss(y_pred,pic):\n     return tf.reduce_mean(pic)\n</code></pre>\n\n<p>Now I want to know the following:\n1. Does the pic that I am entering into my model.compile line need to be a tensor? Can it be a numpy array?\n2. In my try_3_loss function, can I replace tf.reduce_mean to np.mean?\n3. In my try_3_loss function, can I use normal numpy commands on y_pred, such as np.mean(y_pred)?</p>\n\n<p>My main thing is that I want to use as many numpy commands as possible.</p>\n\n<p>I tried to use all sorts of stuff, I tried to have my pic be a numpy array, I tried to use with that the np.mean (pic) in my try_3_loss function, I tried to make my pic be a tensor object and then use the tf.reduce_mean in my try_3_project and I tried to do sess.run(pic) before running the model.compile line and in all of the above situations I got the following error:</p>\n\n<hr>\n\n<pre><code>TypeError                                 Traceback (most recent call \nlast)\n&lt;ipython-input-75-ff45de7120bc&gt; in &lt;module&gt;()\n----&gt; 1 model.compile(optimizer='rmsprop',loss=try_loss(pic_try), \nmetrics=['accuracy'])\n\n1 frames\n/usr/local/lib/python3.6/dist-packages/keras/engine/training.py in \ncompile(self, optimizer, loss, metrics, loss_weights, sample_weight_mode, \nweighted_metrics, target_tensors, **kwargs)\n    340                 with K.name_scope(self.output_names[i] + \n'_loss'):\n    341                     output_loss = weighted_loss(y_true, y_pred,\n--&gt; 342                                                 sample_weight, \nmask)\n    343                 if len(self.outputs) &gt; 1:\n    344                     self.metrics_tensors.append(output_loss)\n\n/usr/local/lib/python3.6/dist-packages/keras/engine/training_utils.py in \nweighted(y_true, y_pred, weights, mask)\n    418             weight_ndim = K.ndim(weights)\n    419             score_array = K.mean(score_array,\n    --&gt; 420                                  axis=list(range(weight_ndim, \n    ndim)))\n    421             score_array *= weights\n    422             score_array /= K.mean(K.cast(K.not_equal(weights, 0), \nK.floatx()))\n\nTypeError: 'NoneType' object cannot be interpreted as an integer\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 47}]