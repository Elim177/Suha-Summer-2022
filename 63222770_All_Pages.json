[{"items": [{"tags": ["python", "tensorflow", "keras", "tensorflow2.0", "tf.keras"], "owner": {"account_id": 7277007, "reputation": 17010, "user_id": 10133797, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/ElNKG.png?s=256&g=1", "display_name": "OverLordGoldDragon", "link": "https://stackoverflow.com/users/10133797/overlordgolddragon"}, "is_answered": true, "view_count": 747, "accepted_answer_id": 63222771, "answer_count": 1, "score": 2, "last_activity_date": 1596601817, "creation_date": 1596419662, "question_id": 63222770, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/63222770/backpropagating-through-multiple-forward-passes", "title": "Backpropagating through multiple forward passes", "body": "<p>In usual backprop, we forward-prop once, compute gradients, then apply them to update weights. But suppose we wish to forward-prop <em>twice</em>, and backprop through <em>both</em>, and apply gradients only then (skip on first).</p>\n<p>Suppose the following:</p>\n<pre class=\"lang-py prettyprint-override\"><code>x = tf.Variable([2.])\nw = tf.Variable([4.])\n\nwith tf.GradientTape(persistent=True) as tape:\n    w.assign(w * x)\n    y = w * w  # w^2 * x\nprint(tape.gradient(y, x))  # &gt;&gt;None\n</code></pre>\n<p>From <a href=\"https://www.tensorflow.org/guide/autodiff#5_took_gradients_through_a_stateful_object\" rel=\"nofollow noreferrer\">docs</a>, a <code>tf.Variable</code> is a <em>stateful</em> object, which <em>blocks gradients</em>, and weights are <code>tf.Variable</code>s.</p>\n<p>Examples are differentiable hard attention (as opposed to RL), or simply passing a hidden state between layers in subsequent forward passes, as in diagram below. Neither TF nor Keras have an API-level support for stateful gradients, including <code>RNN</code>s, which only keep a stateful state tensor; gradient does <em>not</em> flow beyond one batch.</p>\n<p>How can this be accomplished?</p>\n<img src=\"https://i.stack.imgur.com/Kq4zs.png\" width=\"300\">\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 200}]