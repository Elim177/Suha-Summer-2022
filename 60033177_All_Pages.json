[{"items": [{"tags": ["keras", "tensorflow2.0", "tf.keras"], "owner": {"account_id": 13993027, "reputation": 163, "user_id": 10106574, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-aOky27Zg0gY/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7ruRdyBX1yNazVzN66fz-5w9rSKLg/mo/photo.jpg?sz=256", "display_name": "Brian Lee", "link": "https://stackoverflow.com/users/10106574/brian-lee"}, "is_answered": true, "view_count": 176, "accepted_answer_id": 60109695, "answer_count": 1, "score": 0, "last_activity_date": 1581064237, "creation_date": 1580704859, "last_edit_date": 1580712117, "question_id": 60033177, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60033177/how-can-i-feed-data-one-by-one-to-train-with-tensorflow-2-0-ver", "title": "How can I feed data one by one to train with tensorflow 2.0 ver", "body": "<p>I have work on Autoencoder typed model with the attention method. Around 10000 batches of data are fed into the model and each batch contains 30 images (30 is the \"step_size\" in ConvLSTM) with a shape of (5, 5, 3 [R,G,B]). </p>\n\n<p>Therefore, the array is of shape <code>(10000, 30, 5, 5, 3)</code>  (batch_size, step_size, image_height, image_width, scale). </p>\n\n<p>I intentionally made an output array shape as <code>(1,5,5,3)</code>, because each image has to be handled independently to apply attention method to. </p>\n\n<p>When I link all operations with <code>tf.keras.Model</code> such that its input has the shape of <code>(10000,30,5,5,3)</code> and the output shape of <code>(1,5,5,3)</code>.  </p>\n\n<pre><code>history = model.fit(train_data, train_data, batch_size = 1, epochs = 3)\n</code></pre>\n\n<p>I am trying to modify arguments in Model module, but it seems not working because the output shape is not the same as the input. </p>\n\n<p>Are there any possible ways to feed data one by one? </p>\n\n<p>I am eventually running a code something like:</p>\n\n<pre><code>\nmodel = keras.Model(intput, output)\n\nmodel.compile(optimizer='adam',loss= tf.keras.losses.MSE)\n\nhistory = model.fit(train_data, train_data, batch_size = 1, epochs = 3)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 248}]