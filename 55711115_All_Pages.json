[{"items": [{"tags": ["keras", "tensorflow2.0"], "owner": {"account_id": 108161, "reputation": 5951, "user_id": 287238, "user_type": "registered", "accept_rate": 75, "profile_image": "https://i.stack.imgur.com/oQJH2.jpg?s=256&g=1", "display_name": "mathtick", "link": "https://stackoverflow.com/users/287238/mathtick"}, "is_answered": true, "view_count": 6329, "accepted_answer_id": 55712832, "answer_count": 1, "score": 17, "last_activity_date": 1561482385, "creation_date": 1555426532, "last_edit_date": 1561482385, "question_id": 55711115, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/55711115/tensorflow-2-0-model-using-tf-function-very-slow-and-is-recompiling-every-time-t", "title": "Tensorflow 2.0 model using tf.function very slow and is recompiling every time the train count changes. Eager runs about 4x faster", "body": "<p>I have models built from uncompiled keras code and am trying to run them through a custom training loop.</p>\n\n<p>The TF 2.0 eager (by default) code runs about 30s on a CPU (laptop). When I create a keras model with wrapped tf.function call methods, it is running much, much slower and appears to take a very long time to start, particularly the \"first\" time.</p>\n\n<p>For example, in the tf.function code the initial train on 10 samples takes 40s, and the follow up one on 10 samples takes 2s.</p>\n\n<p>On 20 samples, the initial takes 50s and the follow up takes 4s. </p>\n\n<p>The first train on 1 sample takes 2s and follow up takes 200 ms. </p>\n\n<p>So it looks like each call of train is creating a <em>new graph</em> where the complexity scales with the train count!?</p>\n\n<p>I am just doing something like this:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>@tf.function\ndef train(n=10):\n    step = 0\n    loss = 0.0\n    accuracy = 0.0\n    for i in range(n):\n        step += 1\n        d, dd, l = train_one_step(model, opt, data)\n        tf.print(dd)\n        with tf.name_scope('train'):\n            for k in dd:\n                tf.summary.scalar(k, dd[k], step=step)\n        if tf.equal(step % 10, 0):\n            tf.print(dd)\n    d.update(dd)\n    return d\n</code></pre>\n\n<p>Where the model is <code>keras.model.Model</code> with a <code>@tf.function</code> decorate <code>call</code> method as per the examples.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 80}]