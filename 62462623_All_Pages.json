[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 18686486, "reputation": 79, "user_id": 13621877, "user_type": "registered", "profile_image": "https://lh5.googleusercontent.com/-XwQKKLqZ9WY/AAAAAAAAAAI/AAAAAAAAAAA/AMZuucnViQi1bSMYBwYtz3bL7hmce1UG6w/photo.jpg?sz=256", "display_name": "Will Mulcahey", "link": "https://stackoverflow.com/users/13621877/will-mulcahey"}, "is_answered": true, "view_count": 749, "accepted_answer_id": 62476248, "answer_count": 1, "score": 0, "last_activity_date": 1592590370, "creation_date": 1592535971, "last_edit_date": 1592587507, "question_id": 62462623, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62462623/valueerror-duplicate-feature-column-name-found-for-columns", "title": "ValueError: Duplicate feature column name found for columns:", "body": "<p>I'm following a youtube tutorial for tensorflow as i'm a complete noob. I'm trying to get this get a value for accuracy but I run into an error. I think for some reason it seems like it is making multiple columns for age and fare. But i can't figure out why. I'm using tensorflow version 2.2.0 and python 3.7.7. If you need any other info just ask and thanks for taking the time to help me. </p>\n\n<p>error</p>\n\n<pre><code>Traceback (most recent call last):\n  File \"C:\\Users\\will\\Documents\\#tensorflow crash course.py\", line 104, in &lt;module&gt;\n    linear_est.train(train_input_fn)  # train\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\estimator.py\", line 349, in train\n    loss = self._train_model(input_fn, hooks, saving_listeners)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\estimator.py\", line 1182, in _train_model\n    return self._train_model_default(input_fn, hooks, saving_listeners)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\estimator.py\", line 1211, in _train_model_default\n    self.config)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\estimator.py\", line 1170, in _call_model_fn\n    model_fn_results = self._model_fn(features=features, **kwargs)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\canned\\linear.py\", line 943, in _model_fn\n    sparse_combiner=sparse_combiner)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\canned\\linear.py\", line 667, in _linear_model_fn_v2\n    features=features)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow_estimator\\python\\estimator\\canned\\linear.py\", line 599, in _linear_model_fn_builder_v2\n    name='linear/linear_model')\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column_v2.py\", line 712, in __init__\n    **kwargs)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column_v2.py\", line 491, in __init__\n    self._feature_columns = _normalize_feature_columns(feature_columns)\n  File \"C:\\Users\\will\\miniconda3\\lib\\site-packages\\tensorflow\\python\\feature_column\\feature_column_v2.py\", line 2819, in _normalize_feature_columns\n    name_to_column[column.name]))\nValueError: Duplicate feature column name found for columns: NumericColumn(key='age', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None) and NumericColumn(key='age', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=None). This usually means that these columns refer to same base feature. Either one must be discarded or a duplicated but renamed item must be inserted in features dict.\n</code></pre>\n\n<p>code</p>\n\n<pre><code>from __future__ import absolute_import, division, print_function, unicode_literals\n\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \nfrom IPython.display import clear_output\nfrom six.moves import urllib\n\nimport tensorflow.compat.v2.feature_column as fc\n\nimport tensorflow as tf \n\nprint(tf.version)#checks version wanted 2.0 for this tutorial\n\ndftrain = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/train.csv') #training data from tf website\ndfeval = pd.read_csv('https://storage.googleapis.com/tf-datasets/titanic/eval.csv') #training data\n#print(dftrain.head())\ny_train = dftrain.pop('survived')\ny_eval = dfeval.pop('survived')\nline because this video tutorial leaves out details\n\nCATEGORICAL_COLUMNS = ['sex', 'n_siblings_spouses', 'parch', 'class', 'deck',\n                       'embark_town', 'alone']\nNUMERIC_COLUMNS = ['age', 'fare']\n\nfeature_columns = []#timestamp 1:33:00 a lot to unpack here\nfor feature_name in CATEGORICAL_COLUMNS:\n    vocabulary = dftrain[feature_name].unique() #gets list of all unique values from given feature column\n    feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature_name, vocabulary))\n\n    for feature_name in NUMERIC_COLUMNS:\n        feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))\n\nfeature_columns\n#print(dftrain[\"embark_town\"].unique())\n\ndef make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):#1:40:00 something about turning data into an object\n  def input_function():  # inner function, this will be returned\n    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))  # create tf.data.Dataset object with data and its label\n    if shuffle:\n      ds = ds.shuffle(1000)  # randomize order of data\n    ds = ds.batch(batch_size).repeat(num_epochs)  # split dataset into batches of 32 and repeat process for number of epochs\n    return ds  # return a batch of the dataset\n  return input_function  # return a function object for use\n\ntrain_input_fn = make_input_fn(dftrain, y_train)  # here we will call the input_function that was returned to us to get a dataset object we can feed to the model\neval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)\n\nlinear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)\n# We create a linear estimtor by passing the feature columns we created earlier\n\nlinear_est.train(train_input_fn)  # train\nresult = linear_est.evaluate(eval_input_fn)  # get model metrics/stats by testing on tetsing data\n\nclear_output()  # clears consoke output\nprint(result['accuracy'])  # the result variable is simply a dict of stats about our model\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 79}]