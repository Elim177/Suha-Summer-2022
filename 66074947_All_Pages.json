[{"items": [{"tags": ["tensorflow", "keras", "deep-learning", "computer-vision", "siamese-network"], "owner": {"account_id": 16230354, "reputation": 2719, "user_id": 11725056, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/3fb8aa3bd56b90f894e9805de55ff840?s=256&d=identicon&r=PG&f=1", "display_name": "Deshwal", "link": "https://stackoverflow.com/users/11725056/deshwal"}, "is_answered": false, "view_count": 119, "answer_count": 1, "score": 0, "last_activity_date": 1645665077, "creation_date": 1612600230, "question_id": 66074947, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66074947/resnet-based-tensorflow-keras-siamese-model-providing-nan-validation-loss-in", "title": "Resnet based (Tensorflow Keras) Siamese Model providing `nan` validation loss in training when using TripletHardLoss (Semi too)", "body": "<p>I have a model which I built on top of <code>ResNet</code>. I am using 25k Similar type of Images. My images have text as well as some diagram. When I used the Euclidean Distance + Binary loss, I got an accuracy of 95% with <code>Inception</code> but same with Triplet Hard/ Semi Hard Loss gave me <code>nan</code> loss and almost 0 accuracy. Please tell me if there is something wrong with the code structure.</p>\n<pre><code>import tensorflow_addons as tfa\nfrom tensorflow.keras.applications.resnet50 import preprocess_input as res50_pre, ResNet50\n\nshape = (224,224,3)\nlr = 0.001\nloss = tfa.losses.TripletSemiHardLoss()\nepochs = 50\nbatch_size = 128 #254 gives 'log' referenced before assignment error\n\n\ndatagen = ImageDataGenerator(preprocessing_function=res50_pre,validation_split=0.2)\n\ntrain_data = datagen.flow_from_dataframe(df,x_col='path',y_col='label',class_mode='sparse',target_size=(224,224),\n                                         batch_size=batch_size,subset='training',seed=SEED)\n\nval_data = datagen.flow_from_dataframe(df,x_col='path',y_col='label',class_mode='sparse',target_size=(224,224),\n                                       batch_size=batch_size,subset='validation',seed=SEED)\n\n\nbase_model = ResNet50(weights='imagenet',input_shape=shape,include_top=False,pooling='avg')\nbase_model.trainable = True\n\ninputs = keras.Input(shape=shape)\nx = base_model(inputs,training=True)\noutputs = keras.layers.Lambda(lambda x: tf.math.l2_normalize(x, axis=1))(x) # L2 normalize embeddings\nmodel = keras.Model(inputs, outputs)\n\nfor layer in model.layers: # set all the parameters trainable\n    layer.trainable = True\n    \nmodel.compile(optimizer=tf.keras.optimizers.Adam(lr),loss=loss,metrics=['accuracy'])\n\nhistory = model.fit(train_data,epochs=epochs,steps_per_epoch=len(train_data)//batch_size,validation_data=val_data,verbose=2)\n</code></pre>\n<p>My <code>group</code> has values like 1,2,3 [Not in order and some missing] which represent the same type of data. I used <code>Sparse</code> after converting the value to <code>str(1), str(3)</code> etc.</p>\n<p>My <code>DataFrame</code> looks like this:</p>\n<p><a href=\"https://i.stack.imgur.com/3NKFs.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3NKFs.png\" alt=\"enter image description here\" /></a></p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 60}]