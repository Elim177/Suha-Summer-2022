[{"items": [{"tags": ["tensorflow", "machine-learning", "keras", "neural-network"], "owner": {"account_id": 12887251, "reputation": 79, "user_id": 9320288, "user_type": "registered", "profile_image": "https://graph.facebook.com/10214576585755666/picture?type=large", "display_name": "Mat&#237;as Bilkis", "link": "https://stackoverflow.com/users/9320288/mat%c3%adas-bilkis"}, "is_answered": false, "view_count": 88, "answer_count": 0, "score": 1, "last_activity_date": 1605980907, "creation_date": 1605980907, "question_id": 64946222, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64946222/checking-things-are-ok-when-customizing-fitting-in-tf-keras-model", "title": "Checking things are OK when customizing fitting in tf.keras.Model", "body": "<p>I have the following piece of code, and wonder if fit() functionality is doing things correctly or not. In particular, I have this little check of counting the times train_step() is called, but was expecting (for the example shown below) the output to be the number of epochs and not 2! Anyone can give an explanation? I'm using tensorflow version 2.3.1 :)</p>\n<pre><code>import tensorflow as tf\n\nclass Model(tf.keras.Model):\n    def __init__(self):\n        super(Model,self).__init__()\n        self.l1 = tf.keras.layers.Dense(30)\n        self.l2 = tf.keras.layers.Dense(1)\n        self.count=0\n\n    def call(self, inputs):\n        x = tf.nn.relu(self.l1(inputs))\n        x = tf.nn.sigmoid(self.l2(x))\n        return x\n\n    def train_step(self, data):\n        self.count+=1\n\n        x,y = data\n        with tf.GradientTape() as tape:\n            tape.watch(self.trainable_variables)\n            preds = self(x)\n            loss = self.compiled_loss(y,preds) #+ tf.reduce_mean(tf.squeeze(self(inputs))-labels)*reg\n            grads = tape.gradient(loss, self.trainable_variables)\n        self.optimizer.apply_gradients(zip(grads, self.trainable_variables))\n        self.compiled_metrics.update_state(y,preds)\n        return {m.name: m.result() for m in self.metrics}\n    \ninpus=tf.random.uniform((100,1))\nlabels = tf.ones((100,1))\nnetwork = Model()\n\nnetwork(inpus)\nnetwork.compile(optimizer=tf.keras.optimizers.Adam(lr=10**-2), loss=tf.keras.losses.MeanSquaredError())\nnetwork.fit(x=inpus,y=labels,batch_size=len(inpus),epochs=100)\n\nprint(&quot;\\nfinal count: {}&quot;.format(network.count))\n</code></pre>\n<p>Thanks a lot !</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 32}]