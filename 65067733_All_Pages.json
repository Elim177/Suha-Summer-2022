[{"items": [{"tags": ["python", "tensorflow", "machine-learning"], "owner": {"account_id": 7433176, "reputation": 1256, "user_id": 5653423, "user_type": "registered", "accept_rate": 56, "profile_image": "https://www.gravatar.com/avatar/fae09c3723ebb231b5d849574161b612?s=256&d=identicon&r=PG&f=1", "display_name": "shome", "link": "https://stackoverflow.com/users/5653423/shome"}, "is_answered": false, "view_count": 22, "answer_count": 0, "score": 0, "last_activity_date": 1606706750, "creation_date": 1606706750, "question_id": 65067733, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65067733/parallelising-dataset-on-tensorflowthrows-error", "title": "Parallelising dataset on Tensorflow:throws error", "body": "<p>I have written the following function to define a CNN-model :</p>\n<pre><code>import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Conv1D, Flatten\nfrom tensorflow.keras import optimizers\nimport numpy as np\nfrom sklearn.metrics import confusion_matrix\nimport time\nimport tensorflow.keras.metrics\n\nfrom tensorflow.python.client import device_lib\n\n    def convolutional_neural_network(x, y):\n        print(&quot;Hyper-parameter values:\\n&quot;)\n        print('Momentum Rate =',0.25,'\\n')\n        print('learning rate =',0.05,'\\n')\n        print('Number of neurons =',30,'\\n')\n    \n        startTime = time.clock()\n        model = Sequential()\n        model.add(Conv1D(filters=64,input_shape=train_X.shape[1:],activation='relu',kernel_size = 3))\n        model.add(Flatten())\n        model.add(Dense(neurons,activation='relu')) # first hidden layer\n        model.add(Dense(neurons, activation='relu')) # second hidden layer\n        model.add(Dense(neurons, activation='relu'))\n        model.add(Dense(neurons, activation='relu'))\n        model.add(Dense(10, activation='softmax'))\n        sgd = optimizers.SGD(lr=0.05, decay=1e-6, momentum=0.25, nesterov=True)\n        model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy',tensorflow.keras.metrics.Precision()])\n        history = model.fit(train_X, train_y, validation_split=0.2, epochs=10, batch_size=100)\n        endTime = time.clock()\n        print(&quot;Time = &quot;, endTime-startTime)\n        print(&quot;\\nTraining Data Statistics:\\n&quot;)\n        print(&quot;CNN Model with Relu Hidden Units and Cross-Entropy Error Function:&quot;)\n        print_statistics(model, x, y)\n</code></pre>\n<p>Now,I am trying to make sure that the dataset is parallelised to train the model simultaneously by using the code below :</p>\n<pre><code>def make_parallel(fn, num_gpus, num_outputs, **kwargs):\n    in_splits = {}\n    for k, v in kwargs.items():\n        in_splits[k] = tf.split(v, num_gpus)\n\n    out_splits = [[]]*num_outputs\n    for i in range(num_gpus):\n        with tf.device(tf.DeviceSpec(device_type=&quot;GPU&quot;, device_index=i)):\n            with tf.variable_scope(tf.get_variable_scope(), reuse=i &gt; 0):\n                out_ = fn(**{k : v[i] for k, v in in_splits.items()})\n                for j in range(num_outputs):\n                        out_splits[j].append(out_[j])\n\n    # tf.stack may be needed instead of tf.concat depending on the shape of some of your variables.\n    return [tf.concat(x, axis=0) for x in out_splits]\n\n# Finding how many devices are available\ngpus = [x.name for x in device_lib.list_local_devices() if x.device_type == 'GPU']\nnum_gpus = len(gpus)\n\nif num_gpus &gt; 0:\n    y_pred, y_pred_cls, cost = make_parallel(convolutional_neural_network, num_gpus, 3, x, y)\nelse:\n    # CPU-only version\n    y_pred, y_pred_cls, cost, f_vector = convolutional_neural_network(x, y)\n</code></pre>\n<p>The code is running fine,but throwing me following error :</p>\n<pre><code>y_pred, y_pred_cls, cost = make_parallel(convolutional_neural_network, num_gpus, 3, x, y)\nNameError: name 'x' is not defined\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 50}]