[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras", "recurrent-neural-network"], "owner": {"account_id": 1162208, "reputation": 24701, "user_id": 1141493, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/25452a0e44babf480d85311e5ece4421?s=256&d=identicon&r=PG", "display_name": "kiriloff", "link": "https://stackoverflow.com/users/1141493/kiriloff"}, "is_answered": false, "view_count": 418, "answer_count": 1, "score": 0, "last_activity_date": 1632317917, "creation_date": 1632311950, "question_id": 69283768, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/69283768/tensorflow-gru-layer-call-arguments-typeerror-call-got-an-unexpected-key", "title": "Tensorflow GRU layer call() arguments -- TypeError: call() got an unexpected keyword argument &#39;reset_after&#39;", "body": "<p>I implement a model with a GRU layer, the model and its training work fine with just</p>\n<pre><code>   class MyModel(tf.keras.Model):\n      def __init__(self, vocab_size, embedding_dim, rnn_units):\n        super().__init__(self)\n        self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n        self.gru = tf.keras.layers.GRU(rnn_units,\n                                       return_sequences=True,\n                                       return_state=True)\n        self.dense = tf.keras.layers.Dense(vocab_size)\n    \n      def call(self, inputs, states=None, return_state=False, training=False):\n        x = inputs\n        x = self.embedding(x, training=training)\n        if states is None:\n          states = self.gru.get_initial_state(x)\n        x, states = self.gru(x, initial_state=states, training=training)\n        x = self.dense(x, training=training)\n    \n        if return_state:\n          return x, states\n        else:\n          return x\n</code></pre>\n<p>I just change the definition of the GRU layer to make it (1) CuDNN compatible (2) add dropout</p>\n<p>In the model definition I kept</p>\n<pre><code>    self.gru = tf.keras.layers.GRU(rnn_units,\n                                   return_sequences=True,\n                                   return_state=True)\n</code></pre>\n<p>In the call function I set</p>\n<pre><code>    if states is None:\n      states = self.gru.get_initial_state(x)\n    x, states = self.gru(x, initial_state=states, training=training,\n                         reset_after=True, recurrent_activation='sigmoid', # to make it more GPU friendly\n                         recurrent_dropout=0.2, dropout=0.2 # to add some dropout to it\n                         )\n</code></pre>\n<p>The <a href=\"https://keras.io/api/layers/recurrent_layers/gru/\" rel=\"nofollow noreferrer\">Keras</a> or the <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/layers/GRU\" rel=\"nofollow noreferrer\">Tensorflow</a> guidelines seem to be observed, while I get this error</p>\n<pre><code>Traceback (most recent call last):\n  File &quot;rnn_train_004.py&quot;, line 125, in &lt;module&gt;\n    example_batch_predictions = model(input_example_batch)\n  File &quot;/usr/local/lib/python3.6/dist-packages/keras/engine/base_layer.py&quot;, line 1037, in __call__\n    outputs = call_fn(inputs, *args, **kwargs)\n  File &quot;rnn_train_004.py&quot;, line 107, in call\n    recurrent_dropout=0.2, dropout=0.2 # to add some dropout to it\n  File &quot;/usr/local/lib/python3.6/dist-packages/keras/layers/recurrent.py&quot;, line 716, in __call__\n    return super(RNN, self).__call__(inputs, **kwargs)\n  File &quot;/usr/local/lib/python3.6/dist-packages/keras/engine/base_layer.py&quot;, line 1037, in __call__\n    outputs = call_fn(inputs, *args, **kwargs)\nTypeError: call() got an unexpected keyword argument 'reset_after'\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 44}]