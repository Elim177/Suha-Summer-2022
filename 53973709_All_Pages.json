[{"items": [{"tags": ["python", "tensorflow", "tensorflow-datasets"], "owner": {"account_id": 3948330, "reputation": 5043, "user_id": 3259896, "user_type": "registered", "accept_rate": 60, "profile_image": "https://www.gravatar.com/avatar/641c30a7b383022f22b53c8cedb04e3f?s=256&d=identicon&r=PG&f=1", "display_name": "SantoshGupta7", "link": "https://stackoverflow.com/users/3259896/santoshgupta7"}, "is_answered": true, "view_count": 1168, "accepted_answer_id": 54154743, "answer_count": 2, "score": 0, "last_activity_date": 1547244789, "creation_date": 1546121227, "question_id": 53973709, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/53973709/tensorflow-raggedtensor-from-tensor-flattening-values-from-all-arrays-into-one", "title": "Tensorflow: RaggedTensor.from_tensor flattening values from all arrays into one array, instead of preserving original number of arrays", "body": "<p>In the official documentation, <code>RaggedTensor.from_tensor</code> will work something like this. </p>\n\n<pre><code>x = [[1, 3, -1, -1], [2, -1, -1, -1], [4, 5, 8, 9]]\nprint(tf.RaggedTensor.from_tensor(x, padding=-1))\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code> &lt;tf.RaggedTensor [[1, 3], [2], [4, 5, 8, 9]]&gt;\n</code></pre>\n\n<p>Preserving the original number of arrays. </p>\n\n<p>However, when working with a batch outputted by the dataset api iterator, it flattens it to one array. Here is the key parts of the code. </p>\n\n<pre><code>dataset = dataset.padded_batch(3, padded_shapes=([None],[None]), padding_values=(tf.constant(-1, dtype=tf.int64)\n                                                 ,tf.constant(-1, dtype=tf.int64)))\niterator = dataset.make_one_shot_iterator()\ni, data = iterator.get_next()\n\ndata2= tf.RaggedTensor.from_tensor(data, padding=-1)\n\nwith tf.Session() as sess:\n    print(sess.run([ data, data2 ]))\n    print(sess.run([ data, data2 ]))\n    print(sess.run([ data, data2 ]))\n</code></pre>\n\n<p>Here is the output</p>\n\n<pre><code>[array([[ 0,  1,  2,  3, -1],\n       [ 2,  3,  4, -1, -1],\n       [ 3,  6,  5,  4,  3]]), tf.RaggedTensorValue(values=array([0, 1, 2, 3, 2, 3, 4, 3, 6, 5, 4, 3]), row_splits=array([ 0,  4,  7, 12]))]\n[array([[ 3,  9, -1, -1],\n       [ 0,  1,  2,  3],\n       [ 2,  3,  4, -1]]), tf.RaggedTensorValue(values=array([3, 9, 0, 1, 2, 3, 2, 3, 4]), row_splits=array([0, 2, 6, 9]))]\n[array([[ 3,  6,  5,  4,  3],\n       [ 3,  9, -1, -1, -1],\n       [ 0,  1,  2,  3, -1]]), tf.RaggedTensorValue(values=array([3, 6, 5, 4, 3, 3, 9, 0, 1, 2, 3]), row_splits=array([ 0,  5,  7, 11]))]\n</code></pre>\n\n<p>Here is the full code to the minimal example to reproduce the results</p>\n\n<pre><code>!pip install -q tf-nightly\nimport math\nimport numpy as np\nimport tensorflow as tf\n\n#Generate Test data\ncells = np.array([[0,1,2,3], [2,3,4], [3,6,5,4,3], [3,9]])\nmells = np.array([[0], [2], [3], [9]])\nprint(cells)\n\n#Write test data to tf.records file\nwriter = tf.python_io.TFRecordWriter('test.tfrecords')\nfor index in range(mells.shape[0]):\n    example = tf.train.Example(features=tf.train.Features(feature={\n        'num_value':tf.train.Feature(int64_list=tf.train.Int64List(value=mells[index])),\n        'list_value':tf.train.Feature(int64_list=tf.train.Int64List(value=cells[index]))\n    }))\n    writer.write(example.SerializeToString())\nwriter.close()\n\n#Open tfrecords file and generate batch from data \nfilenames = [\"test.tfrecords\"]\ndataset = tf.data.TFRecordDataset(filenames)\ndef _parse_function(example_proto):\n    keys_to_features = {'num_value':tf.VarLenFeature(tf.int64),\n                        'list_value':tf.VarLenFeature(tf.int64)}\n    parsed_features = tf.parse_single_example(example_proto, keys_to_features)\n    return tf.sparse.to_dense(parsed_features['num_value']), \\\n           tf.sparse.to_dense(parsed_features['list_value'])\n# Parse the record into tensors.\ndataset = dataset.map(_parse_function)\n# Shuffle the dataset\ndataset = dataset.shuffle(buffer_size=1)\n# Repeat the input indefinitly\ndataset = dataset.repeat()  \n# Generate batches\ndataset = dataset.padded_batch(3, padded_shapes=([None],[None]), padding_values=(tf.constant(-1, dtype=tf.int64)\n                                                 ,tf.constant(-1, dtype=tf.int64)))\niterator = dataset.make_one_shot_iterator()\ni, data = iterator.get_next()\n\n#Remove padding\ndata2= tf.RaggedTensor.from_tensor(data, padding=-1)\n\n#Print data\nwith tf.Session() as sess:\n    sess.run(tf.global_variables_initializer())\n    print(sess.run([ data, data2 ]))\n    print(sess.run([ data, data2 ]))\n    print(sess.run([ data, data2 ]))\n</code></pre>\n\n<p>Here is the official Tensorflow Guide to ragged tensors</p>\n\n<p><a href=\"https://www.tensorflow.org/guide/ragged_tensors\" rel=\"nofollow noreferrer\">https://www.tensorflow.org/guide/ragged_tensors</a></p>\n\n<p>And official Tensorflow documentation </p>\n\n<p><a href=\"https://www.tensorflow.org/versions/r1.13/api_docs/python/tf/RaggedTensor\" rel=\"nofollow noreferrer\">https://www.tensorflow.org/versions/r1.13/api_docs/python/tf/RaggedTensor</a></p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 297}]