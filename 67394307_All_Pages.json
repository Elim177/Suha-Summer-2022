[{"items": [{"tags": ["python", "tensorflow"], "owner": {"account_id": 301459, "reputation": 369, "user_id": 609201, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/7d8d4d5fac7696c1944ac75e992cd9a4?s=256&d=identicon&r=PG&f=1", "display_name": "algol", "link": "https://stackoverflow.com/users/609201/algol"}, "is_answered": true, "view_count": 257, "accepted_answer_id": 67470974, "answer_count": 1, "score": 1, "last_activity_date": 1620652018, "creation_date": 1620180671, "last_edit_date": 1620413344, "question_id": 67394307, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67394307/tensorflow-autograph-issue-with-for-loop", "title": "Tensorflow Autograph issue with for loop", "body": "<p>I would like to extract the derivatives of a Tensorflow model with respect to its input using autograph for speed, but for some reason autograph gives an error. Here is the function that I am using:</p>\n<pre><code>@tf.function\ndef get_dydt(data,model,outsize):\n    ipt = data\n    y_list = []\n    with tf.GradientTape(persistent=True,watch_accessed_variables=True) as tape_1:\n        tape_1.watch(ipt)\n\n        with tf.GradientTape(persistent=True, watch_accessed_variables=True) as tape_2:\n            tape_2.watch(ipt)\n            y = model(ipt)\n\n\n        dydt_list = tf.TensorArray(tf.float32, size=0, dynamic_size=True,infer_shape = True)\n\n        for i in tf.range(outsize):\n            \n            dydt_list.write(i,tape_2.gradient(y[i,:],ipt))\n        dydt = dydt_list.stack()\n\n    return dydt\n</code></pre>\n<p>This gives the following error: <code>ValueError: None values not supported.</code> for the line <code>dydt_list.write(i,tape_2.gradient(y[:,i],ipt))</code>. I assume this error is due to the fact that placeholders are used for the sizes, but I'm not sure how to do this in a way that autograph will accept. What can I do to address this?</p>\n<p>Full traceback:</p>\n<pre><code>----------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-50-b524f1fd6255&gt; in &lt;module&gt;\n----&gt; 1 training_step_test_2(batch,model)\n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py in __call__(self, *args, **kwds)\n    826     tracing_count = self.experimental_get_tracing_count()\n    827     with trace.Trace(self._name) as tm:\n--&gt; 828       result = self._call(*args, **kwds)\n    829       compiler = &quot;xla&quot; if self._experimental_compile else &quot;nonXla&quot;\n    830       new_tracing_count = self.experimental_get_tracing_count()\n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py in _call(self, *args, **kwds)\n    869       # This is the first call of __call__, so we have to initialize.\n    870       initializers = []\n--&gt; 871       self._initialize(args, kwds, add_initializers_to=initializers)\n    872     finally:\n    873       # At this point we know that the initialization is complete (or less\n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py in _initialize(self, args, kwds, add_initializers_to)\n    723     self._graph_deleter = FunctionDeleter(self._lifted_initializer_graph)\n    724     self._concrete_stateful_fn = (\n--&gt; 725         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access\n    726             *args, **kwds))\n    727 \n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)\n   2967       args, kwargs = None, None\n   2968     with self._lock:\n-&gt; 2969       graph_function, _ = self._maybe_define_function(args, kwargs)\n   2970     return graph_function\n   2971 \n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\function.py in _maybe_define_function(self, args, kwargs)\n   3359 \n   3360           self._function_cache.missed.add(call_context_key)\n-&gt; 3361           graph_function = self._create_graph_function(args, kwargs)\n   3362           self._function_cache.primary[cache_key] = graph_function\n   3363 \n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)\n   3194     arg_names = base_arg_names + missing_arg_names\n   3195     graph_function = ConcreteFunction(\n-&gt; 3196         func_graph_module.func_graph_from_py_func(\n   3197             self._name,\n   3198             self._python_function,\n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)\n    988         _, original_func = tf_decorator.unwrap(python_func)\n    989 \n--&gt; 990       func_outputs = python_func(*func_args, **func_kwargs)\n    991 \n    992       # invariant: `func_outputs` contains only Tensors, CompositeTensors,\n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\eager\\def_function.py in wrapped_fn(*args, **kwds)\n    632             xla_context.Exit()\n    633         else:\n--&gt; 634           out = weak_wrapped_fn().__wrapped__(*args, **kwds)\n    635         return out\n    636 \n\n~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\func_graph.py in wrapper(*args, **kwargs)\n    975           except Exception as e:  # pylint:disable=broad-except\n    976             if hasattr(e, &quot;ag_error_metadata&quot;):\n--&gt; 977               raise e.ag_error_metadata.to_exception(e)\n    978             else:\n    979               raise\n\nValueError: in user code:\n\n    &lt;ipython-input-49-24030d8d0c52&gt;:55 training_step_test_2  *\n        dydt_list.write(i,tape_2.gradient(y[i,:],ipt))\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\util\\tf_should_use.py:247 wrapped  **\n        return _add_should_use_warning(fn(*args, **kwargs),\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\ops\\tensor_array_ops.py:1159 write\n        return self._implementation.write(index, value, name=name)\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\ops\\tensor_array_ops.py:534 write\n        value = ops.convert_to_tensor(\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\profiler\\trace.py:163 wrapped\n        return func(*args, **kwargs)\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\ops.py:1540 convert_to_tensor\n        ret = conversion_func(value, dtype=dtype, name=name, as_ref=as_ref)\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py:339 _constant_tensor_conversion_function\n        return constant(v, dtype=dtype, name=name)\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py:264 constant\n        return _constant_impl(value, dtype, shape, name, verify_shape=False,\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\constant_op.py:281 _constant_impl\n        tensor_util.make_tensor_proto(\n    C:\\Users\\~\\anaconda3\\envs\\tensorflowGPU\\lib\\site-packages\\tensorflow\\python\\framework\\tensor_util.py:445 make_tensor_proto\n        raise ValueError(&quot;None values not supported.&quot;)\n\n    ValueError: None values not supported.\n</code></pre>\n<p>This problem can be reproduced in the following manner:</p>\n<pre><code>net = tf.keras.models.Sequential()\nnet.add(tf.keras.Input(shape = (1,)))\nfor i in range(5):\n    net.add(tf.keras.layers.Dense(50,activation = 'swish'))\nnet.add(tf.keras.layers.Dense(3))\n\nipt = tf.random.uniform([4,1],0,1)\n\nget_dydt(ipt,net,3)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 224}]