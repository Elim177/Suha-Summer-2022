[{"items": [{"tags": ["tensorflow", "tfrecord"], "owner": {"account_id": 7112658, "reputation": 914, "user_id": 6393479, "user_type": "registered", "accept_rate": 55, "profile_image": "https://i.stack.imgur.com/WKBE5.jpg?s=256&g=1", "display_name": "Uchiha Madara", "link": "https://stackoverflow.com/users/6393479/uchiha-madara"}, "is_answered": true, "view_count": 1736, "accepted_answer_id": 51399647, "answer_count": 2, "score": 4, "last_activity_date": 1531909611, "creation_date": 1531334735, "last_edit_date": 1531430239, "question_id": 51292318, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/51292318/tfrecords-occupy-more-space-than-original-jpeg-images", "title": "TFrecords occupy more space than original JPEG images", "body": "<p>I'm trying to convert my Jpeg image set into to TFrecords. But TFrecord file is taking almost 5x more space than the image set. After a lot of googling, I learned that when JPEG are written into TFrecords, they aren't JPEG anymore. However I haven't come across an understandable code solution to this problem. Please tell me what changes ought to be made in the code below to write JPEG to Tfrecords.</p>\n\n<pre><code>def print_progress(count, total):\n    pct_complete = float(count) / total\n    msg = \"\\r- Progress: {0:.1%}\".format(pct_complete)\n    sys.stdout.write(msg)\n    sys.stdout.flush()\n\ndef wrap_int64(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=value))\n\ndef wrap_bytes(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef convert(image_paths , labels, out_path):\n    # Args:\n    # image_paths   List of file-paths for the images.\n    # labels        Class-labels for the images.\n    # out_path      File-path for the TFRecords output file.\n\n    print(\"Converting: \" + out_path)\n\n    # Number of images. Used when printing the progress.\n    num_images = len(image_paths)\n\n    # Open a TFRecordWriter for the output-file.\n    with tf.python_io.TFRecordWriter(out_path) as writer:\n\n        # Iterate over all the image-paths and class-labels.\n        for i, (path, label) in enumerate(zip(image_paths, labels)):\n            # Print the percentage-progress.\n            print_progress(count=i, total=num_images-1)\n\n            # Load the image-file using matplotlib's imread function.\n            img = imread(path)\n            # Convert the image to raw bytes.\n            img_bytes = img.tostring()\n\n            # Create a dict with the data we want to save in the\n            # TFRecords file. You can add more relevant data here.\n            data = \\\n            {\n                'image': wrap_bytes(img_bytes),\n                'label': wrap_int64(label)\n            }\n\n            # Wrap the data as TensorFlow Features.\n            feature = tf.train.Features(feature=data)\n\n            # Wrap again as a TensorFlow Example.\n            example = tf.train.Example(features=feature)\n\n            # Serialize the data.\n            serialized = example.SerializeToString()\n\n            # Write the serialized data to the TFRecords file.\n            writer.write(serialized)\n</code></pre>\n\n<p>Edit: Can someone please answer this ?!!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 35}]