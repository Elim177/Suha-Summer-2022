[{"items": [{"tags": ["python", "time-series", "lstm", "tensorflow2.0", "forecasting"], "owner": {"account_id": 18077962, "reputation": 177, "user_id": 13140685, "user_type": "registered", "profile_image": "https://lh3.googleusercontent.com/a-/AOh14GgUaFQERpsW0eQT8nCbB5fixS5ND7mYZYvRcltS=k-s256", "display_name": "jigar", "link": "https://stackoverflow.com/users/13140685/jigar"}, "is_answered": false, "view_count": 78, "answer_count": 0, "score": 1, "last_activity_date": 1615304995, "creation_date": 1615304221, "last_edit_date": 1615304995, "question_id": 66549994, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66549994/trouble-creating-lstm-model-for-multivariate-forecasting", "title": "Trouble creating LSTM model for multivariate forecasting", "body": "<p><strong>The Data</strong>: <a href=\"https://www.kaggle.com/muthuj7/weather-dataset\" rel=\"nofollow noreferrer\">Weather Dataset</a></p>\n<p>The data provided is in hours.\n<a href=\"https://i.stack.imgur.com/5qAiK.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/5qAiK.jpg\" alt=\"enter image description here\" /></a></p>\n<p>As of now I only selected three parameters in the data frame.</p>\n<p><em>Input:</em></p>\n<pre><code>df.info()\n</code></pre>\n<p><em>Output:</em></p>\n<pre><code>    &lt;class 'pandas.core.frame.DataFrame'&gt;\n    DatetimeIndex: 78888 entries, 2006-01-01 00:00:00 to 2014-12-31 23:00:00\n    Freq: H\n    Data columns (total 3 columns):\n     #   Column           Non-Null Count  Dtype  \n    ---  ------           --------------  -----  \n     0   Temperature (C)  78888 non-null  float64\n     1   Humidity         78888 non-null  float64\n     2   Visibility (km)  78888 non-null  float64\n    dtypes: float64(3)\n    memory usage: 2.4 MB\n</code></pre>\n<p>One of the parameter's graph is as follows.</p>\n<pre><code>    df['Temperature (C)'].plot(figsize=(30,8))\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/mjXtZ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/mjXtZ.png\" alt=\"Temp in hrs\" /></a></p>\n<p>First I thought of changing the Dataframe from <em>hourly data</em> to <em>monthly data</em> so it will be easier to train.</p>\n<pre><code>    df = df.resample('MS').mean()\n</code></pre>\n<p>Like this,</p>\n<p><a href=\"https://i.stack.imgur.com/IXjVy.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/IXjVy.jpg\" alt=\"Monthly dataframe\" /></a></p>\n<p>And the variation of temperature in months is,</p>\n<pre><code>df['Temperature (C)'].plot(figsize=(30,8))\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/tv6Ig.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/tv6Ig.png\" alt=\"temp in months\" /></a></p>\n<h3>Test &amp; train:</h3>\n<pre><code>    rows_per_month=1\n    test_months = 18 #number of months we want to predict in the future.\n    \n    test_indices = test_months*rows_per_month\n    test_indices\n    \n    # train and test split:\n    train = df_final.iloc[:-test_indices]\n    \n    # Choose the variable/parameter you want to predict\n    test = df_final.iloc[-test_indices:]\n</code></pre>\n<p>I scaled the data using <code>MinMaxScaler</code> from <em>sci-kit learn</em></p>\n<h3>Generator Parameters:</h3>\n<pre><code>    length =  12*rows_per_month #Length of output sequences (in number of timesteps)\n    batch_size = 1 #Number of timeseries sample in batch\n    generator = tf.keras.preprocessing.sequence.TimeseriesGenerator(scaled_train,scaled_train,length=length,batch_size=batch_size)\n</code></pre>\n<h1>Model for <code>df</code>(in months):</h1>\n<pre><code>    # define model\n    model = Sequential()\n    \n    model.add(tf.keras.layers.LSTM(50, input_shape=(length,scaled_train.shape[1]),return_sequences=True))\n    model.add(tf.keras.layers.LSTM(50))\n    \n    \n    #NOTE: Do not specify the activation function for LSTM layers, this is because it will not run on GPU.\n    model.add(Dense(scaled_train.shape[1]))\n    \n    model.compile(optimizer='adam', loss='mse')\n</code></pre>\n<p>The model was trained for 24 epochs and did fairly well on predicting the three parameters as follows.</p>\n<p><a href=\"https://i.stack.imgur.com/fWGDH.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/fWGDH.jpg\" alt=\"Loss for month model\" /></a></p>\n<h1>Prediction from model (when <code>df</code> is monthly):</h1>\n<p><a href=\"https://i.stack.imgur.com/UZvcb.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/UZvcb.jpg\" alt=\"Prediction of monthly model\" /></a>\nThis is a fairly decent prediction.</p>\n<blockquote>\n<p>The problem is when I increase the density of the data and make it\nto <em>daily</em> instead of <em>monthly</em>.</p>\n</blockquote>\n<p>I used the original data and did the following:</p>\n<pre><code>    df = df.resample('D').mean()\n</code></pre>\n<p>The variation of temperature in days:</p>\n<pre><code>    df['Temperature (C)'].plot(figsize=(30,8))\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/7vequ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/7vequ.png\" alt=\"temp in days\" /></a></p>\n<h3>Test &amp; train:</h3>\n<p>The only thing changed in here is <code>rows_per_month = 30</code>, rest everything is the same.</p>\n<h3>Generator Parameters:</h3>\n<p>Also the same as above.</p>\n<h1>Model for <code>df</code>(in days):</h1>\n<p><strong>The same Model</strong> (as I used when <code>df</code> was in months)</p>\n<pre><code>    model = Sequential()\n    \n    model.add(tf.keras.layers.LSTM(50, input_shape=(length,scaled_train.shape[1]),return_sequences=True))\n    model.add(tf.keras.layers.LSTM(50))\n    # model.add(tf.keras.layers.LSTM(50)) #add this layer if df is in 'days'\n    \n    #NOTE: Do not specify the activation function for LSTM layers, this is because it will not run on GPU.\n    model.add(Dense(scaled_train.shape[1]))\n    \n    model.compile(optimizer='adam', loss='mse')\n</code></pre>\n<p>The model was trained for 24 epochs and the model did not predict properly.</p>\n<h2>losses:</h2>\n<p><a href=\"https://i.stack.imgur.com/ytxHG.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ytxHG.jpg\" alt=\"Daily model loss\" /></a></p>\n<h1>Prediction from model (when <code>df</code> is daily)</h1>\n<p><a href=\"https://i.stack.imgur.com/rtWNX.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/rtWNX.jpg\" alt=\"prediction of daily model\" /></a></p>\n<p>I tried adding one more layer of <strong>50 LSTM</strong> units.</p>\n<pre><code>    model = Sequential()\n    \n    model.add(tf.keras.layers.LSTM(50, input_shape=(length,scaled_train.shape[1]),return_sequences=True))\n    model.add(tf.keras.layers.LSTM(50, return_sequences=True))\n    model.add(tf.keras.layers.LSTM(50)) #add this layer if df is in 'days'\n    \n    #NOTE: Do not specify the activation function for LSTM layers, this is because it will not run on GPU.\n    model.add(Dense(scaled_train.shape[1]))\n    \n    model.compile(optimizer='adam', loss='mse')\n</code></pre>\n<p>but the results were similar.</p>\n<p>I also tried to train the model for more epochs (~ 100) but didn't get results.</p>\n<p>I think I'm missing a key point, the periodicity of the data remains the same only the density of the points change, why is this affecting the accuracy of the model?</p>\n<ul>\n<li>How can I achieve a decent accuracy from the model which predicts daily parameters? and for hourly data as well?</li>\n</ul>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 190}]