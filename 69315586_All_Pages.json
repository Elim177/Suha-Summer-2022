[{"items": [{"tags": ["python", "tensorflow", "machine-learning"], "owner": {"account_id": 1162208, "reputation": 24701, "user_id": 1141493, "user_type": "registered", "accept_rate": 99, "profile_image": "https://www.gravatar.com/avatar/25452a0e44babf480d85311e5ece4421?s=256&d=identicon&r=PG", "display_name": "kiriloff", "link": "https://stackoverflow.com/users/1141493/kiriloff"}, "is_answered": true, "view_count": 1214, "accepted_answer_id": 69315741, "answer_count": 1, "score": 7, "last_activity_date": 1632575874, "creation_date": 1632488910, "last_edit_date": 1632531663, "question_id": 69315586, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/69315586/when-are-model-call-and-train-step-called", "title": "When are Model call() and train_step() called?", "body": "<p>I am going through this tutorial on how to customize the training loop</p>\n<p><a href=\"https://colab.research.google.com/github/tensorflow/docs/blob/snapshot-keras/site/en/guide/keras/customizing_what_happens_in_fit.ipynb#scrollTo=46832f2077ac\" rel=\"noreferrer\">https://colab.research.google.com/github/tensorflow/docs/blob/snapshot-keras/site/en/guide/keras/customizing_what_happens_in_fit.ipynb#scrollTo=46832f2077ac</a></p>\n<p>The last example shows a GAN implemented with a custom training, where only <code>__init__</code>, <code>train_step</code>, and <code>compile</code> methods are defined</p>\n<pre><code>class GAN(keras.Model):\n    def __init__(self, discriminator, generator, latent_dim):\n        super(GAN, self).__init__()\n        self.discriminator = discriminator\n        self.generator = generator\n        self.latent_dim = latent_dim\n\n    def compile(self, d_optimizer, g_optimizer, loss_fn):\n        super(GAN, self).compile()\n        self.d_optimizer = d_optimizer\n        self.g_optimizer = g_optimizer\n        self.loss_fn = loss_fn\n\n    def train_step(self, real_images):\n        if isinstance(real_images, tuple):\n            real_images = real_images[0]\n        ...\n</code></pre>\n<p>What happens if my model also has a <code>call()</code> custom function? Does <code>train_step()</code> overrides <code>call()</code>?\nAren't <code>call()</code> and <code>train_step()</code> both called by <code>fit()</code> and what is the difference between both ?</p>\n<p>Below another piece of code &quot;I&quot; wrote where I wonder what is called into <code>fit()</code>, <code>call()</code> or <code>train_step()</code>:</p>\n<pre><code>class MyModel(tf.keras.Model):\n  def __init__(self, vocab_size, embedding_dim, rnn_units):\n    super().__init__(self)\n    self.embedding = tf.keras.layers.Embedding(vocab_size, embedding_dim)\n    self.gru = tf.keras.layers.GRU(rnn_units,\n                                   return_sequences=True,\n                                   return_state=True,\n                                   reset_after=True\n                                   )\n    self.dense = tf.keras.layers.Dense(vocab_size)\n\n  def call(self, inputs, states=None, return_state=False, training=False):\n    x = inputs\n    x = self.embedding(x, training=training)\n    if states is None:\n      states = self.gru.get_initial_state(x)\n    x, states = self.gru(x, initial_state=states, training=training)\n    x = self.dense(x, training=training)\n\n    if return_state:\n      return x, states\n    else:\n      return x\n\n  @tf.function\n  def train_step(self, inputs):\n    # unpack the data\n    inputs, labels = inputs\n  \n    with tf.GradientTape() as tape:\n      predictions = self(inputs, training=True) # forward pass\n      # Compute the loss value\n      # (the loss function is configured in `compile()`)\n      loss=self.compiled_loss(labels, predictions, regularization_losses=self.losses)\n\n    # compute the gradients\n    grads=tape.gradient(loss, model.trainable_variables)\n    # Update weights\n    self.optimizer.apply_gradients(zip(grads, model.trainable_variables))\n    # Update metrics (includes the metric that tracks the loss)\n    self.compiled_metrics.update_state(labels, predictions)\n\n    # Return a dict mapping metric names to current value\n    return {m.name: m.result() for m in self.metrics}\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 45}]