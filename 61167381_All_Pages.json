[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "neural-network"], "owner": {"user_type": "does_not_exist", "display_name": "user13290923"}, "is_answered": true, "view_count": 121, "closed_date": 1586692371, "accepted_answer_id": 61170809, "answer_count": 1, "score": 1, "last_activity_date": 1598126450, "creation_date": 1586670509, "last_edit_date": 1598126450, "question_id": 61167381, "link": "https://stackoverflow.com/questions/61167381/deep-neural-network-to-learn-a-function-fx-x2", "closed_reason": "Duplicate", "title": "Deep Neural Network to learn a function f(x) = x^2", "body": "<p>Currently, I have a function <code>f(x) = x^2</code>.</p>\n<p>I have a dataset, whose feature is x, and the corresponding label is x^2.</p>\n<p>I would like my machine learning model to somewhat accurately predict new values.</p>\n<p>For example, the prediction of 300 should be close to 300*300 = 90000</p>\n<p>In my code, I first create my training data features and labels, which look like\nfeatures: [0, 1, 2, ... 999]\nlabels: [0, 1, 4, ... 999*999]</p>\n<pre><code>\nimport tensorflow as tf\nimport numpy as np\nimport logging\nimport matplotlib.pyplot as plt\n\nlogger = tf.get_logger()\nlogger.setLevel(logging.ERROR)\nval = np.empty([1000], dtype = float)\nval_squared = np.empty([1000], dtype = float)\n\n#Create training data\nfor i in range(1000):\n    val[i] = i\n    val_squared[i] = i*i;\n\n#Create layers of Deep Neural Network\nl0 = tf.keras.layers.Dense(units = 500,input_shape=[1])\nl1 = tf.keras.layers.Dense(units = 500, activation = 'sigmoid')\nl2 = tf.keras.layers.Dense(units = 500, activation = 'sigmoid')\nl3 = tf.keras.layers.Dense(units = 1)\nmodel = tf.keras.Sequential([l0, l1, l2, l3])\n\nmodel.compile(loss='mean_squared_error', optimizer = tf.keras.optimizers.Adam(lr=10))\n\nhistory = model.fit(val,val_squared,epochs = 500, verbose = False, batch_size = 500)\nplt.xlabel('Epoch Number')\nplt.ylabel(&quot;Loss Magnitude&quot;)\nplt.plot(history.history['loss'])\n\n\nprint(&quot;Prediction of 200: {}&quot;.format(model.predict([200.0])))\nplt.show()\n</code></pre>\n<p>When the graph is plotted, we can see that the loss converges, which is a sign that the model is learning. However, the actual prediction is very different from our expected value - 332823.16 as opposed to 40000.</p>\n<p>The plotted graph can be seen here: <a href=\"https://imgur.com/a/GJMSrbV\" rel=\"nofollow noreferrer\">https://imgur.com/a/GJMSrbV</a></p>\n<p>I have tried changing the activation function to relu and tanh, and tweaked hyperparameters to make sure the loss converged, but to no effect. Are there any other ways I can improve the neural network's performance?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 287}]