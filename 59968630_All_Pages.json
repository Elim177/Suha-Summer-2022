[{"items": [{"tags": ["python", "tensorflow", "keras", "tensorflow2.0"], "owner": {"account_id": 10129457, "reputation": 875, "user_id": 7483509, "user_type": "registered", "accept_rate": 20, "profile_image": "https://lh3.googleusercontent.com/-rLN-a5QG95Q/AAAAAAAAAAI/AAAAAAAAAAA/ACHi3reidV1ZIp-ccT7ykiC9GJpJ54O-4A/mo/photo.jpg?sz=256", "display_name": "Nick Skywalker", "link": "https://stackoverflow.com/users/7483509/nick-skywalker"}, "is_answered": true, "view_count": 1892, "accepted_answer_id": 59988621, "answer_count": 1, "score": 5, "last_activity_date": 1580395793, "creation_date": 1580306251, "question_id": 59968630, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/59968630/tensorflow-one-custom-metric-for-multioutput-models", "title": "Tensorflow one custom metric for multioutput models", "body": "<p>I can't find the info in the documentation so I am asking here.</p>\n\n<p>I have a multioutput model with 3 different outputs:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>model = tf.keras.Model(inputs=[input], outputs=[output1, output2, output3])\n</code></pre>\n\n<p>The predicted labels for validation are constructed from these 3 outputs to form only one, it's a post-processing step. The dataset used for training is a dataset of those 3 intermediary outputs, for validation I evaluate on a dataset of labels instead of the 3 kind of intermediary data.</p>\n\n<p>I would like to evaluate my model using a custom metric that handle the post processing and comparaison with the ground truth.</p>\n\n<p><strong>My question is</strong>, in the code of the custom metric, will <code>y_pred</code> be a list of the 3 outputs of the model?</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>class MyCustomMetric(tf.keras.metrics.Metric):\n\n  def __init__(self, name='my_custom_metric', **kwargs):\n    super(MyCustomMetric, self).__init__(name=name, **kwargs)\n\n  def update_state(self, y_true, y_pred, sample_weight=None):\n    # ? is y_pred a list [batch_output_1, batch_output_2, batch_output_3] ? \n\n  def result(self):\n    pass \n\n# one single metric handling the 3 outputs?\nmodel.compile(optimizer=tf.compat.v1.train.RMSPropOptimizer(0.01),\n              loss=tf.keras.losses.categorical_crossentropy,\n              metrics=[MyCustomMetric()])\n\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 14}]