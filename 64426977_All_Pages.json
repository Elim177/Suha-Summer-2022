[{"items": [{"tags": ["tensorflow", "keras"], "owner": {"account_id": 276079, "reputation": 1736, "user_id": 569313, "user_type": "registered", "accept_rate": 59, "profile_image": "https://www.gravatar.com/avatar/1bb9d681c73d4e543ce7dbee55241665?s=256&d=identicon&r=PG", "display_name": "B_Miner", "link": "https://stackoverflow.com/users/569313/b-miner"}, "is_answered": true, "view_count": 377, "accepted_answer_id": 64427493, "answer_count": 1, "score": 0, "last_activity_date": 1603110997, "creation_date": 1603109056, "question_id": 64426977, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64426977/tf-keras-how-to-fit-a-model-with-tfrecords-dataset", "title": "TF.Keras How to Fit a Model with TFRECORDS Dataset?", "body": "<p>I have written out a simple single TFRECORDS file that contains three features and a label.\nAs I am following tutorials, it seems that to use these TFRECORDS I need to create a dataset, parse the examples, do other things like normalization through map(). If this is not correct workflow I would be grateful to hear!</p>\n<pre><code>    dataset = tf.data.TFRecordDataset(&quot;dataset.tfrecords&quot;)\n    \n    #parse the protobuffer\n    \n    def _parse_function(proto):\n        # define your tfrecord again. \n        keys_to_features = {'weight_pounds': tf.io.FixedLenFeature([], tf.float32),\n                            'gestation_weeks': tf.io.FixedLenFeature([], tf.float32),\n                            'plurality': tf.io.FixedLenFeature([], tf.float32),\n                            'isMale': tf.io.FixedLenFeature([], tf.float32),\n                          \n                           \n                           }\n        \n        # Load one example\n        parsed_features = tf.io.parse_example(proto, keys_to_features)\n        \n        # Turn your saved image string into an array\n        #parsed_features['image'] = tf.decode_raw(\n        #    parsed_features['image'], tf.uint8)\n        \n        return parsed_features\n    \n    hold_meanstd={\n        'weight_pounds':[7.234738,1.330294],\n        'gestation_weeks':[38.346464,4.153269],\n        'plurality':[1.035285,0.196870]\n    }\n    \n    def normalize(example):\n        example['weight_pounds']=(example['weight_pounds']-hold_meanstd['weight_pounds'][0])/hold_meanstd['weight_pounds'][1]\n        example['gestation_weeks']=(example['gestation_weeks']-hold_meanstd['gestation_weeks'][0])/hold_meanstd['gestation_weeks'][1]\n        example['plurality']=(example['plurality']-hold_meanstd['plurality'][0])/hold_meanstd['plurality'][1]\n        label=example.pop('isMale')\n        return(example,label)\n\ndataset = tf.data.TFRecordDataset([&quot;dataset.tfrecords&quot;]).map(_parse_function)\ndataset =dataset.map(normalize)\ndataset =dataset.batch(64)\n</code></pre>\n<p>Then once I have this dataset, I was thinking I could feed into a Keras model:</p>\n<pre><code>Dense = keras.layers.Dense\nmodel = keras.Sequential(\n        [\n            Dense(500, activation=&quot;relu&quot;, kernel_initializer='uniform',\n                  input_shape=(3,)),\n            Dense(200, activation=&quot;relu&quot;),\n            Dense(100, activation=&quot;relu&quot;),\n            Dense(25, activation=&quot;relu&quot;),\n            Dense(1, activation=&quot;sigmoid&quot;)\n        ])\n\noptimizer = keras.optimizers.RMSprop(lr=0.01)\n\n    # Compile Keras model\nmodel.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=[tf.keras.metrics.AUC()])\n    \nmodel.fit(dataset)\n</code></pre>\n<p>This throws an error:</p>\n<pre><code> ValueError: Layer sequential_1 expects 1 inputs, but it received 3 input tensors. Inputs received: [&lt;tf.Tensor 'ExpandDims:0' shape=(None, 1) dtype=float32&gt;, &lt;tf.Tensor 'ExpandDims_1:0' shape=(None, 1) dtype=float32&gt;, &lt;tf.Tensor 'ExpandDims_2:0' shape=(None, 1) dtype=float32&gt;]\n</code></pre>\n<p>The issue seems to be that the input dataset looks like three inputs instead of one? How to allow Keras to train on a TF RECORDS dataset?</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 47}]