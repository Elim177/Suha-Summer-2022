[{"items": [{"tags": ["python-3.x", "tensorflow", "keras", "deep-learning", "neural-network"], "owner": {"account_id": 16238276, "reputation": 102, "user_id": 11725271, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/237b434cd3ce9e49ea6aa32ef00e6b24?s=256&d=identicon&r=PG&f=1", "display_name": "Yansh", "link": "https://stackoverflow.com/users/11725271/yansh"}, "is_answered": true, "view_count": 1755, "accepted_answer_id": 66939951, "answer_count": 1, "score": 1, "last_activity_date": 1659394167, "creation_date": 1617310672, "last_edit_date": 1617530167, "question_id": 66911470, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/66911470/how-to-apply-grad-cam-on-my-trained-model", "title": "How to apply Grad-CAM on my trained Model?", "body": "<p>I have trained a model to figure out if an image is right or wrong (just 2 classes) and I have used the guide on keras website for <a href=\"https://keras.io/examples/vision/grad_cam/#setup\" rel=\"nofollow noreferrer\">GradCAM</a>.\nThe input images are reshaped to (250, 250) and then normalized by dividing the image numpy array by 255. This is then passed for the training of the model.\nHere is the code attached. I am encountering the following error: <code>Invalid reduction dimension (1 for input with 1 dimension(s) [Op:Mean]</code></p>\n<p><strong>Data</strong></p>\n<pre><code>image = cv2.imread(&quot;/content/drive/MyDrive/SendO2/Train/correct/droidcam-20210128-152301.jpg&quot;)\nimage = cv2.resize(image, (250, 250))\nimage = image.astype('float32') / 255\nimage = np.expand_dims(image, axis=0)\n\n</code></pre>\n<p><strong>Model</strong></p>\n<pre><code>model = Sequential()\n\n#Adding first convolutional layer\nmodel.add(Conv2D(64, (3,3), activation=&quot;relu&quot;))\n\n#Adding maxpooling\nmodel.add(MaxPooling2D((2,2)))\n\n#Adding second convolutional layer and maxpooling\nmodel.add(Conv2D(64, (3,3), activation=&quot;relu&quot;))\nmodel.add(MaxPooling2D((2,2)))\n\n#Adding third convolutional layer and maxpooling\nmodel.add(Conv2D(64, (3,3), activation=&quot;relu&quot;))\nmodel.add(MaxPooling2D((2,2)))\n\n#Adding fourth convolutional layer and maxpooling\nmodel.add(Conv2D(64, (3,3), activation=&quot;relu&quot;))\nmodel.add(MaxPooling2D((2,2)))\n\n#Adding fifth convolutional layer and maxpooling\nmodel.add(Conv2D(64, (3,3), activation=&quot;relu&quot;))\nmodel.add(MaxPooling2D((2,2)))\n\n#Flattening the layers\nmodel.add(Flatten())\n\nmodel.add(Dense(128, input_shape = X.shape[1:], activation=&quot;relu&quot;))\n\n#Output Layer. Since, the image is right/wrong, only 2 neurons is needed.\nmodel.add(Dense(2, activation = &quot;softmax&quot;))\n# model.add(Dense(2, activation = &quot;sigmoid&quot;))\n\nmodel.compile(optimizer = &quot;adam&quot;, loss = &quot;sparse_categorical_crossentropy&quot;, metrics = [&quot;accuracy&quot;])\n</code></pre>\n<p><strong>GradCAM</strong></p>\n<pre><code>def get_img_array(img_path, size):\n    # `img` is a PIL image of size 299x299\n    img = keras.preprocessing.image.load_img(img_path, target_size=size)\n    # `array` is a float32 Numpy array of shape (299, 299, 3)\n    array = keras.preprocessing.image.img_to_array(img)\n    # We add a dimension to transform our array into a &quot;batch&quot;\n    # of size (1, 299, 299, 3)\n    array = np.expand_dims(array, axis=0)\n    print(array.shape)\n    return array\n\ndef make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):\n    # First, we create a model that maps the input image to the activations\n    # of the last conv layer as well as the output predictions\n    grad_model = tf.keras.models.Model(\n        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]\n    )\n\n    # Then, we compute the gradient of the top predicted class for our input image\n    # with respect to the activations of the last conv layer\n    with tf.GradientTape() as tape:\n        last_conv_layer_output, preds = grad_model(img_array)\n        if pred_index is None:\n            pred_index = tf.argmax(preds[0])\n        class_channel = preds[:, pred_index]\n\n    # This is the gradient of the output neuron (top predicted or chosen)\n    # with regard to the output feature map of the last conv layer\n    grads = tape.gradient(class_channel, last_conv_layer_output)\n\n    # This is a vector where each entry is the mean intensity of the gradient\n    # over a specific feature map channel\n    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))\n    # pooled_grads = tf.reduce_mean(grads)\n\n    # We multiply each channel in the feature map array\n    # by &quot;how important this channel is&quot; with regard to the top predicted class\n    # then sum all the channels to obtain the heatmap class activation\n    last_conv_layer_output = last_conv_layer_output[0]\n    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]\n    heatmap = tf.squeeze(heatmap)\n\n    # For visualization purpose, we will also normalize the heatmap between 0 &amp; 1\n    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)\n    return heatmap.numpy()\n</code></pre>\n<p><strong>Adjusting parameters</strong></p>\n<pre><code>img_size = (250, 250)\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\nlast_conv_layer_name = &quot;dense_1&quot;\n\n# The local path to our target image\nimg_path =  &quot;/content/drive/MyDrive/SendO2/Train/correct/droidcam-20210128-152301.jpg&quot;\n\npreprocess_input = keras.applications.xception.preprocess_input\ndecode_predictions = keras.applications.xception.decode_predictions\n\n\ndisplay(Image(img_path))\n\n</code></pre>\n<p><strong>Running them</strong></p>\n<pre><code># Prepare image\nimg_array = preprocess_input(get_img_array(img_path, size=img_size))\n\n# Make model\nmodel = model_builder(weights=&quot;imagenet&quot;)\n\n# Remove last layer's softmax\nmodel.layers[-1].activation = None\n\n# Print what the top predicted class is\npreds = model.predict(img_array)\nprint(&quot;Predicted:&quot;, decode_predictions(preds, top=1)[0])\n\n# Generate class activation heatmap\nheatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)\n\n# Display heatmap\nplt.matshow(heatmap)\nplt.show()\n</code></pre>\n<p>Here is the error:\n<a href=\"https://i.stack.imgur.com/rXx96.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/rXx96.png\" alt=\"enter image description here\" /></a></p>\n<p>I would really be grateful if anyone can help me out here.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 238}]