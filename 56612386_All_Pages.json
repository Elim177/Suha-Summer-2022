[{"items": [{"tags": ["python", "tensorflow", "tensorflow-datasets", "tensorflow-estimator"], "owner": {"account_id": 2520819, "reputation": 5843, "user_id": 2191236, "user_type": "registered", "accept_rate": 92, "profile_image": "https://i.stack.imgur.com/2AlZn.jpg?s=256&g=1", "display_name": "Vahid Mirjalili", "link": "https://stackoverflow.com/users/2191236/vahid-mirjalili"}, "is_answered": true, "view_count": 3103, "accepted_answer_id": 56615591, "answer_count": 2, "score": 3, "last_activity_date": 1595866360, "creation_date": 1560617715, "last_edit_date": 1560626240, "question_id": 56612386, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/56612386/defining-the-input-function-for-tensorflow-pre-made-estimator", "title": "Defining the input-function for TensorFlow pre-made estimator", "body": "<p>I am trying to use the pre-made estimator <code>tf.estimator.DNNClassifier</code> to use on the MNIST dataset. I load the dataset from <code>tensorflow_dataset</code>.</p>\n\n<p>I pursue the following four steps: first building the dataset pipeline and defining the input function:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>## Step 1\nmnist, info = tfds.load('mnist', with_info=True)\n\nds_train_orig, ds_test = mnist['train'], mnist['test']\n\ndef train_input_fn(dataset, batch_size):\n    dataset = dataset.map(lambda x:({'image-pixels':tf.reshape(x['image'], (-1,))}, \n                                    x['label']))\n    return dataset.shuffle(1000).repeat().batch(batch_size)\n</code></pre>\n\n<p>Then, in step 2, I define the feature column with a single key, and shape 784:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>## Step 2:\nimage_feature_column = tf.feature_column.numeric_column(key='image-pixels',\n                                                        shape=(28*28))\n\nimage_feature_column\nNumericColumn(key='image-pixels', shape=(784,), default_value=None, dtype=tf.float32, normalizer_fn=None)\n</code></pre>\n\n<p>Step 3, I instantiated the estimator as follows:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>## Step 3:\ndnn_classifier = tf.estimator.DNNClassifier(\n    feature_columns=image_feature_column,\n    hidden_units=[16, 16],\n    n_classes=10)\n</code></pre>\n\n<p>And finally, step 4 using the estimator by calling the <code>.train()</code> method:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>## Step 4:\ndnn_classifier.train(\n    input_fn=lambda:train_input_fn(ds_train_orig, batch_size=32),\n    #lambda:iris_data.train_input_fn(train_x, train_y, args.batch_size),\n    steps=20)\n</code></pre>\n\n<p>But this reuslts in the following error. It looks like the problem has arised from the dataset.</p>\n\n<pre><code>---------------------------------------------------------------------------\nRuntimeError                              Traceback (most recent call last)\n&lt;ipython-input-21-95736cd65e45&gt; in &lt;module&gt;\n      2 dnn_classifier.train(\n      3     input_fn=lambda: train_input_fn(ds_train_orig, batch_size=32),\n----&gt; 4     steps=20)\n\n~/anaconda3/envs/tf2.0-beta/lib/python3.7/site-packages/tensorflow/python/framework/ops.py in internal_convert_to_tensor(value, dtype, name, as_ref, preferred_dtype, ctx, accept_symbolic_tensors, accept_composite_tensors)\n   1183       graph = get_default_graph()\n   1184       if not graph.building_function:\n-&gt; 1185         raise RuntimeError(\"Attempting to capture an EagerTensor without \"\n   1186                            \"building a function.\")\n   1187       return graph.capture(value, name=name)\n\nRuntimeError: Attempting to capture an EagerTensor without building a function.\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 266}]