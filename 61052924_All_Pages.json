[{"items": [{"tags": ["python", "tensorflow", "tensorflow2.0", "tensorboard"], "owner": {"account_id": 6768404, "reputation": 18652, "user_id": 5212614, "user_type": "registered", "accept_rate": 32, "profile_image": "https://i.stack.imgur.com/2qaHz.jpg?s=256&g=1", "display_name": "ASH", "link": "https://stackoverflow.com/users/5212614/ash"}, "is_answered": false, "view_count": 42, "answer_count": 1, "score": 1, "last_activity_date": 1586175542, "creation_date": 1586146963, "last_edit_date": 1586175542, "question_id": 61052924, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/61052924/trying-to-run-mnist-py-code-runs-but-all-i-see-is-unable-to-connect-message-i", "title": "Trying to run mnist.py. Code runs but all I see is &#39;Unable to Connect&#39; message in browser", "body": "<p>I'm running the code below.</p>\n\n<pre><code>import os\nimport os.path\nimport shutil\nimport tensorflow as tf\n\nLOGDIR = \"C:/Users/ryans/mnist_tutorial/\"\nLABELS = os.path.join(os.getcwd(), \"labels_1024.tsv\")\nSPRITES = os.path.join(os.getcwd(), \"sprite_1024.png\")\n### MNIST EMBEDDINGS ###\n\nmnist = tf.contrib.learn.datasets.mnist.read_data_sets(train_dir=LOGDIR + \"data\", one_hot=True)\n### Get a sprite and labels file for the embedding projector ###\n\n#if not (os.path.isfile(LABELS) and os.path.isfile(SPRITES)):\n#  print(\"Necessary data files were not found. Run this command from inside the \"\n#    \"repo provided at \"\n#    \"https://github.com/dandelionmane/tf-dev-summit-tensorboard-tutorial.\")\n#  exit(1)\n\n\n# shutil.copyfile(LABELS, os.path.join(LOGDIR, LABELS))\n# shutil.copyfile(SPRITES, os.path.join(LOGDIR, SPRITES))\n\n\ndef conv_layer(input, size_in, size_out, name=\"conv\"):\n  with tf.name_scope(name):\n    w = tf.Variable(tf.truncated_normal([5, 5, size_in, size_out], stddev=0.1), name=\"W\")\n    b = tf.Variable(tf.constant(0.1, shape=[size_out]), name=\"B\")\n    conv = tf.nn.conv2d(input, w, strides=[1, 1, 1, 1], padding=\"SAME\")\n    act = tf.nn.relu(conv + b)\n    tf.summary.histogram(\"weights\", w)\n    tf.summary.histogram(\"biases\", b)\n    tf.summary.histogram(\"activations\", act)\n    return tf.nn.max_pool(act, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding=\"SAME\")\n\n\ndef fc_layer(input, size_in, size_out, name=\"fc\"):\n  with tf.name_scope(name):\n    w = tf.Variable(tf.truncated_normal([size_in, size_out], stddev=0.1), name=\"W\")\n    b = tf.Variable(tf.constant(0.1, shape=[size_out]), name=\"B\")\n    act = tf.matmul(input, w) + b\n    tf.summary.histogram(\"weights\", w)\n    tf.summary.histogram(\"biases\", b)\n    tf.summary.histogram(\"activations\", act)\n    return act\n\n\ndef mnist_model(learning_rate, use_two_fc, use_two_conv, hparam):\n  tf.reset_default_graph()\n  sess = tf.Session()\n\n  # Setup placeholders, and reshape the data\n  x = tf.placeholder(tf.float32, shape=[None, 784], name=\"x\")\n  x_image = tf.reshape(x, [-1, 28, 28, 1])\n  tf.summary.image('input', x_image, 3)\n  y = tf.placeholder(tf.float32, shape=[None, 10], name=\"labels\")\n\n  if use_two_conv:\n    conv1 = conv_layer(x_image, 1, 32, \"conv1\")\n    conv_out = conv_layer(conv1, 32, 64, \"conv2\")\n  else:\n    conv_out = conv_layer(x_image, 1, 16, \"conv\")\n\n  flattened = tf.reshape(conv_out, [-1, 7 * 7 * 64])\n\n\n  if use_two_fc:\n    fc1 = fc_layer(flattened, 7 * 7 * 64, 1024, \"fc1\")\n    relu = tf.nn.relu(fc1)\n    embedding_input = relu\n    tf.summary.histogram(\"fc1/relu\", relu)\n    embedding_size = 1024\n    logits = fc_layer(relu, 1024, 10, \"fc2\")\n  else:\n    embedding_input = flattened\n    embedding_size = 7*7*64\n    logits = fc_layer(flattened, 7*7*64, 10, \"fc\")\n\n  with tf.name_scope(\"xent\"):\n    xent = tf.reduce_mean(\n        tf.nn.softmax_cross_entropy_with_logits(\n            logits=logits, labels=y), name=\"xent\")\n    tf.summary.scalar(\"xent\", xent)\n\n  with tf.name_scope(\"train\"):\n    train_step = tf.train.AdamOptimizer(learning_rate).minimize(xent)\n\n  with tf.name_scope(\"accuracy\"):\n    correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(y, 1))\n    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n    tf.summary.scalar(\"accuracy\", accuracy)\n\n  summ = tf.summary.merge_all()\n\n\n  embedding = tf.Variable(tf.zeros([1024, embedding_size]), name=\"test_embedding\")\n  assignment = embedding.assign(embedding_input)\n  saver = tf.train.Saver()\n\n  sess.run(tf.global_variables_initializer())\n  writer = tf.summary.FileWriter(LOGDIR + hparam)\n  writer.add_graph(sess.graph)\n\n  config = tf.contrib.tensorboard.plugins.projector.ProjectorConfig()\n  embedding_config = config.embeddings.add()\n  embedding_config.tensor_name = embedding.name\n  embedding_config.sprite.image_path = SPRITES\n  embedding_config.metadata_path = LABELS\n  # Specify the width and height of a single thumbnail.\n  embedding_config.sprite.single_image_dim.extend([28, 28])\n  tf.contrib.tensorboard.plugins.projector.visualize_embeddings(writer, config)\n\n  for i in range(2001):\n    batch = mnist.train.next_batch(100)\n    if i % 5 == 0:\n      [train_accuracy, s] = sess.run([accuracy, summ], feed_dict={x: batch[0], y: batch[1]})\n      writer.add_summary(s, i)\n    if i % 500 == 0:\n      sess.run(assignment, feed_dict={x: mnist.test.images[:1024], y: mnist.test.labels[:1024]})\n      saver.save(sess, os.path.join(LOGDIR, \"model.ckpt\"), i)\n    sess.run(train_step, feed_dict={x: batch[0], y: batch[1]})\n\ndef make_hparam_string(learning_rate, use_two_fc, use_two_conv):\n  conv_param = \"conv=2\" if use_two_conv else \"conv=1\"\n  fc_param = \"fc=2\" if use_two_fc else \"fc=1\"\n  return \"lr_%.0E,%s,%s\" % (learning_rate, conv_param, fc_param)\n\ndef main():\n  # You can try adding some more learning rates\n  for learning_rate in [1E-3, 1E-4]:\n\n    # Include \"False\" as a value to try different model architectures\n    for use_two_fc in [True]:\n      for use_two_conv in [False, True]:\n        # Construct a hyperparameter string for each one (example: \"lr_1E-3,fc=2,conv=2\")\n        hparam = make_hparam_string(learning_rate, use_two_fc, use_two_conv)\n        print('Starting run for %s' % hparam)\n\n        # Actually run with the new settings\n        mnist_model(learning_rate, use_two_fc, use_two_conv, hparam)\n  print('Done training!')\n  print('Run `tensorboard --logdir=%s` to see the results.' % LOGDIR)\n  print('Running on mac? If you want to get rid of the dialogue asking to give '\n        'network permissions to TensorBoard, you can provide this flag: '\n        '--host=localhost')\n\nif __name__ == '__main__':\n  main()\n</code></pre>\n\n<p>I found the code at this site.</p>\n\n<p><a href=\"https://github.com/martinwicke/tf-dev-summit-tensorboard-tutorial/blob/master/mnist.py\" rel=\"nofollow noreferrer\">https://github.com/martinwicke/tf-dev-summit-tensorboard-tutorial/blob/master/mnist.py</a></p>\n\n<p>When I run the code, I don't get any error message, but when I try to view the results in a browser window, I only see this.</p>\n\n<p><a href=\"https://i.stack.imgur.com/3aplk.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/3aplk.png\" alt=\"enter image description here\"></a></p>\n\n<p>Finally, I open the Anaconda Prompt and enter this:</p>\n\n<pre><code>tensorboard --logdir=\"C:/Users/ryans/mnist_tutorial/\"\n</code></pre>\n\n<p>I am getting all the log files written out correctly, I think.  See the screen shot below.</p>\n\n<p><a href=\"https://i.stack.imgur.com/BmRhP.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/BmRhP.png\" alt=\"enter image description here\"></a></p>\n\n<p>I'm not sure what is wrong at this point.  Am I not pointing my browser to the right localhost?  Or, is something else wrong?  I don't see my mistake, but apparently something is off here.  Thoughts?  Thanks!!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 105}]