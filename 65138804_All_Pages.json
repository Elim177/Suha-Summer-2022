[{"items": [{"tags": ["python", "keras", "tensorflow2.0", "ssim"], "owner": {"account_id": 17995170, "reputation": 143, "user_id": 13078393, "user_type": "registered", "profile_image": "https://www.gravatar.com/avatar/db7fc090a8bc5fa18aeedf876f6df657?s=256&d=identicon&r=PG&f=1", "display_name": "shaurov2253", "link": "https://stackoverflow.com/users/13078393/shaurov2253"}, "is_answered": false, "view_count": 343, "answer_count": 0, "score": 1, "last_activity_date": 1607062606, "creation_date": 1607062606, "question_id": 65138804, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/65138804/ssim-function-in-tensorflow-2-x", "title": "SSIM function in TensorFlow 2.x", "body": "<p>I'm trying to use tf.image.ssim() as my loss function for training my model and I explored a liitle bit how people have implemented it. Here they are:</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/52798540/working-with-ssim-loss-function-in-tensorflow-for-rgb-images\">Working with SSIM loss function in tensorflow for RGB images</a></li>\n<li><a href=\"https://stackoverflow.com/questions/57357146/use-ssim-loss-function-with-keras\">Use SSIM loss function with Keras</a></li>\n</ol>\n<p>I have couple questions:</p>\n<ol>\n<li>In both these threads, the dynamic range suggested for <code>tf.image.ssim</code> is 2 when the inputs are normalized between -1 and 1. But I have ran a small sanity check to see if it works or not. Here is the code:</li>\n</ol>\n<pre><code>from PIL import Image\nimport numpy as np\nfrom skimage.util import random_noise\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nim = Image.open('E:\\\\DATA\\\\train_image_(124).png')\nim_arr = np.asarray(im) # convert PIL Image to ndarray\n\nnoise_img = random_noise(im_arr, mode='gaussian', var=0.0005) # random_noise() method will convert image in [0, 255] to [0, 1.0]\nnoise_img = (255*noise_img).astype(np.uint8)\n\nimg = Image.fromarray(noise_img)\n\n#normalizing between 0 and 1 and reshaping for SSIM calculation\nx = np.reshape((np.asarray(im)/255), [256, 256, 1])\ny = np.reshape((np.asarray(img)/255), [256, 256, 1])\n\n#normalizing between -1 and 1 and reshaping for SSIM calculation\nx_a = np.reshape((2*(np.asarray(im)/255) - 1), [256, 256, 1])\ny_a = np.reshape((2*(np.asarray(img)/255) - 1), [256, 256, 1])\n\nprint('No norm: ', str(tf.image.ssim(np.reshape(im_arr, [256, 256, 1]), np.reshape(noise_img, [256, 256, 1]), 255).numpy()))\nprint('Norm_01: ', str(tf.image.ssim(x, y, 1).numpy()))\nprint('Norm_11: ', str(tf.image.ssim(x_a, y_a, 2).numpy()))\n</code></pre>\n<p>To my understanding, all 3 print statement should give the same value of SSIM, but they don't. When the range is 0 to 1 and 0 to 255, the SSIM result is same, but with the range of - 1 to 1, it is different. To double check, I have calculated the SSIM in MATLAB too, and that nearly agrees with the first two cases. So, is there any other way to compute SSIM/use SSIM as a loss function in TF2? I did the same experiment with <code>compare_ssim</code> from skimage, but that one seems to have same result. Am I missing something?</p>\n<ol start=\"2\">\n<li>Also, when I am using <code>tf.reduce_mean(tf.keras.losses.mean_squared_error(target, gen_output))</code> as my loss function, everything is okay. But when I am using <code>tf.reduce_mean(tf.image.ssim(x, y, dynamic_range)</code> as the loss function, I'm getting NaN values. Both the threads mentioned above uses either tensorflow 1.x or <code>model.fit</code> on tensorflow2.x for training while I am using <code>tf.GradientTape()</code> to calculate the gradient and update the weights. Is it possible that the GradientTape function is responsible for returning the NaN values? If so, why and what could be a possible solution?</li>\n</ol>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 257}]