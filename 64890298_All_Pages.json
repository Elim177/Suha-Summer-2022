[{"items": [{"tags": ["python", "tensorflow", "keras"], "owner": {"user_type": "does_not_exist", "display_name": "user14253628"}, "is_answered": true, "view_count": 1218, "accepted_answer_id": 64890584, "answer_count": 1, "score": -2, "last_activity_date": 1605693240, "creation_date": 1605691649, "last_edit_date": 1605693240, "question_id": 64890298, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/64890298/nonetype-object-is-not-subscriptable-when-viewing-the-history", "title": "&#39;NoneType&#39; object is not subscriptable when viewing the history", "body": "<p>I would like to load a model and display it in a plot. Unfortunately I get an error.</p>\n<p>Why does this error occur at this point (Usually he should know?) and how do I solve it?</p>\n<p>I've already investigated this bug and looked for questions like <a href=\"https://stackoverflow.com/questions/9320766/python-math-typeerror-nonetype-object-is-not-subscriptable/9320883#9320883\">Python Math - TypeError: &#39;NoneType&#39; object is not subscriptable</a></p>\n<p>Why am I getting this error here <code>history.history['loss']</code>? Usually he should know that!</p>\n<p><strong>Error</strong>:</p>\n<pre><code>training_loss = history.history['loss']\nTypeError: 'NoneType' object is not subscriptable\n</code></pre>\n<p><strong>Code</strong>:</p>\n<pre><code>def load_model():\n    history = tf.keras.models.load_model(path)\n    return model\n\ndef get_loss(history):\n    # Get training and test loss histories\n    training_loss = history.history['loss'] # here is the error\n    test_loss = history.history['val_loss']\n\n    # Create count of the number of epochs\n    epoch_count = range(1, len(training_loss) + 1)\n\n    # Visualize loss history\n    plt.plot(epoch_count, training_loss, 'r--')\n    plt.plot(epoch_count, test_loss, 'b-')\n    plt.legend(['Training Loss', 'Test Loss'])\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.show();\n\nget_loss(load_model)\n</code></pre>\n<hr />\n<p><strong>Edit</strong>:</p>\n<pre><code>history = model.fit(...)\nmodel.save(model_file, overwrite=True)\n</code></pre>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 140}]