[{"items": [{"tags": ["python-3.x", "tensorflow", "keras", "deep-learning", "transfer-learning"], "owner": {"account_id": 14055647, "reputation": 444, "user_id": 10153071, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/XHS8k.jpg?s=256&g=1", "display_name": "Jimut123", "link": "https://stackoverflow.com/users/10153071/jimut123"}, "is_answered": true, "view_count": 87, "accepted_answer_id": 67605869, "answer_count": 1, "score": 0, "last_activity_date": 1621436675, "creation_date": 1621435113, "question_id": 67605425, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/67605425/what-to-put-in-load-model-when-there-is-custom-objects-as-gradient-reversal-laye", "title": "What to put in load model when there is custom objects as gradient reversal layer in Tensorflow (Domain Adaptation )", "body": "<p>So, here is a sample code for the domain adaptation model, and all I want to do is to save the model and load it,</p>\n<pre><code>@tf.custom_gradient\ndef grad_reverse(x):\n    y = tf.identity(x)\n    def custom_grad(dy):\n        return -dy\n    return y, custom_grad\n\nclass GradReverse(tf.keras.layers.Layer):\n    def __init__(self):\n        super().__init__(name=&quot;grl&quot;)\n\n    def call(self, x):\n        return grad_reverse(x)\n\n\ndef get_adaptable_network(input_shape=x_source_train.shape[1:]):\n    \n    inputs = Input(shape=input_shape)\n    x = Conv2D(32, 5, padding='same', activation='relu', name='conv2d_1')(inputs)\n    x = MaxPool2D(pool_size=2, strides=2, name='max_pooling2d_1')(x)\n    x = Conv2D(48, 5, padding='same', activation='relu', name='conv2d_2')(x)\n    x = MaxPool2D(pool_size=2, strides=2, name='max_pooling2d_2')(x)\n    features = Flatten(name='flatten_1')(x)\n    x = Dense(100, activation='relu', name='dense_digits_1')(features)\n    x = Dense(100, activation='relu', name='dense_digits_2')(x)\n    digits_classifier = Dense(10, activation=&quot;softmax&quot;, name=&quot;digits_classifier&quot;)(x)\n\n    domain_branch = Dense(100, activation=&quot;relu&quot;, name=&quot;dense_domain&quot;)(GradReverse()(features))\n    domain_classifier = Dense(1, activation=&quot;sigmoid&quot;, name=&quot;domain_classifier&quot;)(domain_branch)\n\n    return Model(inputs=inputs, outputs=[digits_classifier, domain_classifier])\n\nmodel = get_adaptable_network()\nmodel.summary()\n\n# download the model in computer for later use\nmodel.save('DA_MNIST_to_MNIST_m.h5')\n\nfrom tensorflow import keras\nmodel = keras.models.load_model('DA_MNIST_to_MNIST_m.h5',custom_objects={'?':? })\n</code></pre>\n<p>I am not sure what to put on the custom_objects part, since there is a custom gradient reversal layer implemented for domain adaptation in tensorflow. When I do load the model, it gives an error:</p>\n<pre><code>/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/utils/generic_utils.py in class_and_config_for_serialized_keras_object(config, module_objects, custom_objects, printable_module_name)\n    294   cls = get_registered_object(class_name, custom_objects, module_objects)\n    295   if cls is None:\n--&gt; 296     raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)\n    297 \n    298   cls_config = config['config']\n\nValueError: Unknown layer: GradReverse\n</code></pre>\n<p>I am doing MNIST to MNIST_M domain adaptation, and any help would be useful!</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 219}]