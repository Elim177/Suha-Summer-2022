[{"items": [{"tags": ["python", "numpy", "tensorflow", "keras", "lstm"], "owner": {"account_id": 7668003, "reputation": 975, "user_id": 5811195, "user_type": "registered", "profile_image": "https://lh6.googleusercontent.com/-FSll5BdvLvQ/AAAAAAAAAAI/AAAAAAAAAOQ/B1MKgnY4D-4/photo.jpg?sz=256", "display_name": "j sad", "link": "https://stackoverflow.com/users/5811195/j-sad"}, "is_answered": true, "view_count": 441, "accepted_answer_id": 60729527, "answer_count": 1, "score": 2, "last_activity_date": 1584475806, "creation_date": 1584472579, "question_id": 60728883, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60728883/how-do-i-mask-multi-output-in-tensorflow-2-lstm-training", "title": "How do I mask multi-output in Tensorflow 2 LSTM training?", "body": "<p>I am training an LSTM model in Tensorflow 2 to predict two outputs, streamflow and water temperature.</p>\n\n<ul>\n<li>For some of the time steps there is a streamflow label <strong><em>and</em></strong> a temperature label, </li>\n<li>For some there is only a streamflow label <strong><em>or</em></strong> a temperature label,</li>\n<li>and for some there are <strong><em>neither</em></strong>. </li>\n</ul>\n\n<p>So the loss function needs to ignore the temperature and streamflow loss when they don't have a label. I've done quite a bit of reading in the TF docs, but I'm struggling to figure out how to best do this.</p>\n\n<p>So far I've tried</p>\n\n<ul>\n<li>specifying <code>sample_weight_mode='temporal'</code> when compiling the model and then included a <code>sample_weight</code> numpy array when calling <code>fit</code></li>\n</ul>\n\n<p>When I do this, I get an error asking me to pass a 2D array. But that confuses me because there are 3 dimensions: <code>n_samples</code>, <code>sequence_length</code>, and <code>n_outputs</code>. </p>\n\n<p>Here's some code of what I am basically trying to do:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import tensorflow as tf\nimport numpy as np\n\n# set up the model\nsimple_lstm_model = tf.keras.models.Sequential([\n    tf.keras.layers.LSTM(8, return_sequences=True),\n    tf.keras.layers.Dense(2)\n])\n\nsimple_lstm_model.compile(optimizer='adam', loss='mae',\n                          sample_weight_mode='temporal')\n\nn_sample = 2\nseq_len = 10\nn_feat = 5\nn_out = 2\n\n# random in/out\nx = np.random.randn(n_sample, seq_len, n_feat)\ny_true = np.random.randn(n_sample, seq_len, n_out)\n\n# set the initial mask as all ones (everything counts equally)\nmask = np.ones([n_sample, seq_len, n_out])\n# set the mask so that in the 0th sample, in the 3-8th time step\n# the 1th variable is not counted in the loss function\nmask[0, 3:8, 1] = 0\n\nsimple_lstm_model.fit(x, y_true, sample_weight=mask)\n</code></pre>\n\n<p>The error: </p>\n\n<pre><code>ValueError: Found a sample_weight array with shape (2, 10, 2). In order to use timestep-wise sample weighting, you should\npass a 2D sample_weight array.\n</code></pre>\n\n<p>Any ideas? I must not understand what <code>sample_weights</code> do because to me it only makes sense if the <code>sample_weight</code> array has the same dimensions as the output. I could write a custom loss function and handle the masking manually, but it seems like there should be a more general or built in solution.</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 0}]