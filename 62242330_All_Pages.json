[{"items": [{"tags": ["python", "tensorflow", "keras", "deep-learning"], "owner": {"account_id": 17953548, "reputation": 159, "user_id": 13046181, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-dyv_c_4uMh4/AAAAAAAAAAI/AAAAAAAAAAA/AKF05nDau8Si1ypvdqOuKdFA5Q8S_m5lOA/photo.jpg?sz=256", "display_name": "programmer pro", "link": "https://stackoverflow.com/users/13046181/programmer-pro"}, "is_answered": true, "view_count": 11573, "answer_count": 1, "score": 4, "last_activity_date": 1591516806, "creation_date": 1591515744, "last_edit_date": 1591516806, "question_id": 62242330, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/62242330/error-when-subclassing-the-model-class-you-should-implement-a-call-method", "title": "Error: When subclassing the `Model` class, you should implement a `call` method. on tensorflow custom model", "body": "<p>I am trying to train my custom model on Cifar 10 dataset.\n My model's code is below: -</p>\n\n<pre><code>class cifar10Model(keras.Model):\n  def __init__(self):\n    super(cifar10Model, self).__init__()\n    self.conv1 = keras.layers.Conv2D(32, 3, activation='relu', input_shape=(32, 32, 3))\n    self.pool1 = keras.layers.MaxPool2D((3, 3))\n    self.batch_norm1 = keras.layers.BatchNormalization()\n    self.dropout1 = keras.layers.Dropout(0.1)\n\n    self.conv2 = keras.layers.Conv2D(64, 3, activation='relu')\n    self.pool2 = keras.layers.MaxPool2D((3, 3))\n    self.batch_norm2 = keras.layers.BatchNormalization()\n    self.dropout2 = keras.layers.Dropout(0.2)\n\n    self.conv3 = keras.layers.Conv2D(128, 3, activation='relu')\n    self.pool3 = keras.layers.MaxPool2D((3, 3))\n    self.batch_norm3 = keras.layers.BatchNormalization()\n    self.dropout3 = keras.layers.Dropout(0.3)\n\n    self.flatten = keras.layers.Flatten()\n    self.dense1 = keras.layers.Dense(128, activation='relu')\n    self.dense2 = keras.layers.Dense(10)\n\n    def call(self, x):\n      x = self.conv1(x)\n      x = self.pool1(x)\n      x = self.batch_norm1(X)\n      x = self.dropout1(x)\n\n      x = self.conv2(x)\n      x = self.pool2(x)\n      x = self.batch_norm2(X)\n      x = self.dropout2(x)\n\n      x = self.conv3(x)\n      x = self.pool3(x)\n      x = self.batch_norm3(x)\n      x = self.dropout3(x)\n\n      x = self.flatten(x)\n      x = self.dense1(x)\n      return self.dense2(x)\n\nmodel = cifar10Model()\n</code></pre>\n\n<p>When i run this code this gives me no error.</p>\n\n<p>Then i defined my training loop</p>\n\n<pre><code>loss_object = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n\noptimizer = keras.optimizers.Adam()\n\ntrain_loss = tf.keras.metrics.Mean(name='train_loss')\ntrain_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='train_accuracy')\n\ntest_loss = tf.keras.metrics.Mean(name='test_loss')\ntest_accuracy = tf.keras.metrics.SparseCategoricalAccuracy(name='test_accuracy')\n\n@tf.function\ndef train_step(images, labels):\n  with tf.GradientTape() as tape:\n    predictions = model(images, training=True)\n    loss = loss_object(labels, predictions)\n  grad = tape.gradient(loss, model.trainable_variables)\n  optimizer.apply_gradients(zip(grad, model.trainable_variables))\n  train_loss(loss)\n  train_accuracy(labels, predictions)\n\n@tf.function\ndef test_step(images, labels):\n  predictions = model(images)\n  t_loss = loss_object(labels, predictions)\n\n  test_loss(t_loss)\n  test_accuracy(labels, predictions)\n\nepochs = 10\n\nfor epoch in range(epochs):\n  train_loss.reset_states()\n  train_accuracy.reset_states()\n  test_loss.reset_states()\n  test_accuracy.reset_states()\n\n  for images, labels in train_dataset:\n    train_step(images, labels)\n\n  for images, labels in test_dataset:\n    test_step(images, labels)\n\n  template = 'Epoch {}, Loss: {}, Accuracy: {}, Test Loss: {}, Test Accuracy: {}'\n  print(template.format(epoch + 1,\n                        train_loss.result(),\n                        train_accuracy.result() * 100,\n                        test_loss.result(),\n                        test_accuracy.result() * 100))\n</code></pre>\n\n<p>When i run this code, i get the following error</p>\n\n<pre><code>NotImplementedError: When subclassing the `Model` class, you should implement a `call` method.\n</code></pre>\n\n<p>I am currently running my code on google colab.</p>\n\n<p>My colab link is <a href=\"https://colab.research.google.com/drive/1sOlbRpPRdyOCJI0zRFfIA-Trj1vrIbWY?usp=sharing\" rel=\"nofollow noreferrer\">https://colab.research.google.com/drive/1sOlbRpPRdyOCJI0zRFfIA-Trj1vrIbWY?usp=sharing</a></p>\n\n<p>My tensorflow version on colab is 2.2.0</p>\n\n<p>Also, when i tried to predict labels from untrained model by this code :-</p>\n\n<pre><code>print(model(train_images))\n</code></pre>\n\n<p>This also gives me the same error.\nThe error is saying that i have not implemented the call method on model.\nbut, i have defined the call method.</p>\n\n<p>I also tried by changing the call method to <code>__call__</code> method.</p>\n\n<p>But still, it gives me the same error.</p>\n\n<p>Thanks in advance :-</p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 180}]