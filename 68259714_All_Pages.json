[{"items": [{"tags": ["python", "tensorflow", "machine-learning", "keras", "deep-learning"], "owner": {"account_id": 15116032, "reputation": 30088, "user_id": 10908375, "user_type": "registered", "profile_image": "https://i.stack.imgur.com/L7f8w.jpg?s=256&g=1", "display_name": "Nicolas Gervais", "link": "https://stackoverflow.com/users/10908375/nicolas-gervais"}, "is_answered": true, "view_count": 675, "accepted_answer_id": 68267251, "answer_count": 2, "score": 1, "last_activity_date": 1635700250, "creation_date": 1625504355, "last_edit_date": 1625560906, "question_id": 68259714, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/68259714/get-the-output-of-the-last-convolutional-layer-of-a-pre-trained-architecture-in", "title": "Get the output of the last convolutional layer of a pre-trained architecture in subclassed Keras model for gradcam", "body": "<p>I'm trying to get the output of the final convolutional layer of a pre-trained model. I need it to calculate the grad-cam. In order to do this, I need to make a model that has two outputs, one classification, and the output of the convolutional layer, like in this <a href=\"https://keras.io/examples/vision/grad_cam/\" rel=\"nofollow noreferrer\">tutorial</a>. It's not working. It says:</p>\n<blockquote>\n<p>AttributeError: Layer custom_mobile_net_3 has no inbound nodes.</p>\n</blockquote>\n<pre><code>import tensorflow as tf\nfrom tensorflow import keras as K\nimport numpy as np\n\nheight, width, channels = 224, 224, 3\n\nclass CustomMobileNet(K.Model):\n    def __init__(self):\n        super(CustomMobileNet, self).__init__()\n        self.base = K.applications.MobileNetV2(input_shape=(height, width, channels),\n                                               include_top=True,\n                                               weights=None)\n        self.out = K.layers.Dense(4, activation='sigmoid')\n\n    def call(self, x, training=None, **kwargs):\n        x = self.base(x)\n        x = self.out(x)\n        return x\n\nmodel = CustomMobileNet()\n\nlast_conv_layer_name = list(filter(lambda x: isinstance(x, \n                       K.layers.Conv2D), model.base.layers))[-1].name\n\ngrad_model = tf.keras.models.Model(\n        [model.base.inputs], \n        [model.base.get_layer(last_conv_layer_name).output,\n                              model.output]\n    ) # PROBLEM\n\nimg_array = np.random.rand(1, 224, 224, 3).astype(np.float32)\npred_index = None\n\nwith tf.GradientTape() as tape:\n    last_conv_layer_output, preds = grad_model(img_array)\n    if pred_index is None:\n        pred_index = tf.argmax(preds[0])\n    class_channel = preds[:, pred_index]\n\ngrads = tape.gradient(class_channel, last_conv_layer_output)\n</code></pre>\n<p><strong>Changing the model definition is not an option.</strong></p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 110}]