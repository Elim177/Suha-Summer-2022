[{"items": [{"tags": ["tensorflow2.0", "tf.keras", "gradienttape"], "owner": {"account_id": 13993027, "reputation": 163, "user_id": 10106574, "user_type": "registered", "profile_image": "https://lh4.googleusercontent.com/-aOky27Zg0gY/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7ruRdyBX1yNazVzN66fz-5w9rSKLg/mo/photo.jpg?sz=256", "display_name": "Brian Lee", "link": "https://stackoverflow.com/users/10106574/brian-lee"}, "is_answered": false, "view_count": 1087, "answer_count": 3, "score": 0, "last_activity_date": 1650526847, "creation_date": 1581201877, "question_id": 60131926, "content_license": "CC BY-SA 4.0", "link": "https://stackoverflow.com/questions/60131926/how-to-save-and-load-model-with-tf-gradienttape-in-tenworflow2", "title": "How to save and load model with tf.gradienttape in tenworflow2", "body": "<p>I am using tf.gradienttape for model training and it is successful to save checkpoints for every epoch. </p>\n\n<pre><code>with train_summary_writer.as_default():\n  with tf.summary.record_if(True):\n    for epoch in range(epochs):\n      for train_id in range(train_start_id, train_end_id):\n          batch_data_path= train_data_path + 'train_data_' + str(train_id).zfill(6) + \".npy\"\n          batch_data = np.load(data_path)\n          batch_data = np.transpose(batch_data, (0, 2, 3, 1))\n          x_inp = np.reshape(np.asarray(batch_data), [-1, 5, 5, 5, 3])\n          train(loss, model, opt, x_inp)\n\n          loss_values = loss(model, x_inp)\n          reconstructed = np.reshape(model(x_inp), [1, sensor_n, sensor_n, scale_n])\n          # if int(train_id) % 2000:      \n          tf.summary.scalar('loss',loss_values, step = train_id)\n          tf.summary.image('original', tf.reshape(x_inp, (step_max, sensor_n, sensor_n, scale_n)), max_outputs=10, step=train_id)\n          tf.summary.image('reconstructed', reconstructed, max_outputs=10, step=train_id)\n          print(\"Epoch: {}  /////   Step: {}/{} ===========================&gt; Loss: {} \".format(epoch, train_id, train_end_id, loss_values))\n      save_path = manager.save()\n      print(\"Saved checkpoint for epoch {}: {}\".format(epoch, save_path))\n      print(\"loss : {}\".format(loss_values.numpy()))\n\n</code></pre>\n\n<p>Two following questions,\n1. How can I save this model?\n2. How can I load this model later on? </p>\n\n<p>My model is kind of auto-encoder typed model, so it is necessary to create reconstructed model to compare and see errors. </p>\n"}], "has_more": false, "quota_max": 300, "quota_remaining": 91}]